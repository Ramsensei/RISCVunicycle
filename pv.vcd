$date
	Fri Apr 12 13:44:46 2024
$end

$version
	Synopsys VCS version R-2020.12-SP2_Full64
$end

$timescale
	1s
$end

$comment Csum: 1 0ed575698b819070 $end


$scope module tb_Nbit_Equal_Comp $end
$var reg 32 ! Data0 [31:0] $end
$var reg 32 " Data1 [31:0] $end
$var wire 1 # Out $end

$scope module nbit_equal_comp $end
$var wire 32 $ Data0 [31:0] $end
$var wire 32 % Data1 [31:0] $end
$var reg 1 & Out $end
$var reg 32 ' Comps [31:0] $end

$scope module generate_NComps[0].equal_one_bit $end
$var wire 1 ( Data0 $end
$var wire 1 ) Data1 $end
$var reg 1 * Out $end
$upscope $end


$scope module generate_NComps[1].equal_one_bit $end
$var wire 1 + Data0 $end
$var wire 1 , Data1 $end
$var reg 1 - Out $end
$upscope $end


$scope module generate_NComps[2].equal_one_bit $end
$var wire 1 . Data0 $end
$var wire 1 / Data1 $end
$var reg 1 0 Out $end
$upscope $end


$scope module generate_NComps[3].equal_one_bit $end
$var wire 1 1 Data0 $end
$var wire 1 2 Data1 $end
$var reg 1 3 Out $end
$upscope $end


$scope module generate_NComps[4].equal_one_bit $end
$var wire 1 4 Data0 $end
$var wire 1 5 Data1 $end
$var reg 1 6 Out $end
$upscope $end


$scope module generate_NComps[5].equal_one_bit $end
$var wire 1 7 Data0 $end
$var wire 1 8 Data1 $end
$var reg 1 9 Out $end
$upscope $end


$scope module generate_NComps[6].equal_one_bit $end
$var wire 1 : Data0 $end
$var wire 1 ; Data1 $end
$var reg 1 < Out $end
$upscope $end


$scope module generate_NComps[7].equal_one_bit $end
$var wire 1 = Data0 $end
$var wire 1 > Data1 $end
$var reg 1 ? Out $end
$upscope $end


$scope module generate_NComps[8].equal_one_bit $end
$var wire 1 @ Data0 $end
$var wire 1 A Data1 $end
$var reg 1 B Out $end
$upscope $end


$scope module generate_NComps[9].equal_one_bit $end
$var wire 1 C Data0 $end
$var wire 1 D Data1 $end
$var reg 1 E Out $end
$upscope $end


$scope module generate_NComps[10].equal_one_bit $end
$var wire 1 F Data0 $end
$var wire 1 G Data1 $end
$var reg 1 H Out $end
$upscope $end


$scope module generate_NComps[11].equal_one_bit $end
$var wire 1 I Data0 $end
$var wire 1 J Data1 $end
$var reg 1 K Out $end
$upscope $end


$scope module generate_NComps[12].equal_one_bit $end
$var wire 1 L Data0 $end
$var wire 1 M Data1 $end
$var reg 1 N Out $end
$upscope $end


$scope module generate_NComps[13].equal_one_bit $end
$var wire 1 O Data0 $end
$var wire 1 P Data1 $end
$var reg 1 Q Out $end
$upscope $end


$scope module generate_NComps[14].equal_one_bit $end
$var wire 1 R Data0 $end
$var wire 1 S Data1 $end
$var reg 1 T Out $end
$upscope $end


$scope module generate_NComps[15].equal_one_bit $end
$var wire 1 U Data0 $end
$var wire 1 V Data1 $end
$var reg 1 W Out $end
$upscope $end


$scope module generate_NComps[16].equal_one_bit $end
$var wire 1 X Data0 $end
$var wire 1 Y Data1 $end
$var reg 1 Z Out $end
$upscope $end


$scope module generate_NComps[17].equal_one_bit $end
$var wire 1 [ Data0 $end
$var wire 1 \ Data1 $end
$var reg 1 ] Out $end
$upscope $end


$scope module generate_NComps[18].equal_one_bit $end
$var wire 1 ^ Data0 $end
$var wire 1 _ Data1 $end
$var reg 1 ` Out $end
$upscope $end


$scope module generate_NComps[19].equal_one_bit $end
$var wire 1 a Data0 $end
$var wire 1 b Data1 $end
$var reg 1 c Out $end
$upscope $end


$scope module generate_NComps[20].equal_one_bit $end
$var wire 1 d Data0 $end
$var wire 1 e Data1 $end
$var reg 1 f Out $end
$upscope $end


$scope module generate_NComps[21].equal_one_bit $end
$var wire 1 g Data0 $end
$var wire 1 h Data1 $end
$var reg 1 i Out $end
$upscope $end


$scope module generate_NComps[22].equal_one_bit $end
$var wire 1 j Data0 $end
$var wire 1 k Data1 $end
$var reg 1 l Out $end
$upscope $end


$scope module generate_NComps[23].equal_one_bit $end
$var wire 1 m Data0 $end
$var wire 1 n Data1 $end
$var reg 1 o Out $end
$upscope $end


$scope module generate_NComps[24].equal_one_bit $end
$var wire 1 p Data0 $end
$var wire 1 q Data1 $end
$var reg 1 r Out $end
$upscope $end


$scope module generate_NComps[25].equal_one_bit $end
$var wire 1 s Data0 $end
$var wire 1 t Data1 $end
$var reg 1 u Out $end
$upscope $end


$scope module generate_NComps[26].equal_one_bit $end
$var wire 1 v Data0 $end
$var wire 1 w Data1 $end
$var reg 1 x Out $end
$upscope $end


$scope module generate_NComps[27].equal_one_bit $end
$var wire 1 y Data0 $end
$var wire 1 z Data1 $end
$var reg 1 { Out $end
$upscope $end


$scope module generate_NComps[28].equal_one_bit $end
$var wire 1 | Data0 $end
$var wire 1 } Data1 $end
$var reg 1 ~ Out $end
$upscope $end


$scope module generate_NComps[29].equal_one_bit $end
$var wire 1 "! Data0 $end
$var wire 1 "" Data1 $end
$var reg 1 "# Out $end
$upscope $end


$scope module generate_NComps[30].equal_one_bit $end
$var wire 1 "$ Data0 $end
$var wire 1 "% Data1 $end
$var reg 1 "& Out $end
$upscope $end


$scope module generate_NComps[31].equal_one_bit $end
$var wire 1 "' Data0 $end
$var wire 1 "( Data1 $end
$var reg 1 ") Out $end
$upscope $end

$upscope $end

$upscope $end

$enddefinitions $end

#0
$dumpvars
1#
1&
x(
xX
x)
xY
x")
xW
x+
x[
x,
x\
x"&
xT
x.
x^
x/
x_
x"#
xQ
x1
xa
x2
xb
x~
xN
x4
xd
x5
xe
x{
xK
x7
xg
x8
xh
xx
xH
x:
xj
x;
xk
xu
xE
x=
xm
x>
xn
xr
xB
x@
xp
xA
xq
xo
x?
xC
xs
xD
xt
xl
x<
xF
xv
xG
xw
xi
x9
xI
xy
xJ
xz
xf
x6
xL
x|
xM
x}
xc
x3
xO
x"!
xP
x""
x`
x0
xR
x"$
xS
x"%
x]
x-
xU
x"'
xV
x"(
xZ
x*
b11111111111111111111111111111111 '
b00000000000000000000000000000000 !
b00000000000000000000000000000000 "
b00000000000000000000000000000000 $
b00000000000000000000000000000000 %
$end
0(
0+
0.
01
04
07
0:
0=
0@
0C
0F
0I
0L
0O
0R
0U
0X
0[
0^
0a
0d
0g
0j
0m
0p
0s
0v
0y
0|
0"!
0"$
0"'
0)
0,
0/
02
05
08
0;
0>
0A
0D
0G
0J
0M
0P
0S
0V
0Y
0\
0_
0b
0e
0h
0k
0n
0q
0t
0w
0z
0}
0""
0"%
0"(
1")
1"&
1"#
1~
1{
1x
1u
1r
1o
1l
1i
1f
1c
1`
1]
1Z
1W
1T
1Q
1N
1K
1H
1E
1B
1?
1<
19
16
13
10
1-
1*
#10
b00000001001000110100010101100111 !
b00000001001000110100010101100111 $
1(
1+
1.
17
1:
1@
1F
1R
1X
1[
1g
1p
0r
0i
0]
0Z
0T
0H
0B
0<
09
00
0-
0*
b11111110110111001011101010011000 '
0&
0#
b00000001001000110100010101100111 "
b00000001001000110100010101100111 %
1)
1,
1/
18
1;
1A
1G
1S
1Y
1\
1h
1q
1r
1i
1]
1Z
1T
1H
1B
1<
19
10
1-
1*
b11111111111111111111111111111111 '
1&
1#
#20
b01110110010101000011001000010000 "
b01110110010101000011001000010000 %
0)
0,
0/
15
08
0;
0A
1D
0G
1M
1P
0S
0Y
0\
1_
1e
0h
1k
0q
1t
1w
1}
1""
1"%
0"&
0"#
0~
0x
0u
0r
0l
0i
0f
0`
0]
0Z
0T
0Q
0N
0H
0E
0B
0<
09
06
00
0-
0*
b10001000100010001000100010001000 '
0&
0#
#30
b00000001001000110100010101101000 "
b00000001001000110100010101101000 %
12
05
18
1;
1A
0D
1G
0M
0P
1S
1Y
1\
0_
0e
1h
0k
1q
0t
0w
0}
0""
0"%
1"&
1"#
1~
1x
1u
1r
1l
1i
1f
1`
1]
1Z
1T
1Q
1N
1H
1E
1B
1<
19
16
03
b11111111111111111111111111110000 '
#40
b00000001001000110100010101100110 "
b00000001001000110100010101100110 %
1,
1/
02
13
10
1-
b11111111111111111111111111111110 '
#50
b00010010110111100010010011110110 !
b00010010110111100010010011110110 $
0(
14
1=
0@
1O
0R
0X
1^
1a
1d
0g
1j
1m
0p
1s
1|
0~
0u
0r
0o
0l
0i
0f
0c
0`
0Z
0T
0Q
0B
0?
06
1*
b11101100000000101001111001101111 '
b00010010110111100010010011110110 "
b00010010110111100010010011110110 %
15
1>
0A
1P
0S
0Y
1_
1b
1e
0h
1k
1n
0q
1t
1}
1~
1u
1r
1o
1l
1i
1f
1c
1`
1Z
1T
1Q
1B
1?
16
b11111111111111111111111111111111 '
1&
1#
#60
b00000000000000000000000000000000 !
b00000000000000000000000000000000 $
0+
0.
04
07
0:
0=
0F
0O
0[
0^
0a
0d
0j
0m
0s
0|
0~
0u
0o
0l
0f
0c
0`
0]
0Q
0H
0?
0<
09
06
00
0-
b11101101001000011101101100001001 '
0&
0#
b00000000000000000000000000000001 "
b00000000000000000000000000000001 %
1)
0,
0/
05
08
0;
0>
0G
0P
0\
0_
0b
0e
0k
0n
0t
0}
1~
1u
1o
1l
1f
1c
1`
1]
1Q
1H
1?
1<
19
16
10
1-
0*
b11111111111111111111111111111110 '

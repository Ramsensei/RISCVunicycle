$date
	Fri Apr 12 14:05:08 2024
$end

$version
	Synopsys VCS version R-2020.12-SP2_Full64
$end

$timescale
	1s
$end

$comment Csum: 1 3b9af09e031c1fb7 $end


$scope module tb_Register_File $end
$var reg 1 ! clk $end
$var reg 6 " address1 [0:5] $end
$var reg 6 # address2 [0:5] $end
$var reg 6 $ addressw [0:5] $end
$var reg 64 % writeData [0:63] $end
$var reg 1 & writeEn $end
$var wire 64 ' read1 [0:63] $end
$var wire 64 ( read2 [0:63] $end

$scope module register_file $end
$var wire 5 ) address1 [0:4] $end
$var wire 5 * address2 [0:4] $end
$var wire 5 + addressw [0:4] $end
$var wire 64 , writeData [0:63] $end
$var wire 1 - writeEn $end
$var wire 1 . clk $end
$var reg 64 / read1 [0:63] $end
$var reg 64 0 read2 [0:63] $end
$var reg 32 1 hotbitOut [31:0] $end
$var wire 32 2 regEnable [31:0] $end

$scope module hotbit1 $end
$var wire 5 + index [4:0] $end
$var reg 32 3 Out [31:0] $end

$scope module generate_hotbit_outputs[0].equal_n_bits $end
$var wire 5 + Data0 [4:0] $end
$var wire 5 4 Data1 [4:0] $end
$var reg 1 5 Out $end
$var reg 5 6 Comps [4:0] $end

$scope module generate_NComps[0].equal_one_bit $end
$var wire 1 7 Data0 $end
$var wire 1 8 Data1 $end
$var reg 1 9 Out $end
$upscope $end


$scope module generate_NComps[1].equal_one_bit $end
$var wire 1 : Data0 $end
$var wire 1 ; Data1 $end
$var reg 1 < Out $end
$upscope $end


$scope module generate_NComps[2].equal_one_bit $end
$var wire 1 = Data0 $end
$var wire 1 > Data1 $end
$var reg 1 ? Out $end
$upscope $end


$scope module generate_NComps[3].equal_one_bit $end
$var wire 1 @ Data0 $end
$var wire 1 A Data1 $end
$var reg 1 B Out $end
$upscope $end


$scope module generate_NComps[4].equal_one_bit $end
$var wire 1 C Data0 $end
$var wire 1 D Data1 $end
$var reg 1 E Out $end
$upscope $end

$upscope $end


$scope module generate_hotbit_outputs[1].equal_n_bits $end
$var wire 5 + Data0 [4:0] $end
$var wire 5 F Data1 [4:0] $end
$var reg 1 G Out $end
$var reg 5 H Comps [4:0] $end

$scope module generate_NComps[0].equal_one_bit $end
$var wire 1 I Data0 $end
$var wire 1 J Data1 $end
$var reg 1 K Out $end
$upscope $end


$scope module generate_NComps[1].equal_one_bit $end
$var wire 1 L Data0 $end
$var wire 1 M Data1 $end
$var reg 1 N Out $end
$upscope $end


$scope module generate_NComps[2].equal_one_bit $end
$var wire 1 O Data0 $end
$var wire 1 P Data1 $end
$var reg 1 Q Out $end
$upscope $end


$scope module generate_NComps[3].equal_one_bit $end
$var wire 1 R Data0 $end
$var wire 1 S Data1 $end
$var reg 1 T Out $end
$upscope $end


$scope module generate_NComps[4].equal_one_bit $end
$var wire 1 U Data0 $end
$var wire 1 V Data1 $end
$var reg 1 W Out $end
$upscope $end

$upscope $end


$scope module generate_hotbit_outputs[2].equal_n_bits $end
$var wire 5 + Data0 [4:0] $end
$var wire 5 X Data1 [4:0] $end
$var reg 1 Y Out $end
$var reg 5 Z Comps [4:0] $end

$scope module generate_NComps[0].equal_one_bit $end
$var wire 1 [ Data0 $end
$var wire 1 \ Data1 $end
$var reg 1 ] Out $end
$upscope $end


$scope module generate_NComps[1].equal_one_bit $end
$var wire 1 ^ Data0 $end
$var wire 1 _ Data1 $end
$var reg 1 ` Out $end
$upscope $end


$scope module generate_NComps[2].equal_one_bit $end
$var wire 1 a Data0 $end
$var wire 1 b Data1 $end
$var reg 1 c Out $end
$upscope $end


$scope module generate_NComps[3].equal_one_bit $end
$var wire 1 d Data0 $end
$var wire 1 e Data1 $end
$var reg 1 f Out $end
$upscope $end


$scope module generate_NComps[4].equal_one_bit $end
$var wire 1 g Data0 $end
$var wire 1 h Data1 $end
$var reg 1 i Out $end
$upscope $end

$upscope $end


$scope module generate_hotbit_outputs[3].equal_n_bits $end
$var wire 5 + Data0 [4:0] $end
$var wire 5 j Data1 [4:0] $end
$var reg 1 k Out $end
$var reg 5 l Comps [4:0] $end

$scope module generate_NComps[0].equal_one_bit $end
$var wire 1 m Data0 $end
$var wire 1 n Data1 $end
$var reg 1 o Out $end
$upscope $end


$scope module generate_NComps[1].equal_one_bit $end
$var wire 1 p Data0 $end
$var wire 1 q Data1 $end
$var reg 1 r Out $end
$upscope $end


$scope module generate_NComps[2].equal_one_bit $end
$var wire 1 s Data0 $end
$var wire 1 t Data1 $end
$var reg 1 u Out $end
$upscope $end


$scope module generate_NComps[3].equal_one_bit $end
$var wire 1 v Data0 $end
$var wire 1 w Data1 $end
$var reg 1 x Out $end
$upscope $end


$scope module generate_NComps[4].equal_one_bit $end
$var wire 1 y Data0 $end
$var wire 1 z Data1 $end
$var reg 1 { Out $end
$upscope $end

$upscope $end


$scope module generate_hotbit_outputs[4].equal_n_bits $end
$var wire 5 + Data0 [4:0] $end
$var wire 5 | Data1 [4:0] $end
$var reg 1 } Out $end
$var reg 5 ~ Comps [4:0] $end

$scope module generate_NComps[0].equal_one_bit $end
$var wire 1 "! Data0 $end
$var wire 1 "" Data1 $end
$var reg 1 "# Out $end
$upscope $end


$scope module generate_NComps[1].equal_one_bit $end
$var wire 1 "$ Data0 $end
$var wire 1 "% Data1 $end
$var reg 1 "& Out $end
$upscope $end


$scope module generate_NComps[2].equal_one_bit $end
$var wire 1 "' Data0 $end
$var wire 1 "( Data1 $end
$var reg 1 ") Out $end
$upscope $end


$scope module generate_NComps[3].equal_one_bit $end
$var wire 1 "* Data0 $end
$var wire 1 "+ Data1 $end
$var reg 1 ", Out $end
$upscope $end


$scope module generate_NComps[4].equal_one_bit $end
$var wire 1 "- Data0 $end
$var wire 1 ". Data1 $end
$var reg 1 "/ Out $end
$upscope $end

$upscope $end


$scope module generate_hotbit_outputs[5].equal_n_bits $end
$var wire 5 + Data0 [4:0] $end
$var wire 5 "0 Data1 [4:0] $end
$var reg 1 "1 Out $end
$var reg 5 "2 Comps [4:0] $end

$scope module generate_NComps[0].equal_one_bit $end
$var wire 1 "3 Data0 $end
$var wire 1 "4 Data1 $end
$var reg 1 "5 Out $end
$upscope $end


$scope module generate_NComps[1].equal_one_bit $end
$var wire 1 "6 Data0 $end
$var wire 1 "7 Data1 $end
$var reg 1 "8 Out $end
$upscope $end


$scope module generate_NComps[2].equal_one_bit $end
$var wire 1 "9 Data0 $end
$var wire 1 ": Data1 $end
$var reg 1 "; Out $end
$upscope $end


$scope module generate_NComps[3].equal_one_bit $end
$var wire 1 "< Data0 $end
$var wire 1 "= Data1 $end
$var reg 1 "> Out $end
$upscope $end


$scope module generate_NComps[4].equal_one_bit $end
$var wire 1 "? Data0 $end
$var wire 1 "@ Data1 $end
$var reg 1 "A Out $end
$upscope $end

$upscope $end


$scope module generate_hotbit_outputs[6].equal_n_bits $end
$var wire 5 + Data0 [4:0] $end
$var wire 5 "B Data1 [4:0] $end
$var reg 1 "C Out $end
$var reg 5 "D Comps [4:0] $end

$scope module generate_NComps[0].equal_one_bit $end
$var wire 1 "E Data0 $end
$var wire 1 "F Data1 $end
$var reg 1 "G Out $end
$upscope $end


$scope module generate_NComps[1].equal_one_bit $end
$var wire 1 "H Data0 $end
$var wire 1 "I Data1 $end
$var reg 1 "J Out $end
$upscope $end


$scope module generate_NComps[2].equal_one_bit $end
$var wire 1 "K Data0 $end
$var wire 1 "L Data1 $end
$var reg 1 "M Out $end
$upscope $end


$scope module generate_NComps[3].equal_one_bit $end
$var wire 1 "N Data0 $end
$var wire 1 "O Data1 $end
$var reg 1 "P Out $end
$upscope $end


$scope module generate_NComps[4].equal_one_bit $end
$var wire 1 "Q Data0 $end
$var wire 1 "R Data1 $end
$var reg 1 "S Out $end
$upscope $end

$upscope $end


$scope module generate_hotbit_outputs[7].equal_n_bits $end
$var wire 5 + Data0 [4:0] $end
$var wire 5 "T Data1 [4:0] $end
$var reg 1 "U Out $end
$var reg 5 "V Comps [4:0] $end

$scope module generate_NComps[0].equal_one_bit $end
$var wire 1 "W Data0 $end
$var wire 1 "X Data1 $end
$var reg 1 "Y Out $end
$upscope $end


$scope module generate_NComps[1].equal_one_bit $end
$var wire 1 "Z Data0 $end
$var wire 1 "[ Data1 $end
$var reg 1 "\ Out $end
$upscope $end


$scope module generate_NComps[2].equal_one_bit $end
$var wire 1 "] Data0 $end
$var wire 1 "^ Data1 $end
$var reg 1 "_ Out $end
$upscope $end


$scope module generate_NComps[3].equal_one_bit $end
$var wire 1 "` Data0 $end
$var wire 1 "a Data1 $end
$var reg 1 "b Out $end
$upscope $end


$scope module generate_NComps[4].equal_one_bit $end
$var wire 1 "c Data0 $end
$var wire 1 "d Data1 $end
$var reg 1 "e Out $end
$upscope $end

$upscope $end


$scope module generate_hotbit_outputs[8].equal_n_bits $end
$var wire 5 + Data0 [4:0] $end
$var wire 5 "f Data1 [4:0] $end
$var reg 1 "g Out $end
$var reg 5 "h Comps [4:0] $end

$scope module generate_NComps[0].equal_one_bit $end
$var wire 1 "i Data0 $end
$var wire 1 "j Data1 $end
$var reg 1 "k Out $end
$upscope $end


$scope module generate_NComps[1].equal_one_bit $end
$var wire 1 "l Data0 $end
$var wire 1 "m Data1 $end
$var reg 1 "n Out $end
$upscope $end


$scope module generate_NComps[2].equal_one_bit $end
$var wire 1 "o Data0 $end
$var wire 1 "p Data1 $end
$var reg 1 "q Out $end
$upscope $end


$scope module generate_NComps[3].equal_one_bit $end
$var wire 1 "r Data0 $end
$var wire 1 "s Data1 $end
$var reg 1 "t Out $end
$upscope $end


$scope module generate_NComps[4].equal_one_bit $end
$var wire 1 "u Data0 $end
$var wire 1 "v Data1 $end
$var reg 1 "w Out $end
$upscope $end

$upscope $end


$scope module generate_hotbit_outputs[9].equal_n_bits $end
$var wire 5 + Data0 [4:0] $end
$var wire 5 "x Data1 [4:0] $end
$var reg 1 "y Out $end
$var reg 5 "z Comps [4:0] $end

$scope module generate_NComps[0].equal_one_bit $end
$var wire 1 "{ Data0 $end
$var wire 1 "| Data1 $end
$var reg 1 "} Out $end
$upscope $end


$scope module generate_NComps[1].equal_one_bit $end
$var wire 1 "~ Data0 $end
$var wire 1 #! Data1 $end
$var reg 1 #" Out $end
$upscope $end


$scope module generate_NComps[2].equal_one_bit $end
$var wire 1 ## Data0 $end
$var wire 1 #$ Data1 $end
$var reg 1 #% Out $end
$upscope $end


$scope module generate_NComps[3].equal_one_bit $end
$var wire 1 #& Data0 $end
$var wire 1 #' Data1 $end
$var reg 1 #( Out $end
$upscope $end


$scope module generate_NComps[4].equal_one_bit $end
$var wire 1 #) Data0 $end
$var wire 1 #* Data1 $end
$var reg 1 #+ Out $end
$upscope $end

$upscope $end


$scope module generate_hotbit_outputs[10].equal_n_bits $end
$var wire 5 + Data0 [4:0] $end
$var wire 5 #, Data1 [4:0] $end
$var reg 1 #- Out $end
$var reg 5 #. Comps [4:0] $end

$scope module generate_NComps[0].equal_one_bit $end
$var wire 1 #/ Data0 $end
$var wire 1 #0 Data1 $end
$var reg 1 #1 Out $end
$upscope $end


$scope module generate_NComps[1].equal_one_bit $end
$var wire 1 #2 Data0 $end
$var wire 1 #3 Data1 $end
$var reg 1 #4 Out $end
$upscope $end


$scope module generate_NComps[2].equal_one_bit $end
$var wire 1 #5 Data0 $end
$var wire 1 #6 Data1 $end
$var reg 1 #7 Out $end
$upscope $end


$scope module generate_NComps[3].equal_one_bit $end
$var wire 1 #8 Data0 $end
$var wire 1 #9 Data1 $end
$var reg 1 #: Out $end
$upscope $end


$scope module generate_NComps[4].equal_one_bit $end
$var wire 1 #; Data0 $end
$var wire 1 #< Data1 $end
$var reg 1 #= Out $end
$upscope $end

$upscope $end


$scope module generate_hotbit_outputs[11].equal_n_bits $end
$var wire 5 + Data0 [4:0] $end
$var wire 5 #> Data1 [4:0] $end
$var reg 1 #? Out $end
$var reg 5 #@ Comps [4:0] $end

$scope module generate_NComps[0].equal_one_bit $end
$var wire 1 #A Data0 $end
$var wire 1 #B Data1 $end
$var reg 1 #C Out $end
$upscope $end


$scope module generate_NComps[1].equal_one_bit $end
$var wire 1 #D Data0 $end
$var wire 1 #E Data1 $end
$var reg 1 #F Out $end
$upscope $end


$scope module generate_NComps[2].equal_one_bit $end
$var wire 1 #G Data0 $end
$var wire 1 #H Data1 $end
$var reg 1 #I Out $end
$upscope $end


$scope module generate_NComps[3].equal_one_bit $end
$var wire 1 #J Data0 $end
$var wire 1 #K Data1 $end
$var reg 1 #L Out $end
$upscope $end


$scope module generate_NComps[4].equal_one_bit $end
$var wire 1 #M Data0 $end
$var wire 1 #N Data1 $end
$var reg 1 #O Out $end
$upscope $end

$upscope $end


$scope module generate_hotbit_outputs[12].equal_n_bits $end
$var wire 5 + Data0 [4:0] $end
$var wire 5 #P Data1 [4:0] $end
$var reg 1 #Q Out $end
$var reg 5 #R Comps [4:0] $end

$scope module generate_NComps[0].equal_one_bit $end
$var wire 1 #S Data0 $end
$var wire 1 #T Data1 $end
$var reg 1 #U Out $end
$upscope $end


$scope module generate_NComps[1].equal_one_bit $end
$var wire 1 #V Data0 $end
$var wire 1 #W Data1 $end
$var reg 1 #X Out $end
$upscope $end


$scope module generate_NComps[2].equal_one_bit $end
$var wire 1 #Y Data0 $end
$var wire 1 #Z Data1 $end
$var reg 1 #[ Out $end
$upscope $end


$scope module generate_NComps[3].equal_one_bit $end
$var wire 1 #\ Data0 $end
$var wire 1 #] Data1 $end
$var reg 1 #^ Out $end
$upscope $end


$scope module generate_NComps[4].equal_one_bit $end
$var wire 1 #_ Data0 $end
$var wire 1 #` Data1 $end
$var reg 1 #a Out $end
$upscope $end

$upscope $end


$scope module generate_hotbit_outputs[13].equal_n_bits $end
$var wire 5 + Data0 [4:0] $end
$var wire 5 #b Data1 [4:0] $end
$var reg 1 #c Out $end
$var reg 5 #d Comps [4:0] $end

$scope module generate_NComps[0].equal_one_bit $end
$var wire 1 #e Data0 $end
$var wire 1 #f Data1 $end
$var reg 1 #g Out $end
$upscope $end


$scope module generate_NComps[1].equal_one_bit $end
$var wire 1 #h Data0 $end
$var wire 1 #i Data1 $end
$var reg 1 #j Out $end
$upscope $end


$scope module generate_NComps[2].equal_one_bit $end
$var wire 1 #k Data0 $end
$var wire 1 #l Data1 $end
$var reg 1 #m Out $end
$upscope $end


$scope module generate_NComps[3].equal_one_bit $end
$var wire 1 #n Data0 $end
$var wire 1 #o Data1 $end
$var reg 1 #p Out $end
$upscope $end


$scope module generate_NComps[4].equal_one_bit $end
$var wire 1 #q Data0 $end
$var wire 1 #r Data1 $end
$var reg 1 #s Out $end
$upscope $end

$upscope $end


$scope module generate_hotbit_outputs[14].equal_n_bits $end
$var wire 5 + Data0 [4:0] $end
$var wire 5 #t Data1 [4:0] $end
$var reg 1 #u Out $end
$var reg 5 #v Comps [4:0] $end

$scope module generate_NComps[0].equal_one_bit $end
$var wire 1 #w Data0 $end
$var wire 1 #x Data1 $end
$var reg 1 #y Out $end
$upscope $end


$scope module generate_NComps[1].equal_one_bit $end
$var wire 1 #z Data0 $end
$var wire 1 #{ Data1 $end
$var reg 1 #| Out $end
$upscope $end


$scope module generate_NComps[2].equal_one_bit $end
$var wire 1 #} Data0 $end
$var wire 1 #~ Data1 $end
$var reg 1 $! Out $end
$upscope $end


$scope module generate_NComps[3].equal_one_bit $end
$var wire 1 $" Data0 $end
$var wire 1 $# Data1 $end
$var reg 1 $$ Out $end
$upscope $end


$scope module generate_NComps[4].equal_one_bit $end
$var wire 1 $% Data0 $end
$var wire 1 $& Data1 $end
$var reg 1 $' Out $end
$upscope $end

$upscope $end


$scope module generate_hotbit_outputs[15].equal_n_bits $end
$var wire 5 + Data0 [4:0] $end
$var wire 5 $( Data1 [4:0] $end
$var reg 1 $) Out $end
$var reg 5 $* Comps [4:0] $end

$scope module generate_NComps[0].equal_one_bit $end
$var wire 1 $+ Data0 $end
$var wire 1 $, Data1 $end
$var reg 1 $- Out $end
$upscope $end


$scope module generate_NComps[1].equal_one_bit $end
$var wire 1 $. Data0 $end
$var wire 1 $/ Data1 $end
$var reg 1 $0 Out $end
$upscope $end


$scope module generate_NComps[2].equal_one_bit $end
$var wire 1 $1 Data0 $end
$var wire 1 $2 Data1 $end
$var reg 1 $3 Out $end
$upscope $end


$scope module generate_NComps[3].equal_one_bit $end
$var wire 1 $4 Data0 $end
$var wire 1 $5 Data1 $end
$var reg 1 $6 Out $end
$upscope $end


$scope module generate_NComps[4].equal_one_bit $end
$var wire 1 $7 Data0 $end
$var wire 1 $8 Data1 $end
$var reg 1 $9 Out $end
$upscope $end

$upscope $end


$scope module generate_hotbit_outputs[16].equal_n_bits $end
$var wire 5 + Data0 [4:0] $end
$var wire 5 $: Data1 [4:0] $end
$var reg 1 $; Out $end
$var reg 5 $< Comps [4:0] $end

$scope module generate_NComps[0].equal_one_bit $end
$var wire 1 $= Data0 $end
$var wire 1 $> Data1 $end
$var reg 1 $? Out $end
$upscope $end


$scope module generate_NComps[1].equal_one_bit $end
$var wire 1 $@ Data0 $end
$var wire 1 $A Data1 $end
$var reg 1 $B Out $end
$upscope $end


$scope module generate_NComps[2].equal_one_bit $end
$var wire 1 $C Data0 $end
$var wire 1 $D Data1 $end
$var reg 1 $E Out $end
$upscope $end


$scope module generate_NComps[3].equal_one_bit $end
$var wire 1 $F Data0 $end
$var wire 1 $G Data1 $end
$var reg 1 $H Out $end
$upscope $end


$scope module generate_NComps[4].equal_one_bit $end
$var wire 1 $I Data0 $end
$var wire 1 $J Data1 $end
$var reg 1 $K Out $end
$upscope $end

$upscope $end


$scope module generate_hotbit_outputs[17].equal_n_bits $end
$var wire 5 + Data0 [4:0] $end
$var wire 5 $L Data1 [4:0] $end
$var reg 1 $M Out $end
$var reg 5 $N Comps [4:0] $end

$scope module generate_NComps[0].equal_one_bit $end
$var wire 1 $O Data0 $end
$var wire 1 $P Data1 $end
$var reg 1 $Q Out $end
$upscope $end


$scope module generate_NComps[1].equal_one_bit $end
$var wire 1 $R Data0 $end
$var wire 1 $S Data1 $end
$var reg 1 $T Out $end
$upscope $end


$scope module generate_NComps[2].equal_one_bit $end
$var wire 1 $U Data0 $end
$var wire 1 $V Data1 $end
$var reg 1 $W Out $end
$upscope $end


$scope module generate_NComps[3].equal_one_bit $end
$var wire 1 $X Data0 $end
$var wire 1 $Y Data1 $end
$var reg 1 $Z Out $end
$upscope $end


$scope module generate_NComps[4].equal_one_bit $end
$var wire 1 $[ Data0 $end
$var wire 1 $\ Data1 $end
$var reg 1 $] Out $end
$upscope $end

$upscope $end


$scope module generate_hotbit_outputs[18].equal_n_bits $end
$var wire 5 + Data0 [4:0] $end
$var wire 5 $^ Data1 [4:0] $end
$var reg 1 $_ Out $end
$var reg 5 $` Comps [4:0] $end

$scope module generate_NComps[0].equal_one_bit $end
$var wire 1 $a Data0 $end
$var wire 1 $b Data1 $end
$var reg 1 $c Out $end
$upscope $end


$scope module generate_NComps[1].equal_one_bit $end
$var wire 1 $d Data0 $end
$var wire 1 $e Data1 $end
$var reg 1 $f Out $end
$upscope $end


$scope module generate_NComps[2].equal_one_bit $end
$var wire 1 $g Data0 $end
$var wire 1 $h Data1 $end
$var reg 1 $i Out $end
$upscope $end


$scope module generate_NComps[3].equal_one_bit $end
$var wire 1 $j Data0 $end
$var wire 1 $k Data1 $end
$var reg 1 $l Out $end
$upscope $end


$scope module generate_NComps[4].equal_one_bit $end
$var wire 1 $m Data0 $end
$var wire 1 $n Data1 $end
$var reg 1 $o Out $end
$upscope $end

$upscope $end


$scope module generate_hotbit_outputs[19].equal_n_bits $end
$var wire 5 + Data0 [4:0] $end
$var wire 5 $p Data1 [4:0] $end
$var reg 1 $q Out $end
$var reg 5 $r Comps [4:0] $end

$scope module generate_NComps[0].equal_one_bit $end
$var wire 1 $s Data0 $end
$var wire 1 $t Data1 $end
$var reg 1 $u Out $end
$upscope $end


$scope module generate_NComps[1].equal_one_bit $end
$var wire 1 $v Data0 $end
$var wire 1 $w Data1 $end
$var reg 1 $x Out $end
$upscope $end


$scope module generate_NComps[2].equal_one_bit $end
$var wire 1 $y Data0 $end
$var wire 1 $z Data1 $end
$var reg 1 ${ Out $end
$upscope $end


$scope module generate_NComps[3].equal_one_bit $end
$var wire 1 $| Data0 $end
$var wire 1 $} Data1 $end
$var reg 1 $~ Out $end
$upscope $end


$scope module generate_NComps[4].equal_one_bit $end
$var wire 1 %! Data0 $end
$var wire 1 %" Data1 $end
$var reg 1 %# Out $end
$upscope $end

$upscope $end


$scope module generate_hotbit_outputs[20].equal_n_bits $end
$var wire 5 + Data0 [4:0] $end
$var wire 5 %$ Data1 [4:0] $end
$var reg 1 %% Out $end
$var reg 5 %& Comps [4:0] $end

$scope module generate_NComps[0].equal_one_bit $end
$var wire 1 %' Data0 $end
$var wire 1 %( Data1 $end
$var reg 1 %) Out $end
$upscope $end


$scope module generate_NComps[1].equal_one_bit $end
$var wire 1 %* Data0 $end
$var wire 1 %+ Data1 $end
$var reg 1 %, Out $end
$upscope $end


$scope module generate_NComps[2].equal_one_bit $end
$var wire 1 %- Data0 $end
$var wire 1 %. Data1 $end
$var reg 1 %/ Out $end
$upscope $end


$scope module generate_NComps[3].equal_one_bit $end
$var wire 1 %0 Data0 $end
$var wire 1 %1 Data1 $end
$var reg 1 %2 Out $end
$upscope $end


$scope module generate_NComps[4].equal_one_bit $end
$var wire 1 %3 Data0 $end
$var wire 1 %4 Data1 $end
$var reg 1 %5 Out $end
$upscope $end

$upscope $end


$scope module generate_hotbit_outputs[21].equal_n_bits $end
$var wire 5 + Data0 [4:0] $end
$var wire 5 %6 Data1 [4:0] $end
$var reg 1 %7 Out $end
$var reg 5 %8 Comps [4:0] $end

$scope module generate_NComps[0].equal_one_bit $end
$var wire 1 %9 Data0 $end
$var wire 1 %: Data1 $end
$var reg 1 %; Out $end
$upscope $end


$scope module generate_NComps[1].equal_one_bit $end
$var wire 1 %< Data0 $end
$var wire 1 %= Data1 $end
$var reg 1 %> Out $end
$upscope $end


$scope module generate_NComps[2].equal_one_bit $end
$var wire 1 %? Data0 $end
$var wire 1 %@ Data1 $end
$var reg 1 %A Out $end
$upscope $end


$scope module generate_NComps[3].equal_one_bit $end
$var wire 1 %B Data0 $end
$var wire 1 %C Data1 $end
$var reg 1 %D Out $end
$upscope $end


$scope module generate_NComps[4].equal_one_bit $end
$var wire 1 %E Data0 $end
$var wire 1 %F Data1 $end
$var reg 1 %G Out $end
$upscope $end

$upscope $end


$scope module generate_hotbit_outputs[22].equal_n_bits $end
$var wire 5 + Data0 [4:0] $end
$var wire 5 %H Data1 [4:0] $end
$var reg 1 %I Out $end
$var reg 5 %J Comps [4:0] $end

$scope module generate_NComps[0].equal_one_bit $end
$var wire 1 %K Data0 $end
$var wire 1 %L Data1 $end
$var reg 1 %M Out $end
$upscope $end


$scope module generate_NComps[1].equal_one_bit $end
$var wire 1 %N Data0 $end
$var wire 1 %O Data1 $end
$var reg 1 %P Out $end
$upscope $end


$scope module generate_NComps[2].equal_one_bit $end
$var wire 1 %Q Data0 $end
$var wire 1 %R Data1 $end
$var reg 1 %S Out $end
$upscope $end


$scope module generate_NComps[3].equal_one_bit $end
$var wire 1 %T Data0 $end
$var wire 1 %U Data1 $end
$var reg 1 %V Out $end
$upscope $end


$scope module generate_NComps[4].equal_one_bit $end
$var wire 1 %W Data0 $end
$var wire 1 %X Data1 $end
$var reg 1 %Y Out $end
$upscope $end

$upscope $end


$scope module generate_hotbit_outputs[23].equal_n_bits $end
$var wire 5 + Data0 [4:0] $end
$var wire 5 %Z Data1 [4:0] $end
$var reg 1 %[ Out $end
$var reg 5 %\ Comps [4:0] $end

$scope module generate_NComps[0].equal_one_bit $end
$var wire 1 %] Data0 $end
$var wire 1 %^ Data1 $end
$var reg 1 %_ Out $end
$upscope $end


$scope module generate_NComps[1].equal_one_bit $end
$var wire 1 %` Data0 $end
$var wire 1 %a Data1 $end
$var reg 1 %b Out $end
$upscope $end


$scope module generate_NComps[2].equal_one_bit $end
$var wire 1 %c Data0 $end
$var wire 1 %d Data1 $end
$var reg 1 %e Out $end
$upscope $end


$scope module generate_NComps[3].equal_one_bit $end
$var wire 1 %f Data0 $end
$var wire 1 %g Data1 $end
$var reg 1 %h Out $end
$upscope $end


$scope module generate_NComps[4].equal_one_bit $end
$var wire 1 %i Data0 $end
$var wire 1 %j Data1 $end
$var reg 1 %k Out $end
$upscope $end

$upscope $end


$scope module generate_hotbit_outputs[24].equal_n_bits $end
$var wire 5 + Data0 [4:0] $end
$var wire 5 %l Data1 [4:0] $end
$var reg 1 %m Out $end
$var reg 5 %n Comps [4:0] $end

$scope module generate_NComps[0].equal_one_bit $end
$var wire 1 %o Data0 $end
$var wire 1 %p Data1 $end
$var reg 1 %q Out $end
$upscope $end


$scope module generate_NComps[1].equal_one_bit $end
$var wire 1 %r Data0 $end
$var wire 1 %s Data1 $end
$var reg 1 %t Out $end
$upscope $end


$scope module generate_NComps[2].equal_one_bit $end
$var wire 1 %u Data0 $end
$var wire 1 %v Data1 $end
$var reg 1 %w Out $end
$upscope $end


$scope module generate_NComps[3].equal_one_bit $end
$var wire 1 %x Data0 $end
$var wire 1 %y Data1 $end
$var reg 1 %z Out $end
$upscope $end


$scope module generate_NComps[4].equal_one_bit $end
$var wire 1 %{ Data0 $end
$var wire 1 %| Data1 $end
$var reg 1 %} Out $end
$upscope $end

$upscope $end


$scope module generate_hotbit_outputs[25].equal_n_bits $end
$var wire 5 + Data0 [4:0] $end
$var wire 5 %~ Data1 [4:0] $end
$var reg 1 &! Out $end
$var reg 5 &" Comps [4:0] $end

$scope module generate_NComps[0].equal_one_bit $end
$var wire 1 &# Data0 $end
$var wire 1 &$ Data1 $end
$var reg 1 &% Out $end
$upscope $end


$scope module generate_NComps[1].equal_one_bit $end
$var wire 1 && Data0 $end
$var wire 1 &' Data1 $end
$var reg 1 &( Out $end
$upscope $end


$scope module generate_NComps[2].equal_one_bit $end
$var wire 1 &) Data0 $end
$var wire 1 &* Data1 $end
$var reg 1 &+ Out $end
$upscope $end


$scope module generate_NComps[3].equal_one_bit $end
$var wire 1 &, Data0 $end
$var wire 1 &- Data1 $end
$var reg 1 &. Out $end
$upscope $end


$scope module generate_NComps[4].equal_one_bit $end
$var wire 1 &/ Data0 $end
$var wire 1 &0 Data1 $end
$var reg 1 &1 Out $end
$upscope $end

$upscope $end


$scope module generate_hotbit_outputs[26].equal_n_bits $end
$var wire 5 + Data0 [4:0] $end
$var wire 5 &2 Data1 [4:0] $end
$var reg 1 &3 Out $end
$var reg 5 &4 Comps [4:0] $end

$scope module generate_NComps[0].equal_one_bit $end
$var wire 1 &5 Data0 $end
$var wire 1 &6 Data1 $end
$var reg 1 &7 Out $end
$upscope $end


$scope module generate_NComps[1].equal_one_bit $end
$var wire 1 &8 Data0 $end
$var wire 1 &9 Data1 $end
$var reg 1 &: Out $end
$upscope $end


$scope module generate_NComps[2].equal_one_bit $end
$var wire 1 &; Data0 $end
$var wire 1 &< Data1 $end
$var reg 1 &= Out $end
$upscope $end


$scope module generate_NComps[3].equal_one_bit $end
$var wire 1 &> Data0 $end
$var wire 1 &? Data1 $end
$var reg 1 &@ Out $end
$upscope $end


$scope module generate_NComps[4].equal_one_bit $end
$var wire 1 &A Data0 $end
$var wire 1 &B Data1 $end
$var reg 1 &C Out $end
$upscope $end

$upscope $end


$scope module generate_hotbit_outputs[27].equal_n_bits $end
$var wire 5 + Data0 [4:0] $end
$var wire 5 &D Data1 [4:0] $end
$var reg 1 &E Out $end
$var reg 5 &F Comps [4:0] $end

$scope module generate_NComps[0].equal_one_bit $end
$var wire 1 &G Data0 $end
$var wire 1 &H Data1 $end
$var reg 1 &I Out $end
$upscope $end


$scope module generate_NComps[1].equal_one_bit $end
$var wire 1 &J Data0 $end
$var wire 1 &K Data1 $end
$var reg 1 &L Out $end
$upscope $end


$scope module generate_NComps[2].equal_one_bit $end
$var wire 1 &M Data0 $end
$var wire 1 &N Data1 $end
$var reg 1 &O Out $end
$upscope $end


$scope module generate_NComps[3].equal_one_bit $end
$var wire 1 &P Data0 $end
$var wire 1 &Q Data1 $end
$var reg 1 &R Out $end
$upscope $end


$scope module generate_NComps[4].equal_one_bit $end
$var wire 1 &S Data0 $end
$var wire 1 &T Data1 $end
$var reg 1 &U Out $end
$upscope $end

$upscope $end


$scope module generate_hotbit_outputs[28].equal_n_bits $end
$var wire 5 + Data0 [4:0] $end
$var wire 5 &V Data1 [4:0] $end
$var reg 1 &W Out $end
$var reg 5 &X Comps [4:0] $end

$scope module generate_NComps[0].equal_one_bit $end
$var wire 1 &Y Data0 $end
$var wire 1 &Z Data1 $end
$var reg 1 &[ Out $end
$upscope $end


$scope module generate_NComps[1].equal_one_bit $end
$var wire 1 &\ Data0 $end
$var wire 1 &] Data1 $end
$var reg 1 &^ Out $end
$upscope $end


$scope module generate_NComps[2].equal_one_bit $end
$var wire 1 &_ Data0 $end
$var wire 1 &` Data1 $end
$var reg 1 &a Out $end
$upscope $end


$scope module generate_NComps[3].equal_one_bit $end
$var wire 1 &b Data0 $end
$var wire 1 &c Data1 $end
$var reg 1 &d Out $end
$upscope $end


$scope module generate_NComps[4].equal_one_bit $end
$var wire 1 &e Data0 $end
$var wire 1 &f Data1 $end
$var reg 1 &g Out $end
$upscope $end

$upscope $end


$scope module generate_hotbit_outputs[29].equal_n_bits $end
$var wire 5 + Data0 [4:0] $end
$var wire 5 &h Data1 [4:0] $end
$var reg 1 &i Out $end
$var reg 5 &j Comps [4:0] $end

$scope module generate_NComps[0].equal_one_bit $end
$var wire 1 &k Data0 $end
$var wire 1 &l Data1 $end
$var reg 1 &m Out $end
$upscope $end


$scope module generate_NComps[1].equal_one_bit $end
$var wire 1 &n Data0 $end
$var wire 1 &o Data1 $end
$var reg 1 &p Out $end
$upscope $end


$scope module generate_NComps[2].equal_one_bit $end
$var wire 1 &q Data0 $end
$var wire 1 &r Data1 $end
$var reg 1 &s Out $end
$upscope $end


$scope module generate_NComps[3].equal_one_bit $end
$var wire 1 &t Data0 $end
$var wire 1 &u Data1 $end
$var reg 1 &v Out $end
$upscope $end


$scope module generate_NComps[4].equal_one_bit $end
$var wire 1 &w Data0 $end
$var wire 1 &x Data1 $end
$var reg 1 &y Out $end
$upscope $end

$upscope $end


$scope module generate_hotbit_outputs[30].equal_n_bits $end
$var wire 5 + Data0 [4:0] $end
$var wire 5 &z Data1 [4:0] $end
$var reg 1 &{ Out $end
$var reg 5 &| Comps [4:0] $end

$scope module generate_NComps[0].equal_one_bit $end
$var wire 1 &} Data0 $end
$var wire 1 &~ Data1 $end
$var reg 1 '! Out $end
$upscope $end


$scope module generate_NComps[1].equal_one_bit $end
$var wire 1 '" Data0 $end
$var wire 1 '# Data1 $end
$var reg 1 '$ Out $end
$upscope $end


$scope module generate_NComps[2].equal_one_bit $end
$var wire 1 '% Data0 $end
$var wire 1 '& Data1 $end
$var reg 1 '' Out $end
$upscope $end


$scope module generate_NComps[3].equal_one_bit $end
$var wire 1 '( Data0 $end
$var wire 1 ') Data1 $end
$var reg 1 '* Out $end
$upscope $end


$scope module generate_NComps[4].equal_one_bit $end
$var wire 1 '+ Data0 $end
$var wire 1 ', Data1 $end
$var reg 1 '- Out $end
$upscope $end

$upscope $end


$scope module generate_hotbit_outputs[31].equal_n_bits $end
$var wire 5 + Data0 [4:0] $end
$var wire 5 '. Data1 [4:0] $end
$var reg 1 '/ Out $end
$var reg 5 '0 Comps [4:0] $end

$scope module generate_NComps[0].equal_one_bit $end
$var wire 1 '1 Data0 $end
$var wire 1 '2 Data1 $end
$var reg 1 '3 Out $end
$upscope $end


$scope module generate_NComps[1].equal_one_bit $end
$var wire 1 '4 Data0 $end
$var wire 1 '5 Data1 $end
$var reg 1 '6 Out $end
$upscope $end


$scope module generate_NComps[2].equal_one_bit $end
$var wire 1 '7 Data0 $end
$var wire 1 '8 Data1 $end
$var reg 1 '9 Out $end
$upscope $end


$scope module generate_NComps[3].equal_one_bit $end
$var wire 1 ': Data0 $end
$var wire 1 '; Data1 $end
$var reg 1 '< Out $end
$upscope $end


$scope module generate_NComps[4].equal_one_bit $end
$var wire 1 '= Data0 $end
$var wire 1 '> Data1 $end
$var reg 1 '? Out $end
$upscope $end

$upscope $end

$upscope $end


$scope module mux1 $end
$var wire 5 ) selector [0:4] $end
$var reg 64 '@ Out [0:63] $end
$upscope $end


$scope module mux2 $end
$var wire 5 * selector [0:4] $end
$var reg 64 'A Out [0:63] $end
$upscope $end


$scope module generate_registers[1].register $end
$var wire 64 , writeData [0:63] $end
$var wire 1 'B writeEn $end
$var wire 1 . clk $end
$var reg 64 'C read [0:63] $end
$var reg 64 'D register [0:63] $end
$upscope $end


$scope module generate_registers[2].register $end
$var wire 64 , writeData [0:63] $end
$var wire 1 'E writeEn $end
$var wire 1 . clk $end
$var reg 64 'F read [0:63] $end
$var reg 64 'G register [0:63] $end
$upscope $end


$scope module generate_registers[3].register $end
$var wire 64 , writeData [0:63] $end
$var wire 1 'H writeEn $end
$var wire 1 . clk $end
$var reg 64 'I read [0:63] $end
$var reg 64 'J register [0:63] $end
$upscope $end


$scope module generate_registers[4].register $end
$var wire 64 , writeData [0:63] $end
$var wire 1 'K writeEn $end
$var wire 1 . clk $end
$var reg 64 'L read [0:63] $end
$var reg 64 'M register [0:63] $end
$upscope $end


$scope module generate_registers[5].register $end
$var wire 64 , writeData [0:63] $end
$var wire 1 'N writeEn $end
$var wire 1 . clk $end
$var reg 64 'O read [0:63] $end
$var reg 64 'P register [0:63] $end
$upscope $end


$scope module generate_registers[6].register $end
$var wire 64 , writeData [0:63] $end
$var wire 1 'Q writeEn $end
$var wire 1 . clk $end
$var reg 64 'R read [0:63] $end
$var reg 64 'S register [0:63] $end
$upscope $end


$scope module generate_registers[7].register $end
$var wire 64 , writeData [0:63] $end
$var wire 1 'T writeEn $end
$var wire 1 . clk $end
$var reg 64 'U read [0:63] $end
$var reg 64 'V register [0:63] $end
$upscope $end


$scope module generate_registers[8].register $end
$var wire 64 , writeData [0:63] $end
$var wire 1 'W writeEn $end
$var wire 1 . clk $end
$var reg 64 'X read [0:63] $end
$var reg 64 'Y register [0:63] $end
$upscope $end


$scope module generate_registers[9].register $end
$var wire 64 , writeData [0:63] $end
$var wire 1 'Z writeEn $end
$var wire 1 . clk $end
$var reg 64 '[ read [0:63] $end
$var reg 64 '\ register [0:63] $end
$upscope $end


$scope module generate_registers[10].register $end
$var wire 64 , writeData [0:63] $end
$var wire 1 '] writeEn $end
$var wire 1 . clk $end
$var reg 64 '^ read [0:63] $end
$var reg 64 '_ register [0:63] $end
$upscope $end


$scope module generate_registers[11].register $end
$var wire 64 , writeData [0:63] $end
$var wire 1 '` writeEn $end
$var wire 1 . clk $end
$var reg 64 'a read [0:63] $end
$var reg 64 'b register [0:63] $end
$upscope $end


$scope module generate_registers[12].register $end
$var wire 64 , writeData [0:63] $end
$var wire 1 'c writeEn $end
$var wire 1 . clk $end
$var reg 64 'd read [0:63] $end
$var reg 64 'e register [0:63] $end
$upscope $end


$scope module generate_registers[13].register $end
$var wire 64 , writeData [0:63] $end
$var wire 1 'f writeEn $end
$var wire 1 . clk $end
$var reg 64 'g read [0:63] $end
$var reg 64 'h register [0:63] $end
$upscope $end


$scope module generate_registers[14].register $end
$var wire 64 , writeData [0:63] $end
$var wire 1 'i writeEn $end
$var wire 1 . clk $end
$var reg 64 'j read [0:63] $end
$var reg 64 'k register [0:63] $end
$upscope $end


$scope module generate_registers[15].register $end
$var wire 64 , writeData [0:63] $end
$var wire 1 'l writeEn $end
$var wire 1 . clk $end
$var reg 64 'm read [0:63] $end
$var reg 64 'n register [0:63] $end
$upscope $end


$scope module generate_registers[16].register $end
$var wire 64 , writeData [0:63] $end
$var wire 1 'o writeEn $end
$var wire 1 . clk $end
$var reg 64 'p read [0:63] $end
$var reg 64 'q register [0:63] $end
$upscope $end


$scope module generate_registers[17].register $end
$var wire 64 , writeData [0:63] $end
$var wire 1 'r writeEn $end
$var wire 1 . clk $end
$var reg 64 's read [0:63] $end
$var reg 64 't register [0:63] $end
$upscope $end


$scope module generate_registers[18].register $end
$var wire 64 , writeData [0:63] $end
$var wire 1 'u writeEn $end
$var wire 1 . clk $end
$var reg 64 'v read [0:63] $end
$var reg 64 'w register [0:63] $end
$upscope $end


$scope module generate_registers[19].register $end
$var wire 64 , writeData [0:63] $end
$var wire 1 'x writeEn $end
$var wire 1 . clk $end
$var reg 64 'y read [0:63] $end
$var reg 64 'z register [0:63] $end
$upscope $end


$scope module generate_registers[20].register $end
$var wire 64 , writeData [0:63] $end
$var wire 1 '{ writeEn $end
$var wire 1 . clk $end
$var reg 64 '| read [0:63] $end
$var reg 64 '} register [0:63] $end
$upscope $end


$scope module generate_registers[21].register $end
$var wire 64 , writeData [0:63] $end
$var wire 1 '~ writeEn $end
$var wire 1 . clk $end
$var reg 64 (! read [0:63] $end
$var reg 64 (" register [0:63] $end
$upscope $end


$scope module generate_registers[22].register $end
$var wire 64 , writeData [0:63] $end
$var wire 1 (# writeEn $end
$var wire 1 . clk $end
$var reg 64 ($ read [0:63] $end
$var reg 64 (% register [0:63] $end
$upscope $end


$scope module generate_registers[23].register $end
$var wire 64 , writeData [0:63] $end
$var wire 1 (& writeEn $end
$var wire 1 . clk $end
$var reg 64 (' read [0:63] $end
$var reg 64 (( register [0:63] $end
$upscope $end


$scope module generate_registers[24].register $end
$var wire 64 , writeData [0:63] $end
$var wire 1 () writeEn $end
$var wire 1 . clk $end
$var reg 64 (* read [0:63] $end
$var reg 64 (+ register [0:63] $end
$upscope $end


$scope module generate_registers[25].register $end
$var wire 64 , writeData [0:63] $end
$var wire 1 (, writeEn $end
$var wire 1 . clk $end
$var reg 64 (- read [0:63] $end
$var reg 64 (. register [0:63] $end
$upscope $end


$scope module generate_registers[26].register $end
$var wire 64 , writeData [0:63] $end
$var wire 1 (/ writeEn $end
$var wire 1 . clk $end
$var reg 64 (0 read [0:63] $end
$var reg 64 (1 register [0:63] $end
$upscope $end


$scope module generate_registers[27].register $end
$var wire 64 , writeData [0:63] $end
$var wire 1 (2 writeEn $end
$var wire 1 . clk $end
$var reg 64 (3 read [0:63] $end
$var reg 64 (4 register [0:63] $end
$upscope $end


$scope module generate_registers[28].register $end
$var wire 64 , writeData [0:63] $end
$var wire 1 (5 writeEn $end
$var wire 1 . clk $end
$var reg 64 (6 read [0:63] $end
$var reg 64 (7 register [0:63] $end
$upscope $end


$scope module generate_registers[29].register $end
$var wire 64 , writeData [0:63] $end
$var wire 1 (8 writeEn $end
$var wire 1 . clk $end
$var reg 64 (9 read [0:63] $end
$var reg 64 (: register [0:63] $end
$upscope $end


$scope module generate_registers[30].register $end
$var wire 64 , writeData [0:63] $end
$var wire 1 (; writeEn $end
$var wire 1 . clk $end
$var reg 64 (< read [0:63] $end
$var reg 64 (= register [0:63] $end
$upscope $end


$scope module generate_registers[31].register $end
$var wire 64 , writeData [0:63] $end
$var wire 1 (> writeEn $end
$var wire 1 . clk $end
$var reg 64 (? read [0:63] $end
$var reg 64 (@ register [0:63] $end
$upscope $end

$upscope $end

$upscope $end

$enddefinitions $end

#0
$dumpvars
1!
1.
0-
x'B
x'r
x'E
x'u
x'H
x'x
x'K
x'{
x'N
x'~
x'Q
x(#
x'T
x(&
x'W
x()
x'Z
x(,
x']
x(/
x'`
x(2
x'c
x(5
x'f
x(8
x'i
x(;
x'l
x(>
x'o
0&
b0000000000000000000000000000000000000000000000000000000000000000 '@
b000000 "
b000000 #
b000000 $
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx '^
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx '_
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 'a
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 'b
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 'd
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 'e
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 'g
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 'h
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 'j
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 'k
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 'm
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 'n
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 'p
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 'q
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 's
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 't
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 'v
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 'w
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 'y
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 'z
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx '|
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx '}
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx (!
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ("
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ($
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx (%
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ('
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ((
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx (*
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx (+
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx (-
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx (.
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx (0
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx (1
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx (3
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx (4
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx (6
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx (7
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx (9
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx (:
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 'F
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 'G
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx (<
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx (=
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx (?
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx (@
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 'I
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 'J
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 'L
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 'M
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 'O
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 'P
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 'R
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 'S
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 'U
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 'V
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 'X
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 'Y
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx '[
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx '\
b00000000000000000000000000000001 3
b00000000000000000000000000000001 1
b0000000000000000000000000000000000000000000000000000000000000000 'A
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 'C
b0000000000000000000000000000000000000000000000000000000000000000 '
b0000000000000000000000000000000000000000000000000000000000000000 (
b0000000000000000000000000000000z 2
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 'D
b00000 )
b00000 *
b0000000000000000000000000000000000000000000000000000000000000000 /
b0000000000000000000000000000000000000000000000000000000000000000 0
b0000000000000000000000000000000000000000000000000000000000000000 ,
b0000000000000000000000000000000000000000000000000000000000000000 %
x:
x=
x@
xC
x8
x;
x>
xA
xD
xE
xB
x?
x<
x9
x7
b11111 6
xL
xO
xR
xU
xJ
xM
xP
xS
xV
xW
xT
xQ
xN
xK
xI
b11110 H
x^
xa
xd
xg
x\
x_
xb
xe
xh
xi
xf
xc
x`
x]
x[
b11101 Z
xp
xs
xv
xy
xn
xq
xt
xw
xz
x{
xx
xu
xr
xo
xm
b11100 l
x"$
x"'
x"*
x"-
x""
x"%
x"(
x"+
x".
x"/
x",
x")
x"&
x"#
x"!
b11011 ~
x"6
x"9
x"<
x"?
x"4
x"7
x":
x"=
x"@
x"A
x">
x";
x"8
x"5
x"3
b11010 "2
x"H
x"K
x"N
x"Q
x"F
x"I
x"L
x"O
x"R
x"S
x"P
x"M
x"J
x"G
x"E
b11001 "D
x"Z
x"]
x"`
x"c
x"X
x"[
x"^
x"a
x"d
x"e
x"b
x"_
x"\
x"Y
x"W
b11000 "V
x"l
x"o
x"r
x"u
x"j
x"m
x"p
x"s
x"v
x"w
x"t
x"q
x"n
x"k
x"i
b10111 "h
x"~
x##
x#&
x#)
x"|
x#!
x#$
x#'
x#*
x#+
x#(
x#%
x#"
x"}
x"{
b10110 "z
x#2
x#5
x#8
x#;
x#0
x#3
x#6
x#9
x#<
x#=
x#:
x#7
x#4
x#1
x#/
b10101 #.
x#D
x#G
x#J
x#M
x#B
x#E
x#H
x#K
x#N
x#O
x#L
x#I
x#F
x#C
x#A
b10100 #@
x#V
x#Y
x#\
x#_
x#T
x#W
x#Z
x#]
x#`
x#a
x#^
x#[
x#X
x#U
x#S
b10011 #R
x#h
x#k
x#n
x#q
x#f
x#i
x#l
x#o
x#r
x#s
x#p
x#m
x#j
x#g
x#e
b10010 #d
x#z
x#}
x$"
x$%
x#x
x#{
x#~
x$#
x$&
x$'
x$$
x$!
x#|
x#y
x#w
b10001 #v
x$.
x$1
x$4
x$7
x$,
x$/
x$2
x$5
x$8
x$9
x$6
x$3
x$0
x$-
x$+
b10000 $*
x$@
x$C
x$F
x$I
x$>
x$A
x$D
x$G
x$J
x$K
x$H
x$E
x$B
x$?
x$=
b01111 $<
x$R
x$U
x$X
x$[
x$P
x$S
x$V
x$Y
x$\
x$]
x$Z
x$W
x$T
x$Q
x$O
b01110 $N
x$d
x$g
x$j
x$m
x$b
x$e
x$h
x$k
x$n
x$o
x$l
x$i
x$f
x$c
x$a
b01101 $`
x$v
x$y
x$|
x%!
x$t
x$w
x$z
x$}
x%"
x%#
x$~
x${
x$x
x$u
x$s
b01100 $r
x%*
x%-
x%0
x%3
x%(
x%+
x%.
x%1
x%4
x%5
x%2
x%/
x%,
x%)
x%'
b01011 %&
x%<
x%?
x%B
x%E
x%:
x%=
x%@
x%C
x%F
x%G
x%D
x%A
x%>
x%;
x%9
b01010 %8
x%N
x%Q
x%T
x%W
x%L
x%O
x%R
x%U
x%X
x%Y
x%V
x%S
x%P
x%M
x%K
b01001 %J
x%`
x%c
x%f
x%i
x%^
x%a
x%d
x%g
x%j
x%k
x%h
x%e
x%b
x%_
x%]
b01000 %\
x%r
x%u
x%x
x%{
x%p
x%s
x%v
x%y
x%|
x%}
x%z
x%w
x%t
x%q
x%o
b00111 %n
x&&
x&)
x&,
x&/
x&$
x&'
x&*
x&-
x&0
x&1
x&.
x&+
x&(
x&%
x&#
b00110 &"
x&8
x&;
x&>
x&A
x&6
x&9
x&<
x&?
x&B
x&C
x&@
x&=
x&:
x&7
x&5
b00101 &4
x&J
x&M
x&P
x&S
x&H
x&K
x&N
x&Q
x&T
x&U
x&R
x&O
x&L
x&I
x&G
b00100 &F
x&\
x&_
x&b
x&e
x&Z
x&]
x&`
x&c
x&f
x&g
x&d
x&a
x&^
x&[
x&Y
b00011 &X
x&n
x&q
x&t
x&w
x&l
x&o
x&r
x&u
x&x
x&y
x&v
x&s
x&p
x&m
x&k
b00010 &j
x'"
x'%
x'(
x'+
x&~
x'#
x'&
x')
x',
x'-
x'*
x''
x'$
x'!
x&}
b00001 &|
x'4
x'7
x':
x'=
x'2
x'5
x'8
x';
x'>
x'?
x'<
x'9
x'6
x'3
x'1
b00000 '0
15
0G
0Y
0k
0}
0"1
0"C
0"U
0"g
0"y
0#-
0#?
0#Q
0#c
0#u
0$)
0$;
0$M
0$_
0$q
0%%
0%7
0%I
0%[
0%m
0&!
0&3
0&E
0&W
0&i
0&{
0'/
b00000 +
b00000 4
b00001 F
b00010 X
b00011 j
b00100 |
b00101 "0
b00110 "B
b00111 "T
b01000 "f
b01001 "x
b01010 #,
b01011 #>
b01100 #P
b01101 #b
b01110 #t
b01111 $(
b10000 $:
b10001 $L
b10010 $^
b10011 $p
b10100 %$
b10101 %6
b10110 %H
b10111 %Z
b11000 %l
b11001 %~
b11010 &2
b11011 &D
b11100 &V
b11101 &h
b11110 &z
b11111 '.
$end
0'B
0'E
0'H
0'K
0'N
0'Q
0'T
0'W
0'Z
0']
0'`
0'c
0'f
0'i
0'l
0'o
0'r
0'u
0'x
0'{
0'~
0(#
0(&
0()
0(,
0(/
0(2
0(5
0(8
0(;
0(>
07
0:
0=
0@
0C
08
0;
0>
0A
0D
1E
1B
1?
1<
19
0I
0L
0O
0R
0U
1J
0M
0P
0S
0V
1W
1T
1Q
1N
0K
0[
0^
0a
0d
0g
0\
1_
0b
0e
0h
1i
1f
1c
0`
1]
0m
0p
0s
0v
0y
1n
1q
0t
0w
0z
1{
1x
1u
0r
0o
0"!
0"$
0"'
0"*
0"-
0""
0"%
1"(
0"+
0".
1"/
1",
0")
1"&
1"#
0"3
0"6
0"9
0"<
0"?
1"4
0"7
1":
0"=
0"@
1"A
1">
0";
1"8
0"5
0"E
0"H
0"K
0"N
0"Q
0"F
1"I
1"L
0"O
0"R
1"S
1"P
0"M
0"J
1"G
0"W
0"Z
0"]
0"`
0"c
1"X
1"[
1"^
0"a
0"d
1"e
1"b
0"_
0"\
0"Y
0"i
0"l
0"o
0"r
0"u
0"j
0"m
0"p
1"s
0"v
1"w
0"t
1"q
1"n
1"k
0"{
0"~
0##
0#&
0#)
1"|
0#!
0#$
1#'
0#*
1#+
0#(
1#%
1#"
0"}
0#/
0#2
0#5
0#8
0#;
0#0
1#3
0#6
1#9
0#<
1#=
0#:
1#7
0#4
1#1
0#A
0#D
0#G
0#J
0#M
1#B
1#E
0#H
1#K
0#N
1#O
0#L
1#I
0#F
0#C
0#S
0#V
0#Y
0#\
0#_
0#T
0#W
1#Z
1#]
0#`
1#a
0#^
0#[
1#X
1#U
0#e
0#h
0#k
0#n
0#q
1#f
0#i
1#l
1#o
0#r
1#s
0#p
0#m
1#j
0#g
0#w
0#z
0#}
0$"
0$%
0#x
1#{
1#~
1$#
0$&
1$'
0$$
0$!
0#|
1#y
0$+
0$.
0$1
0$4
0$7
1$,
1$/
1$2
1$5
0$8
1$9
0$6
0$3
0$0
0$-
0$=
0$@
0$C
0$F
0$I
0$>
0$A
0$D
0$G
1$J
0$K
1$H
1$E
1$B
1$?
0$O
0$R
0$U
0$X
0$[
1$P
0$S
0$V
0$Y
1$\
0$]
1$Z
1$W
1$T
0$Q
0$a
0$d
0$g
0$j
0$m
0$b
1$e
0$h
0$k
1$n
0$o
1$l
1$i
0$f
1$c
0$s
0$v
0$y
0$|
0%!
1$t
1$w
0$z
0$}
1%"
0%#
1$~
1${
0$x
0$u
0%'
0%*
0%-
0%0
0%3
0%(
0%+
1%.
0%1
1%4
0%5
1%2
0%/
1%,
1%)
0%9
0%<
0%?
0%B
0%E
1%:
0%=
1%@
0%C
1%F
0%G
1%D
0%A
1%>
0%;
0%K
0%N
0%Q
0%T
0%W
0%L
1%O
1%R
0%U
1%X
0%Y
1%V
0%S
0%P
1%M
0%]
0%`
0%c
0%f
0%i
1%^
1%a
1%d
0%g
1%j
0%k
1%h
0%e
0%b
0%_
0%o
0%r
0%u
0%x
0%{
0%p
0%s
0%v
1%y
1%|
0%}
0%z
1%w
1%t
1%q
0&#
0&&
0&)
0&,
0&/
1&$
0&'
0&*
1&-
1&0
0&1
0&.
1&+
1&(
0&%
0&5
0&8
0&;
0&>
0&A
0&6
1&9
0&<
1&?
1&B
0&C
0&@
1&=
0&:
1&7
0&G
0&J
0&M
0&P
0&S
1&H
1&K
0&N
1&Q
1&T
0&U
0&R
1&O
0&L
0&I
0&Y
0&\
0&_
0&b
0&e
0&Z
0&]
1&`
1&c
1&f
0&g
0&d
0&a
1&^
1&[
0&k
0&n
0&q
0&t
0&w
1&l
0&o
1&r
1&u
1&x
0&y
0&v
0&s
1&p
0&m
0&}
0'"
0'%
0'(
0'+
0&~
1'#
1'&
1')
1',
0'-
0'*
0''
0'$
1'!
0'1
0'4
0'7
0':
0'=
1'2
1'5
1'8
1';
1'>
0'?
0'<
0'9
0'6
0'3
#5
0!
0.
#10
b000001 $
b00001 +
17
09
b11110 6
05
1I
1K
b11111 H
1G
1[
0]
b11100 Z
1m
1o
b11101 l
1"!
0"#
b11010 ~
1"3
1"5
b11011 "2
1"E
0"G
b11000 "D
1"W
1"Y
b11001 "V
1"i
0"k
b10110 "h
1"{
1"}
b10111 "z
1#/
0#1
b10100 #.
1#A
1#C
b10101 #@
1#S
0#U
b10010 #R
1#e
1#g
b10011 #d
1#w
0#y
b10000 #v
1$+
1$-
b10001 $*
1$=
0$?
b01110 $<
1$O
1$Q
b01111 $N
1$a
0$c
b01100 $`
1$s
1$u
b01101 $r
1%'
0%)
b01010 %&
1%9
1%;
b01011 %8
1%K
0%M
b01000 %J
1%]
1%_
b01001 %\
1%o
0%q
b00110 %n
1&#
1&%
b00111 &"
1&5
0&7
b00100 &4
1&G
1&I
b00101 &F
1&Y
0&[
b00010 &X
1&k
1&m
b00011 &j
1&}
0'!
b00000 &|
1'1
1'3
b00001 '0
b0001001000110100010101100111100010010000101010111100110111101111 %
b0001001000110100010101100111100010010000101010111100110111101111 ,
1&
1-
1!
1.
b00000000000000000000000000000010 1
b0000000000000000000000000000001z 2
1'B
b00000000000000000000000000000010 3
#15
0!
0.
b0001001000110100010101100111100010010000101010111100110111101111 'D
#20
b000010 $
b00010 +
07
1:
0<
19
b11101 6
0I
1L
0N
0K
b11100 H
0G
0[
1^
1`
1]
b11111 Z
1Y
0m
1p
1r
0o
b11110 l
0"!
1"$
0"&
1"#
b11001 ~
0"3
1"6
0"8
0"5
b11000 "2
0"E
1"H
1"J
1"G
b11011 "D
0"W
1"Z
1"\
0"Y
b11010 "V
0"i
1"l
0"n
1"k
b10101 "h
0"{
1"~
0#"
0"}
b10100 "z
0#/
1#2
1#4
1#1
b10111 #.
0#A
1#D
1#F
0#C
b10110 #@
0#S
1#V
0#X
1#U
b10001 #R
0#e
1#h
0#j
0#g
b10000 #d
0#w
1#z
1#|
1#y
b10011 #v
0$+
1$.
1$0
0$-
b10010 $*
0$=
1$@
0$B
1$?
b01101 $<
0$O
1$R
0$T
0$Q
b01100 $N
0$a
1$d
1$f
1$c
b01111 $`
0$s
1$v
1$x
0$u
b01110 $r
0%'
1%*
0%,
1%)
b01001 %&
0%9
1%<
0%>
0%;
b01000 %8
0%K
1%N
1%P
1%M
b01011 %J
0%]
1%`
1%b
0%_
b01010 %\
0%o
1%r
0%t
1%q
b00101 %n
0&#
1&&
0&(
0&%
b00100 &"
0&5
1&8
1&:
1&7
b00111 &4
0&G
1&J
1&L
0&I
b00110 &F
0&Y
1&\
0&^
1&[
b00001 &X
0&k
1&n
0&p
0&m
b00000 &j
0&}
1'"
1'$
1'!
b00011 &|
0'1
1'4
1'6
0'3
b00010 '0
b1111111011011100101110100000100110000111011001010100001100100001 %
b1111111011011100101110100000100110000111011001010100001100100001 ,
1!
1.
b00000000000000000000000000000100 1
b0000000000000000000000000000010z 2
0'B
1'E
b00000000000000000000000000000100 3
b0001001000110100010101100111100010010000101010111100110111101111 'C
#25
0!
0.
b1111111011011100101110100000100110000111011001010100001100100001 'G
#30
0&
0-
b0000000000000000000000000000000z 2
0'E
b000001 "
b00001 )
b0001001000110100010101100111100010010000101010111100110111101111 '@
b0001001000110100010101100111100010010000101010111100110111101111 /
b0001001000110100010101100111100010010000101010111100110111101111 '
b000010 #
b00010 *
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 'A
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 0
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx (
1!
1.
b1111111011011100101110100000100110000111011001010100001100100001 'F
b1111111011011100101110100000100110000111011001010100001100100001 'A
b1111111011011100101110100000100110000111011001010100001100100001 0
b1111111011011100101110100000100110000111011001010100001100100001 (
#35
0!
0.
#40
b000000 $
b00000 +
0:
1<
b11111 6
15
0L
1N
b11110 H
0^
0`
b11101 Z
0Y
0p
0r
b11100 l
0"$
1"&
b11011 ~
0"6
1"8
b11010 "2
0"H
0"J
b11001 "D
0"Z
0"\
b11000 "V
0"l
1"n
b10111 "h
0"~
1#"
b10110 "z
0#2
0#4
b10101 #.
0#D
0#F
b10100 #@
0#V
1#X
b10011 #R
0#h
1#j
b10010 #d
0#z
0#|
b10001 #v
0$.
0$0
b10000 $*
0$@
1$B
b01111 $<
0$R
1$T
b01110 $N
0$d
0$f
b01101 $`
0$v
0$x
b01100 $r
0%*
1%,
b01011 %&
0%<
1%>
b01010 %8
0%N
0%P
b01001 %J
0%`
0%b
b01000 %\
0%r
1%t
b00111 %n
0&&
1&(
b00110 &"
0&8
0&:
b00101 &4
0&J
0&L
b00100 &F
0&\
1&^
b00011 &X
0&n
1&p
b00010 &j
0'"
0'$
b00001 &|
0'4
0'6
b00000 '0
1!
1.
b00000000000000000000000000000001 1
b00000000000000000000000000000001 3
#45
0!
0.

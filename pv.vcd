$date
	Thu Apr 11 14:11:02 2024
$end

$version
	Synopsys VCS version R-2020.12-SP2_Full64
$end

$timescale
	1s
$end

$comment Csum: 1 74a2d221748c34b5 $end


$scope module tb_Controller $end
$var reg 32 ! Instruction [0:31] $end
$var reg 64 " Imm [0:63] $end
$var reg 2 # ALUControl [0:1] $end
$var reg 1 $ RegWrite $end
$var reg 1 % MemWrite $end
$var reg 1 & Branch $end
$var reg 1 ' MemToReg $end
$var reg 1 ( ALUScr $end

$scope module controller $end
$var wire 32 ) Instruction [31:0] $end
$var reg 64 * Imm [0:63] $end
$var reg 2 + ALUControl [0:1] $end
$var reg 1 , RegWrite $end
$var reg 1 - MemWrite $end
$var reg 1 . Branch $end
$var reg 1 / MemToReg $end
$var reg 1 0 ALUScr $end

$scope module decoder $end
$var wire 5 1 OpCode [0:4] $end
$var wire 3 2 funct1 [0:2] $end
$var wire 1 3 funct2 $end
$var reg 2 4 ALUControl [0:1] $end
$var reg 1 5 RegWrite $end
$var reg 1 6 MemWrite $end
$var reg 1 7 Branch $end
$var reg 1 8 MemToReg $end
$var reg 1 9 ALUScr $end
$upscope $end


$scope module immGen $end
$var wire 5 : OpCode [0:4] $end
$var wire 12 ; InstructionP1 [0:11] $end
$var wire 5 < InstructionP2 [0:4] $end
$var reg 64 = Imm [0:63] $end
$upscope $end

$upscope $end

$upscope $end

$enddefinitions $end

#0
$dumpvars
1(
0&
1'
0%
1$
10
0.
1/
0-
1,
19
07
18
06
15
03
b00 #
b0000000000000000000000000000000000000000000000000000001101101010 "
b00110110101000110011010100000011 !
b001101101010 ;
b00 +
b0000000000000000000000000000000000000000000000000000001101101010 *
b00110110101000110011010100000011 )
b00 4
b0000000000000000000000000000000000000000000000000000001101101010 =
b00000 :
bxxx 2
bxxxxx <
bxxxxx 1
$end
b011 2
b01010 <
b00000 1
#10
b00110110101000110011010100100011 !
b00110110101000110011010100100011 )
b01000 1
b01000 :
08
0/
0'
16
1-
1%
05
0,
0$
#20
b00000000101000110000010100110011 !
b00000000101000110000010100110011 )
b000 2
b01100 1
b000000001010 ;
b01100 :
09
00
0(
06
0-
0%
15
1,
1$
b0000000000000000000000000000000000000000000000000000000000000000 =
b0000000000000000000000000000000000000000000000000000000000000000 *
b0000000000000000000000000000000000000000000000000000000000000000 "
#30
b01000000101000110000010100110011 !
b01000000101000110000010100110011 )
b010000001010 ;
13
b01 4
b01 +
b01 #
#40
b00000000101000110111010100110011 !
b00000000101000110111010100110011 )
b111 2
b000000001010 ;
03
b10 4
b10 +
b10 #
#50
b00000000101000110110010100110011 !
b00000000101000110110010100110011 )
b110 2
b11 4
b11 +
b11 #
#60
b00010100101000110000010101100011 !
b00010100101000110000010101100011 )
b000 2
b11000 1
b000101001010 ;
b11000 :
17
1.
1&
05
0,
0$
b01 4
b01 +
b01 #
b0000000000000000000000000000000000000000000000000000000010100101 =
b0000000000000000000000000000000000000000000000000000000010100101 *
b0000000000000000000000000000000000000000000000000000000010100101 "

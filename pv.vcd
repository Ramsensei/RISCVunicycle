$date
	Sat May  4 12:56:15 2024
$end

$version
	Synopsys VCS version R-2020.12-SP2_Full64
$end

$timescale
	1s
$end

$comment Csum: 1 29e9e974fd800e81 $end


$scope module tb_top $end
$var reg 1 ! clk $end
$var reg 1 " rst $end

$scope module top1 $end
$var wire 1 # clk $end
$var wire 1 $ rst $end
$var wire 32 % Instruction [31:0] $end
$var wire 2 & ALUControl [1:0] $end
$var wire 1 ' RegWrite $end
$var wire 1 ( MemWrite $end
$var wire 1 ) Branch $end
$var wire 1 * MemToReg $end
$var wire 1 + ALUScr $end
$var wire 64 , Imm [63:0] $end

$scope module control $end
$var wire 32 % Instruction [31:0] $end
$var reg 64 - Imm [0:63] $end
$var reg 2 . ALUControl [0:1] $end
$var reg 1 / RegWrite $end
$var reg 1 0 MemWrite $end
$var reg 1 1 Branch $end
$var reg 1 2 MemToReg $end
$var reg 1 3 ALUScr $end

$scope module decoder $end
$var wire 5 4 OpCode [0:4] $end
$var wire 3 5 funct1 [0:2] $end
$var wire 1 6 funct2 $end
$var reg 2 7 ALUControl [0:1] $end
$var reg 1 8 RegWrite $end
$var reg 1 9 MemWrite $end
$var reg 1 : Branch $end
$var reg 1 ; MemToReg $end
$var reg 1 < ALUScr $end
$upscope $end


$scope module immGen $end
$var wire 5 = OpCode [0:4] $end
$var wire 12 > InstructionP1 [0:11] $end
$var wire 5 ? InstructionP2 [0:4] $end
$var reg 64 @ Imm [0:63] $end
$upscope $end

$upscope $end


$scope module datapath $end
$var wire 1 # clk $end
$var wire 1 $ rst $end
$var wire 2 & ALUControl [1:0] $end
$var wire 1 ' RegWrite $end
$var wire 1 ( MemWrite $end
$var wire 1 ) Branch $end
$var wire 1 * MemToReg $end
$var wire 1 + ALUScr $end
$var wire 64 , Imm [63:0] $end
$var reg 32 A Instruction [31:0] $end
$var wire 64 B PCm4 [63:0] $end
$var wire 64 C instAdd [63:0] $end
$var wire 64 D SrcA [63:0] $end
$var wire 64 E SrcB [63:0] $end
$var wire 64 F ShiftedImm [63:0] $end
$var wire 64 G WriteBack [63:0] $end
$var wire 4 H ALUFlags [3:0] $end
$var reg 1 I selBranch $end

$scope module PC $end
$var wire 64 B writeData [0:63] $end
$var wire 1 $ rst $end
$var wire 1 J writeEn $end
$var wire 1 # clk $end
$var reg 64 K read [0:63] $end
$var reg 64 L register [0:63] $end
$upscope $end


$scope module PCAdder $end
$var wire 64 C a [63:0] $end
$var wire 64 M b [63:0] $end
$var wire 1 N cin $end
$var reg 64 O sum [63:0] $end
$var reg 1 P cout $end
$var reg 64 Q cs [63:0] $end

$scope module firstAdd $end
$var wire 1 R a $end
$var wire 1 S b $end
$var wire 1 N cin $end
$var reg 1 T sum $end
$var reg 1 U cout $end
$upscope $end


$scope module adderLoop[1].adder $end
$var wire 1 V a $end
$var wire 1 W b $end
$var wire 1 X cin $end
$var reg 1 Y sum $end
$var reg 1 Z cout $end
$upscope $end


$scope module adderLoop[2].adder $end
$var wire 1 [ a $end
$var wire 1 \ b $end
$var wire 1 ] cin $end
$var reg 1 ^ sum $end
$var reg 1 _ cout $end
$upscope $end


$scope module adderLoop[3].adder $end
$var wire 1 ` a $end
$var wire 1 a b $end
$var wire 1 b cin $end
$var reg 1 c sum $end
$var reg 1 d cout $end
$upscope $end


$scope module adderLoop[4].adder $end
$var wire 1 e a $end
$var wire 1 f b $end
$var wire 1 g cin $end
$var reg 1 h sum $end
$var reg 1 i cout $end
$upscope $end


$scope module adderLoop[5].adder $end
$var wire 1 j a $end
$var wire 1 k b $end
$var wire 1 l cin $end
$var reg 1 m sum $end
$var reg 1 n cout $end
$upscope $end


$scope module adderLoop[6].adder $end
$var wire 1 o a $end
$var wire 1 p b $end
$var wire 1 q cin $end
$var reg 1 r sum $end
$var reg 1 s cout $end
$upscope $end


$scope module adderLoop[7].adder $end
$var wire 1 t a $end
$var wire 1 u b $end
$var wire 1 v cin $end
$var reg 1 w sum $end
$var reg 1 x cout $end
$upscope $end


$scope module adderLoop[8].adder $end
$var wire 1 y a $end
$var wire 1 z b $end
$var wire 1 { cin $end
$var reg 1 | sum $end
$var reg 1 } cout $end
$upscope $end


$scope module adderLoop[9].adder $end
$var wire 1 ~ a $end
$var wire 1 "! b $end
$var wire 1 "" cin $end
$var reg 1 "# sum $end
$var reg 1 "$ cout $end
$upscope $end


$scope module adderLoop[10].adder $end
$var wire 1 "% a $end
$var wire 1 "& b $end
$var wire 1 "' cin $end
$var reg 1 "( sum $end
$var reg 1 ") cout $end
$upscope $end


$scope module adderLoop[11].adder $end
$var wire 1 "* a $end
$var wire 1 "+ b $end
$var wire 1 ", cin $end
$var reg 1 "- sum $end
$var reg 1 ". cout $end
$upscope $end


$scope module adderLoop[12].adder $end
$var wire 1 "/ a $end
$var wire 1 "0 b $end
$var wire 1 "1 cin $end
$var reg 1 "2 sum $end
$var reg 1 "3 cout $end
$upscope $end


$scope module adderLoop[13].adder $end
$var wire 1 "4 a $end
$var wire 1 "5 b $end
$var wire 1 "6 cin $end
$var reg 1 "7 sum $end
$var reg 1 "8 cout $end
$upscope $end


$scope module adderLoop[14].adder $end
$var wire 1 "9 a $end
$var wire 1 ": b $end
$var wire 1 "; cin $end
$var reg 1 "< sum $end
$var reg 1 "= cout $end
$upscope $end


$scope module adderLoop[15].adder $end
$var wire 1 "> a $end
$var wire 1 "? b $end
$var wire 1 "@ cin $end
$var reg 1 "A sum $end
$var reg 1 "B cout $end
$upscope $end


$scope module adderLoop[16].adder $end
$var wire 1 "C a $end
$var wire 1 "D b $end
$var wire 1 "E cin $end
$var reg 1 "F sum $end
$var reg 1 "G cout $end
$upscope $end


$scope module adderLoop[17].adder $end
$var wire 1 "H a $end
$var wire 1 "I b $end
$var wire 1 "J cin $end
$var reg 1 "K sum $end
$var reg 1 "L cout $end
$upscope $end


$scope module adderLoop[18].adder $end
$var wire 1 "M a $end
$var wire 1 "N b $end
$var wire 1 "O cin $end
$var reg 1 "P sum $end
$var reg 1 "Q cout $end
$upscope $end


$scope module adderLoop[19].adder $end
$var wire 1 "R a $end
$var wire 1 "S b $end
$var wire 1 "T cin $end
$var reg 1 "U sum $end
$var reg 1 "V cout $end
$upscope $end


$scope module adderLoop[20].adder $end
$var wire 1 "W a $end
$var wire 1 "X b $end
$var wire 1 "Y cin $end
$var reg 1 "Z sum $end
$var reg 1 "[ cout $end
$upscope $end


$scope module adderLoop[21].adder $end
$var wire 1 "\ a $end
$var wire 1 "] b $end
$var wire 1 "^ cin $end
$var reg 1 "_ sum $end
$var reg 1 "` cout $end
$upscope $end


$scope module adderLoop[22].adder $end
$var wire 1 "a a $end
$var wire 1 "b b $end
$var wire 1 "c cin $end
$var reg 1 "d sum $end
$var reg 1 "e cout $end
$upscope $end


$scope module adderLoop[23].adder $end
$var wire 1 "f a $end
$var wire 1 "g b $end
$var wire 1 "h cin $end
$var reg 1 "i sum $end
$var reg 1 "j cout $end
$upscope $end


$scope module adderLoop[24].adder $end
$var wire 1 "k a $end
$var wire 1 "l b $end
$var wire 1 "m cin $end
$var reg 1 "n sum $end
$var reg 1 "o cout $end
$upscope $end


$scope module adderLoop[25].adder $end
$var wire 1 "p a $end
$var wire 1 "q b $end
$var wire 1 "r cin $end
$var reg 1 "s sum $end
$var reg 1 "t cout $end
$upscope $end


$scope module adderLoop[26].adder $end
$var wire 1 "u a $end
$var wire 1 "v b $end
$var wire 1 "w cin $end
$var reg 1 "x sum $end
$var reg 1 "y cout $end
$upscope $end


$scope module adderLoop[27].adder $end
$var wire 1 "z a $end
$var wire 1 "{ b $end
$var wire 1 "| cin $end
$var reg 1 "} sum $end
$var reg 1 "~ cout $end
$upscope $end


$scope module adderLoop[28].adder $end
$var wire 1 #! a $end
$var wire 1 #" b $end
$var wire 1 ## cin $end
$var reg 1 #$ sum $end
$var reg 1 #% cout $end
$upscope $end


$scope module adderLoop[29].adder $end
$var wire 1 #& a $end
$var wire 1 #' b $end
$var wire 1 #( cin $end
$var reg 1 #) sum $end
$var reg 1 #* cout $end
$upscope $end


$scope module adderLoop[30].adder $end
$var wire 1 #+ a $end
$var wire 1 #, b $end
$var wire 1 #- cin $end
$var reg 1 #. sum $end
$var reg 1 #/ cout $end
$upscope $end


$scope module adderLoop[31].adder $end
$var wire 1 #0 a $end
$var wire 1 #1 b $end
$var wire 1 #2 cin $end
$var reg 1 #3 sum $end
$var reg 1 #4 cout $end
$upscope $end


$scope module adderLoop[32].adder $end
$var wire 1 #5 a $end
$var wire 1 #6 b $end
$var wire 1 #7 cin $end
$var reg 1 #8 sum $end
$var reg 1 #9 cout $end
$upscope $end


$scope module adderLoop[33].adder $end
$var wire 1 #: a $end
$var wire 1 #; b $end
$var wire 1 #< cin $end
$var reg 1 #= sum $end
$var reg 1 #> cout $end
$upscope $end


$scope module adderLoop[34].adder $end
$var wire 1 #? a $end
$var wire 1 #@ b $end
$var wire 1 #A cin $end
$var reg 1 #B sum $end
$var reg 1 #C cout $end
$upscope $end


$scope module adderLoop[35].adder $end
$var wire 1 #D a $end
$var wire 1 #E b $end
$var wire 1 #F cin $end
$var reg 1 #G sum $end
$var reg 1 #H cout $end
$upscope $end


$scope module adderLoop[36].adder $end
$var wire 1 #I a $end
$var wire 1 #J b $end
$var wire 1 #K cin $end
$var reg 1 #L sum $end
$var reg 1 #M cout $end
$upscope $end


$scope module adderLoop[37].adder $end
$var wire 1 #N a $end
$var wire 1 #O b $end
$var wire 1 #P cin $end
$var reg 1 #Q sum $end
$var reg 1 #R cout $end
$upscope $end


$scope module adderLoop[38].adder $end
$var wire 1 #S a $end
$var wire 1 #T b $end
$var wire 1 #U cin $end
$var reg 1 #V sum $end
$var reg 1 #W cout $end
$upscope $end


$scope module adderLoop[39].adder $end
$var wire 1 #X a $end
$var wire 1 #Y b $end
$var wire 1 #Z cin $end
$var reg 1 #[ sum $end
$var reg 1 #\ cout $end
$upscope $end


$scope module adderLoop[40].adder $end
$var wire 1 #] a $end
$var wire 1 #^ b $end
$var wire 1 #_ cin $end
$var reg 1 #` sum $end
$var reg 1 #a cout $end
$upscope $end


$scope module adderLoop[41].adder $end
$var wire 1 #b a $end
$var wire 1 #c b $end
$var wire 1 #d cin $end
$var reg 1 #e sum $end
$var reg 1 #f cout $end
$upscope $end


$scope module adderLoop[42].adder $end
$var wire 1 #g a $end
$var wire 1 #h b $end
$var wire 1 #i cin $end
$var reg 1 #j sum $end
$var reg 1 #k cout $end
$upscope $end


$scope module adderLoop[43].adder $end
$var wire 1 #l a $end
$var wire 1 #m b $end
$var wire 1 #n cin $end
$var reg 1 #o sum $end
$var reg 1 #p cout $end
$upscope $end


$scope module adderLoop[44].adder $end
$var wire 1 #q a $end
$var wire 1 #r b $end
$var wire 1 #s cin $end
$var reg 1 #t sum $end
$var reg 1 #u cout $end
$upscope $end


$scope module adderLoop[45].adder $end
$var wire 1 #v a $end
$var wire 1 #w b $end
$var wire 1 #x cin $end
$var reg 1 #y sum $end
$var reg 1 #z cout $end
$upscope $end


$scope module adderLoop[46].adder $end
$var wire 1 #{ a $end
$var wire 1 #| b $end
$var wire 1 #} cin $end
$var reg 1 #~ sum $end
$var reg 1 $! cout $end
$upscope $end


$scope module adderLoop[47].adder $end
$var wire 1 $" a $end
$var wire 1 $# b $end
$var wire 1 $$ cin $end
$var reg 1 $% sum $end
$var reg 1 $& cout $end
$upscope $end


$scope module adderLoop[48].adder $end
$var wire 1 $' a $end
$var wire 1 $( b $end
$var wire 1 $) cin $end
$var reg 1 $* sum $end
$var reg 1 $+ cout $end
$upscope $end


$scope module adderLoop[49].adder $end
$var wire 1 $, a $end
$var wire 1 $- b $end
$var wire 1 $. cin $end
$var reg 1 $/ sum $end
$var reg 1 $0 cout $end
$upscope $end


$scope module adderLoop[50].adder $end
$var wire 1 $1 a $end
$var wire 1 $2 b $end
$var wire 1 $3 cin $end
$var reg 1 $4 sum $end
$var reg 1 $5 cout $end
$upscope $end


$scope module adderLoop[51].adder $end
$var wire 1 $6 a $end
$var wire 1 $7 b $end
$var wire 1 $8 cin $end
$var reg 1 $9 sum $end
$var reg 1 $: cout $end
$upscope $end


$scope module adderLoop[52].adder $end
$var wire 1 $; a $end
$var wire 1 $< b $end
$var wire 1 $= cin $end
$var reg 1 $> sum $end
$var reg 1 $? cout $end
$upscope $end


$scope module adderLoop[53].adder $end
$var wire 1 $@ a $end
$var wire 1 $A b $end
$var wire 1 $B cin $end
$var reg 1 $C sum $end
$var reg 1 $D cout $end
$upscope $end


$scope module adderLoop[54].adder $end
$var wire 1 $E a $end
$var wire 1 $F b $end
$var wire 1 $G cin $end
$var reg 1 $H sum $end
$var reg 1 $I cout $end
$upscope $end


$scope module adderLoop[55].adder $end
$var wire 1 $J a $end
$var wire 1 $K b $end
$var wire 1 $L cin $end
$var reg 1 $M sum $end
$var reg 1 $N cout $end
$upscope $end


$scope module adderLoop[56].adder $end
$var wire 1 $O a $end
$var wire 1 $P b $end
$var wire 1 $Q cin $end
$var reg 1 $R sum $end
$var reg 1 $S cout $end
$upscope $end


$scope module adderLoop[57].adder $end
$var wire 1 $T a $end
$var wire 1 $U b $end
$var wire 1 $V cin $end
$var reg 1 $W sum $end
$var reg 1 $X cout $end
$upscope $end


$scope module adderLoop[58].adder $end
$var wire 1 $Y a $end
$var wire 1 $Z b $end
$var wire 1 $[ cin $end
$var reg 1 $\ sum $end
$var reg 1 $] cout $end
$upscope $end


$scope module adderLoop[59].adder $end
$var wire 1 $^ a $end
$var wire 1 $_ b $end
$var wire 1 $` cin $end
$var reg 1 $a sum $end
$var reg 1 $b cout $end
$upscope $end


$scope module adderLoop[60].adder $end
$var wire 1 $c a $end
$var wire 1 $d b $end
$var wire 1 $e cin $end
$var reg 1 $f sum $end
$var reg 1 $g cout $end
$upscope $end


$scope module adderLoop[61].adder $end
$var wire 1 $h a $end
$var wire 1 $i b $end
$var wire 1 $j cin $end
$var reg 1 $k sum $end
$var reg 1 $l cout $end
$upscope $end


$scope module adderLoop[62].adder $end
$var wire 1 $m a $end
$var wire 1 $n b $end
$var wire 1 $o cin $end
$var reg 1 $p sum $end
$var reg 1 $q cout $end
$upscope $end


$scope module adderLoop[63].adder $end
$var wire 1 $r a $end
$var wire 1 $s b $end
$var wire 1 $t cin $end
$var reg 1 $u sum $end
$var reg 1 $v cout $end
$upscope $end

$upscope $end


$scope module ImmShifter $end
$var wire 64 , data [0:63] $end
$var reg 64 $w out [0:63] $end
$upscope $end


$scope module BAdder $end
$var wire 64 C a [63:0] $end
$var wire 64 F b [63:0] $end
$var wire 1 $x cin $end
$var reg 64 $y sum [63:0] $end
$var reg 1 $z cout $end
$var reg 64 ${ cs [63:0] $end

$scope module firstAdd $end
$var wire 1 R a $end
$var wire 1 $| b $end
$var wire 1 $x cin $end
$var reg 1 $} sum $end
$var reg 1 $~ cout $end
$upscope $end


$scope module adderLoop[1].adder $end
$var wire 1 V a $end
$var wire 1 %! b $end
$var wire 1 %" cin $end
$var reg 1 %# sum $end
$var reg 1 %$ cout $end
$upscope $end


$scope module adderLoop[2].adder $end
$var wire 1 [ a $end
$var wire 1 %% b $end
$var wire 1 %& cin $end
$var reg 1 %' sum $end
$var reg 1 %( cout $end
$upscope $end


$scope module adderLoop[3].adder $end
$var wire 1 ` a $end
$var wire 1 %) b $end
$var wire 1 %* cin $end
$var reg 1 %+ sum $end
$var reg 1 %, cout $end
$upscope $end


$scope module adderLoop[4].adder $end
$var wire 1 e a $end
$var wire 1 %- b $end
$var wire 1 %. cin $end
$var reg 1 %/ sum $end
$var reg 1 %0 cout $end
$upscope $end


$scope module adderLoop[5].adder $end
$var wire 1 j a $end
$var wire 1 %1 b $end
$var wire 1 %2 cin $end
$var reg 1 %3 sum $end
$var reg 1 %4 cout $end
$upscope $end


$scope module adderLoop[6].adder $end
$var wire 1 o a $end
$var wire 1 %5 b $end
$var wire 1 %6 cin $end
$var reg 1 %7 sum $end
$var reg 1 %8 cout $end
$upscope $end


$scope module adderLoop[7].adder $end
$var wire 1 t a $end
$var wire 1 %9 b $end
$var wire 1 %: cin $end
$var reg 1 %; sum $end
$var reg 1 %< cout $end
$upscope $end


$scope module adderLoop[8].adder $end
$var wire 1 y a $end
$var wire 1 %= b $end
$var wire 1 %> cin $end
$var reg 1 %? sum $end
$var reg 1 %@ cout $end
$upscope $end


$scope module adderLoop[9].adder $end
$var wire 1 ~ a $end
$var wire 1 %A b $end
$var wire 1 %B cin $end
$var reg 1 %C sum $end
$var reg 1 %D cout $end
$upscope $end


$scope module adderLoop[10].adder $end
$var wire 1 "% a $end
$var wire 1 %E b $end
$var wire 1 %F cin $end
$var reg 1 %G sum $end
$var reg 1 %H cout $end
$upscope $end


$scope module adderLoop[11].adder $end
$var wire 1 "* a $end
$var wire 1 %I b $end
$var wire 1 %J cin $end
$var reg 1 %K sum $end
$var reg 1 %L cout $end
$upscope $end


$scope module adderLoop[12].adder $end
$var wire 1 "/ a $end
$var wire 1 %M b $end
$var wire 1 %N cin $end
$var reg 1 %O sum $end
$var reg 1 %P cout $end
$upscope $end


$scope module adderLoop[13].adder $end
$var wire 1 "4 a $end
$var wire 1 %Q b $end
$var wire 1 %R cin $end
$var reg 1 %S sum $end
$var reg 1 %T cout $end
$upscope $end


$scope module adderLoop[14].adder $end
$var wire 1 "9 a $end
$var wire 1 %U b $end
$var wire 1 %V cin $end
$var reg 1 %W sum $end
$var reg 1 %X cout $end
$upscope $end


$scope module adderLoop[15].adder $end
$var wire 1 "> a $end
$var wire 1 %Y b $end
$var wire 1 %Z cin $end
$var reg 1 %[ sum $end
$var reg 1 %\ cout $end
$upscope $end


$scope module adderLoop[16].adder $end
$var wire 1 "C a $end
$var wire 1 %] b $end
$var wire 1 %^ cin $end
$var reg 1 %_ sum $end
$var reg 1 %` cout $end
$upscope $end


$scope module adderLoop[17].adder $end
$var wire 1 "H a $end
$var wire 1 %a b $end
$var wire 1 %b cin $end
$var reg 1 %c sum $end
$var reg 1 %d cout $end
$upscope $end


$scope module adderLoop[18].adder $end
$var wire 1 "M a $end
$var wire 1 %e b $end
$var wire 1 %f cin $end
$var reg 1 %g sum $end
$var reg 1 %h cout $end
$upscope $end


$scope module adderLoop[19].adder $end
$var wire 1 "R a $end
$var wire 1 %i b $end
$var wire 1 %j cin $end
$var reg 1 %k sum $end
$var reg 1 %l cout $end
$upscope $end


$scope module adderLoop[20].adder $end
$var wire 1 "W a $end
$var wire 1 %m b $end
$var wire 1 %n cin $end
$var reg 1 %o sum $end
$var reg 1 %p cout $end
$upscope $end


$scope module adderLoop[21].adder $end
$var wire 1 "\ a $end
$var wire 1 %q b $end
$var wire 1 %r cin $end
$var reg 1 %s sum $end
$var reg 1 %t cout $end
$upscope $end


$scope module adderLoop[22].adder $end
$var wire 1 "a a $end
$var wire 1 %u b $end
$var wire 1 %v cin $end
$var reg 1 %w sum $end
$var reg 1 %x cout $end
$upscope $end


$scope module adderLoop[23].adder $end
$var wire 1 "f a $end
$var wire 1 %y b $end
$var wire 1 %z cin $end
$var reg 1 %{ sum $end
$var reg 1 %| cout $end
$upscope $end


$scope module adderLoop[24].adder $end
$var wire 1 "k a $end
$var wire 1 %} b $end
$var wire 1 %~ cin $end
$var reg 1 &! sum $end
$var reg 1 &" cout $end
$upscope $end


$scope module adderLoop[25].adder $end
$var wire 1 "p a $end
$var wire 1 &# b $end
$var wire 1 &$ cin $end
$var reg 1 &% sum $end
$var reg 1 && cout $end
$upscope $end


$scope module adderLoop[26].adder $end
$var wire 1 "u a $end
$var wire 1 &' b $end
$var wire 1 &( cin $end
$var reg 1 &) sum $end
$var reg 1 &* cout $end
$upscope $end


$scope module adderLoop[27].adder $end
$var wire 1 "z a $end
$var wire 1 &+ b $end
$var wire 1 &, cin $end
$var reg 1 &- sum $end
$var reg 1 &. cout $end
$upscope $end


$scope module adderLoop[28].adder $end
$var wire 1 #! a $end
$var wire 1 &/ b $end
$var wire 1 &0 cin $end
$var reg 1 &1 sum $end
$var reg 1 &2 cout $end
$upscope $end


$scope module adderLoop[29].adder $end
$var wire 1 #& a $end
$var wire 1 &3 b $end
$var wire 1 &4 cin $end
$var reg 1 &5 sum $end
$var reg 1 &6 cout $end
$upscope $end


$scope module adderLoop[30].adder $end
$var wire 1 #+ a $end
$var wire 1 &7 b $end
$var wire 1 &8 cin $end
$var reg 1 &9 sum $end
$var reg 1 &: cout $end
$upscope $end


$scope module adderLoop[31].adder $end
$var wire 1 #0 a $end
$var wire 1 &; b $end
$var wire 1 &< cin $end
$var reg 1 &= sum $end
$var reg 1 &> cout $end
$upscope $end


$scope module adderLoop[32].adder $end
$var wire 1 #5 a $end
$var wire 1 &? b $end
$var wire 1 &@ cin $end
$var reg 1 &A sum $end
$var reg 1 &B cout $end
$upscope $end


$scope module adderLoop[33].adder $end
$var wire 1 #: a $end
$var wire 1 &C b $end
$var wire 1 &D cin $end
$var reg 1 &E sum $end
$var reg 1 &F cout $end
$upscope $end


$scope module adderLoop[34].adder $end
$var wire 1 #? a $end
$var wire 1 &G b $end
$var wire 1 &H cin $end
$var reg 1 &I sum $end
$var reg 1 &J cout $end
$upscope $end


$scope module adderLoop[35].adder $end
$var wire 1 #D a $end
$var wire 1 &K b $end
$var wire 1 &L cin $end
$var reg 1 &M sum $end
$var reg 1 &N cout $end
$upscope $end


$scope module adderLoop[36].adder $end
$var wire 1 #I a $end
$var wire 1 &O b $end
$var wire 1 &P cin $end
$var reg 1 &Q sum $end
$var reg 1 &R cout $end
$upscope $end


$scope module adderLoop[37].adder $end
$var wire 1 #N a $end
$var wire 1 &S b $end
$var wire 1 &T cin $end
$var reg 1 &U sum $end
$var reg 1 &V cout $end
$upscope $end


$scope module adderLoop[38].adder $end
$var wire 1 #S a $end
$var wire 1 &W b $end
$var wire 1 &X cin $end
$var reg 1 &Y sum $end
$var reg 1 &Z cout $end
$upscope $end


$scope module adderLoop[39].adder $end
$var wire 1 #X a $end
$var wire 1 &[ b $end
$var wire 1 &\ cin $end
$var reg 1 &] sum $end
$var reg 1 &^ cout $end
$upscope $end


$scope module adderLoop[40].adder $end
$var wire 1 #] a $end
$var wire 1 &_ b $end
$var wire 1 &` cin $end
$var reg 1 &a sum $end
$var reg 1 &b cout $end
$upscope $end


$scope module adderLoop[41].adder $end
$var wire 1 #b a $end
$var wire 1 &c b $end
$var wire 1 &d cin $end
$var reg 1 &e sum $end
$var reg 1 &f cout $end
$upscope $end


$scope module adderLoop[42].adder $end
$var wire 1 #g a $end
$var wire 1 &g b $end
$var wire 1 &h cin $end
$var reg 1 &i sum $end
$var reg 1 &j cout $end
$upscope $end


$scope module adderLoop[43].adder $end
$var wire 1 #l a $end
$var wire 1 &k b $end
$var wire 1 &l cin $end
$var reg 1 &m sum $end
$var reg 1 &n cout $end
$upscope $end


$scope module adderLoop[44].adder $end
$var wire 1 #q a $end
$var wire 1 &o b $end
$var wire 1 &p cin $end
$var reg 1 &q sum $end
$var reg 1 &r cout $end
$upscope $end


$scope module adderLoop[45].adder $end
$var wire 1 #v a $end
$var wire 1 &s b $end
$var wire 1 &t cin $end
$var reg 1 &u sum $end
$var reg 1 &v cout $end
$upscope $end


$scope module adderLoop[46].adder $end
$var wire 1 #{ a $end
$var wire 1 &w b $end
$var wire 1 &x cin $end
$var reg 1 &y sum $end
$var reg 1 &z cout $end
$upscope $end


$scope module adderLoop[47].adder $end
$var wire 1 $" a $end
$var wire 1 &{ b $end
$var wire 1 &| cin $end
$var reg 1 &} sum $end
$var reg 1 &~ cout $end
$upscope $end


$scope module adderLoop[48].adder $end
$var wire 1 $' a $end
$var wire 1 '! b $end
$var wire 1 '" cin $end
$var reg 1 '# sum $end
$var reg 1 '$ cout $end
$upscope $end


$scope module adderLoop[49].adder $end
$var wire 1 $, a $end
$var wire 1 '% b $end
$var wire 1 '& cin $end
$var reg 1 '' sum $end
$var reg 1 '( cout $end
$upscope $end


$scope module adderLoop[50].adder $end
$var wire 1 $1 a $end
$var wire 1 ') b $end
$var wire 1 '* cin $end
$var reg 1 '+ sum $end
$var reg 1 ', cout $end
$upscope $end


$scope module adderLoop[51].adder $end
$var wire 1 $6 a $end
$var wire 1 '- b $end
$var wire 1 '. cin $end
$var reg 1 '/ sum $end
$var reg 1 '0 cout $end
$upscope $end


$scope module adderLoop[52].adder $end
$var wire 1 $; a $end
$var wire 1 '1 b $end
$var wire 1 '2 cin $end
$var reg 1 '3 sum $end
$var reg 1 '4 cout $end
$upscope $end


$scope module adderLoop[53].adder $end
$var wire 1 $@ a $end
$var wire 1 '5 b $end
$var wire 1 '6 cin $end
$var reg 1 '7 sum $end
$var reg 1 '8 cout $end
$upscope $end


$scope module adderLoop[54].adder $end
$var wire 1 $E a $end
$var wire 1 '9 b $end
$var wire 1 ': cin $end
$var reg 1 '; sum $end
$var reg 1 '< cout $end
$upscope $end


$scope module adderLoop[55].adder $end
$var wire 1 $J a $end
$var wire 1 '= b $end
$var wire 1 '> cin $end
$var reg 1 '? sum $end
$var reg 1 '@ cout $end
$upscope $end


$scope module adderLoop[56].adder $end
$var wire 1 $O a $end
$var wire 1 'A b $end
$var wire 1 'B cin $end
$var reg 1 'C sum $end
$var reg 1 'D cout $end
$upscope $end


$scope module adderLoop[57].adder $end
$var wire 1 $T a $end
$var wire 1 'E b $end
$var wire 1 'F cin $end
$var reg 1 'G sum $end
$var reg 1 'H cout $end
$upscope $end


$scope module adderLoop[58].adder $end
$var wire 1 $Y a $end
$var wire 1 'I b $end
$var wire 1 'J cin $end
$var reg 1 'K sum $end
$var reg 1 'L cout $end
$upscope $end


$scope module adderLoop[59].adder $end
$var wire 1 $^ a $end
$var wire 1 'M b $end
$var wire 1 'N cin $end
$var reg 1 'O sum $end
$var reg 1 'P cout $end
$upscope $end


$scope module adderLoop[60].adder $end
$var wire 1 $c a $end
$var wire 1 'Q b $end
$var wire 1 'R cin $end
$var reg 1 'S sum $end
$var reg 1 'T cout $end
$upscope $end


$scope module adderLoop[61].adder $end
$var wire 1 $h a $end
$var wire 1 'U b $end
$var wire 1 'V cin $end
$var reg 1 'W sum $end
$var reg 1 'X cout $end
$upscope $end


$scope module adderLoop[62].adder $end
$var wire 1 $m a $end
$var wire 1 'Y b $end
$var wire 1 'Z cin $end
$var reg 1 '[ sum $end
$var reg 1 '\ cout $end
$upscope $end


$scope module adderLoop[63].adder $end
$var wire 1 $r a $end
$var wire 1 '] b $end
$var wire 1 '^ cin $end
$var reg 1 '_ sum $end
$var reg 1 '` cout $end
$upscope $end

$upscope $end


$scope module PCMux $end
$var wire 1 'a selector [0:0] $end
$var reg 64 'b Out [63:0] $end
$upscope $end


$scope module instMem $end
$var wire 10 'c address [0:9] $end
$var reg 32 'd readData [0:31] $end
$upscope $end


$scope module regFile $end
$var wire 5 'e address1 [4:0] $end
$var wire 5 'f address2 [4:0] $end
$var wire 5 'g addressw [4:0] $end
$var wire 64 G writeData [63:0] $end
$var wire 1 ' writeEn $end
$var wire 1 # clk $end
$var reg 64 'h read1 [63:0] $end
$var reg 64 'i read2 [63:0] $end
$var reg 32 'j hotbitOut [31:0] $end
$var wire 32 'k regEnable [31:0] $end

$scope module hotbit1 $end
$var wire 5 'g index [4:0] $end
$var reg 32 'l Out [31:0] $end

$scope module generate_hotbit_outputs[0].equal_n_bits $end
$var wire 5 'g Data0 [4:0] $end
$var wire 5 'm Data1 [4:0] $end
$var reg 1 'n Out $end
$var reg 5 'o Comps [4:0] $end

$scope module generate_NComps[0].equal_one_bit $end
$var wire 1 'p Data0 $end
$var wire 1 'q Data1 $end
$var reg 1 'r Out $end
$upscope $end


$scope module generate_NComps[1].equal_one_bit $end
$var wire 1 's Data0 $end
$var wire 1 't Data1 $end
$var reg 1 'u Out $end
$upscope $end


$scope module generate_NComps[2].equal_one_bit $end
$var wire 1 'v Data0 $end
$var wire 1 'w Data1 $end
$var reg 1 'x Out $end
$upscope $end


$scope module generate_NComps[3].equal_one_bit $end
$var wire 1 'y Data0 $end
$var wire 1 'z Data1 $end
$var reg 1 '{ Out $end
$upscope $end


$scope module generate_NComps[4].equal_one_bit $end
$var wire 1 '| Data0 $end
$var wire 1 '} Data1 $end
$var reg 1 '~ Out $end
$upscope $end

$upscope $end


$scope module generate_hotbit_outputs[1].equal_n_bits $end
$var wire 5 'g Data0 [4:0] $end
$var wire 5 (! Data1 [4:0] $end
$var reg 1 (" Out $end
$var reg 5 (# Comps [4:0] $end

$scope module generate_NComps[0].equal_one_bit $end
$var wire 1 ($ Data0 $end
$var wire 1 (% Data1 $end
$var reg 1 (& Out $end
$upscope $end


$scope module generate_NComps[1].equal_one_bit $end
$var wire 1 (' Data0 $end
$var wire 1 (( Data1 $end
$var reg 1 () Out $end
$upscope $end


$scope module generate_NComps[2].equal_one_bit $end
$var wire 1 (* Data0 $end
$var wire 1 (+ Data1 $end
$var reg 1 (, Out $end
$upscope $end


$scope module generate_NComps[3].equal_one_bit $end
$var wire 1 (- Data0 $end
$var wire 1 (. Data1 $end
$var reg 1 (/ Out $end
$upscope $end


$scope module generate_NComps[4].equal_one_bit $end
$var wire 1 (0 Data0 $end
$var wire 1 (1 Data1 $end
$var reg 1 (2 Out $end
$upscope $end

$upscope $end


$scope module generate_hotbit_outputs[2].equal_n_bits $end
$var wire 5 'g Data0 [4:0] $end
$var wire 5 (3 Data1 [4:0] $end
$var reg 1 (4 Out $end
$var reg 5 (5 Comps [4:0] $end

$scope module generate_NComps[0].equal_one_bit $end
$var wire 1 (6 Data0 $end
$var wire 1 (7 Data1 $end
$var reg 1 (8 Out $end
$upscope $end


$scope module generate_NComps[1].equal_one_bit $end
$var wire 1 (9 Data0 $end
$var wire 1 (: Data1 $end
$var reg 1 (; Out $end
$upscope $end


$scope module generate_NComps[2].equal_one_bit $end
$var wire 1 (< Data0 $end
$var wire 1 (= Data1 $end
$var reg 1 (> Out $end
$upscope $end


$scope module generate_NComps[3].equal_one_bit $end
$var wire 1 (? Data0 $end
$var wire 1 (@ Data1 $end
$var reg 1 (A Out $end
$upscope $end


$scope module generate_NComps[4].equal_one_bit $end
$var wire 1 (B Data0 $end
$var wire 1 (C Data1 $end
$var reg 1 (D Out $end
$upscope $end

$upscope $end


$scope module generate_hotbit_outputs[3].equal_n_bits $end
$var wire 5 'g Data0 [4:0] $end
$var wire 5 (E Data1 [4:0] $end
$var reg 1 (F Out $end
$var reg 5 (G Comps [4:0] $end

$scope module generate_NComps[0].equal_one_bit $end
$var wire 1 (H Data0 $end
$var wire 1 (I Data1 $end
$var reg 1 (J Out $end
$upscope $end


$scope module generate_NComps[1].equal_one_bit $end
$var wire 1 (K Data0 $end
$var wire 1 (L Data1 $end
$var reg 1 (M Out $end
$upscope $end


$scope module generate_NComps[2].equal_one_bit $end
$var wire 1 (N Data0 $end
$var wire 1 (O Data1 $end
$var reg 1 (P Out $end
$upscope $end


$scope module generate_NComps[3].equal_one_bit $end
$var wire 1 (Q Data0 $end
$var wire 1 (R Data1 $end
$var reg 1 (S Out $end
$upscope $end


$scope module generate_NComps[4].equal_one_bit $end
$var wire 1 (T Data0 $end
$var wire 1 (U Data1 $end
$var reg 1 (V Out $end
$upscope $end

$upscope $end


$scope module generate_hotbit_outputs[4].equal_n_bits $end
$var wire 5 'g Data0 [4:0] $end
$var wire 5 (W Data1 [4:0] $end
$var reg 1 (X Out $end
$var reg 5 (Y Comps [4:0] $end

$scope module generate_NComps[0].equal_one_bit $end
$var wire 1 (Z Data0 $end
$var wire 1 ([ Data1 $end
$var reg 1 (\ Out $end
$upscope $end


$scope module generate_NComps[1].equal_one_bit $end
$var wire 1 (] Data0 $end
$var wire 1 (^ Data1 $end
$var reg 1 (_ Out $end
$upscope $end


$scope module generate_NComps[2].equal_one_bit $end
$var wire 1 (` Data0 $end
$var wire 1 (a Data1 $end
$var reg 1 (b Out $end
$upscope $end


$scope module generate_NComps[3].equal_one_bit $end
$var wire 1 (c Data0 $end
$var wire 1 (d Data1 $end
$var reg 1 (e Out $end
$upscope $end


$scope module generate_NComps[4].equal_one_bit $end
$var wire 1 (f Data0 $end
$var wire 1 (g Data1 $end
$var reg 1 (h Out $end
$upscope $end

$upscope $end


$scope module generate_hotbit_outputs[5].equal_n_bits $end
$var wire 5 'g Data0 [4:0] $end
$var wire 5 (i Data1 [4:0] $end
$var reg 1 (j Out $end
$var reg 5 (k Comps [4:0] $end

$scope module generate_NComps[0].equal_one_bit $end
$var wire 1 (l Data0 $end
$var wire 1 (m Data1 $end
$var reg 1 (n Out $end
$upscope $end


$scope module generate_NComps[1].equal_one_bit $end
$var wire 1 (o Data0 $end
$var wire 1 (p Data1 $end
$var reg 1 (q Out $end
$upscope $end


$scope module generate_NComps[2].equal_one_bit $end
$var wire 1 (r Data0 $end
$var wire 1 (s Data1 $end
$var reg 1 (t Out $end
$upscope $end


$scope module generate_NComps[3].equal_one_bit $end
$var wire 1 (u Data0 $end
$var wire 1 (v Data1 $end
$var reg 1 (w Out $end
$upscope $end


$scope module generate_NComps[4].equal_one_bit $end
$var wire 1 (x Data0 $end
$var wire 1 (y Data1 $end
$var reg 1 (z Out $end
$upscope $end

$upscope $end


$scope module generate_hotbit_outputs[6].equal_n_bits $end
$var wire 5 'g Data0 [4:0] $end
$var wire 5 ({ Data1 [4:0] $end
$var reg 1 (| Out $end
$var reg 5 (} Comps [4:0] $end

$scope module generate_NComps[0].equal_one_bit $end
$var wire 1 (~ Data0 $end
$var wire 1 )! Data1 $end
$var reg 1 )" Out $end
$upscope $end


$scope module generate_NComps[1].equal_one_bit $end
$var wire 1 )# Data0 $end
$var wire 1 )$ Data1 $end
$var reg 1 )% Out $end
$upscope $end


$scope module generate_NComps[2].equal_one_bit $end
$var wire 1 )& Data0 $end
$var wire 1 )' Data1 $end
$var reg 1 )( Out $end
$upscope $end


$scope module generate_NComps[3].equal_one_bit $end
$var wire 1 )) Data0 $end
$var wire 1 )* Data1 $end
$var reg 1 )+ Out $end
$upscope $end


$scope module generate_NComps[4].equal_one_bit $end
$var wire 1 ), Data0 $end
$var wire 1 )- Data1 $end
$var reg 1 ). Out $end
$upscope $end

$upscope $end


$scope module generate_hotbit_outputs[7].equal_n_bits $end
$var wire 5 'g Data0 [4:0] $end
$var wire 5 )/ Data1 [4:0] $end
$var reg 1 )0 Out $end
$var reg 5 )1 Comps [4:0] $end

$scope module generate_NComps[0].equal_one_bit $end
$var wire 1 )2 Data0 $end
$var wire 1 )3 Data1 $end
$var reg 1 )4 Out $end
$upscope $end


$scope module generate_NComps[1].equal_one_bit $end
$var wire 1 )5 Data0 $end
$var wire 1 )6 Data1 $end
$var reg 1 )7 Out $end
$upscope $end


$scope module generate_NComps[2].equal_one_bit $end
$var wire 1 )8 Data0 $end
$var wire 1 )9 Data1 $end
$var reg 1 ): Out $end
$upscope $end


$scope module generate_NComps[3].equal_one_bit $end
$var wire 1 ); Data0 $end
$var wire 1 )< Data1 $end
$var reg 1 )= Out $end
$upscope $end


$scope module generate_NComps[4].equal_one_bit $end
$var wire 1 )> Data0 $end
$var wire 1 )? Data1 $end
$var reg 1 )@ Out $end
$upscope $end

$upscope $end


$scope module generate_hotbit_outputs[8].equal_n_bits $end
$var wire 5 'g Data0 [4:0] $end
$var wire 5 )A Data1 [4:0] $end
$var reg 1 )B Out $end
$var reg 5 )C Comps [4:0] $end

$scope module generate_NComps[0].equal_one_bit $end
$var wire 1 )D Data0 $end
$var wire 1 )E Data1 $end
$var reg 1 )F Out $end
$upscope $end


$scope module generate_NComps[1].equal_one_bit $end
$var wire 1 )G Data0 $end
$var wire 1 )H Data1 $end
$var reg 1 )I Out $end
$upscope $end


$scope module generate_NComps[2].equal_one_bit $end
$var wire 1 )J Data0 $end
$var wire 1 )K Data1 $end
$var reg 1 )L Out $end
$upscope $end


$scope module generate_NComps[3].equal_one_bit $end
$var wire 1 )M Data0 $end
$var wire 1 )N Data1 $end
$var reg 1 )O Out $end
$upscope $end


$scope module generate_NComps[4].equal_one_bit $end
$var wire 1 )P Data0 $end
$var wire 1 )Q Data1 $end
$var reg 1 )R Out $end
$upscope $end

$upscope $end


$scope module generate_hotbit_outputs[9].equal_n_bits $end
$var wire 5 'g Data0 [4:0] $end
$var wire 5 )S Data1 [4:0] $end
$var reg 1 )T Out $end
$var reg 5 )U Comps [4:0] $end

$scope module generate_NComps[0].equal_one_bit $end
$var wire 1 )V Data0 $end
$var wire 1 )W Data1 $end
$var reg 1 )X Out $end
$upscope $end


$scope module generate_NComps[1].equal_one_bit $end
$var wire 1 )Y Data0 $end
$var wire 1 )Z Data1 $end
$var reg 1 )[ Out $end
$upscope $end


$scope module generate_NComps[2].equal_one_bit $end
$var wire 1 )\ Data0 $end
$var wire 1 )] Data1 $end
$var reg 1 )^ Out $end
$upscope $end


$scope module generate_NComps[3].equal_one_bit $end
$var wire 1 )_ Data0 $end
$var wire 1 )` Data1 $end
$var reg 1 )a Out $end
$upscope $end


$scope module generate_NComps[4].equal_one_bit $end
$var wire 1 )b Data0 $end
$var wire 1 )c Data1 $end
$var reg 1 )d Out $end
$upscope $end

$upscope $end


$scope module generate_hotbit_outputs[10].equal_n_bits $end
$var wire 5 'g Data0 [4:0] $end
$var wire 5 )e Data1 [4:0] $end
$var reg 1 )f Out $end
$var reg 5 )g Comps [4:0] $end

$scope module generate_NComps[0].equal_one_bit $end
$var wire 1 )h Data0 $end
$var wire 1 )i Data1 $end
$var reg 1 )j Out $end
$upscope $end


$scope module generate_NComps[1].equal_one_bit $end
$var wire 1 )k Data0 $end
$var wire 1 )l Data1 $end
$var reg 1 )m Out $end
$upscope $end


$scope module generate_NComps[2].equal_one_bit $end
$var wire 1 )n Data0 $end
$var wire 1 )o Data1 $end
$var reg 1 )p Out $end
$upscope $end


$scope module generate_NComps[3].equal_one_bit $end
$var wire 1 )q Data0 $end
$var wire 1 )r Data1 $end
$var reg 1 )s Out $end
$upscope $end


$scope module generate_NComps[4].equal_one_bit $end
$var wire 1 )t Data0 $end
$var wire 1 )u Data1 $end
$var reg 1 )v Out $end
$upscope $end

$upscope $end


$scope module generate_hotbit_outputs[11].equal_n_bits $end
$var wire 5 'g Data0 [4:0] $end
$var wire 5 )w Data1 [4:0] $end
$var reg 1 )x Out $end
$var reg 5 )y Comps [4:0] $end

$scope module generate_NComps[0].equal_one_bit $end
$var wire 1 )z Data0 $end
$var wire 1 ){ Data1 $end
$var reg 1 )| Out $end
$upscope $end


$scope module generate_NComps[1].equal_one_bit $end
$var wire 1 )} Data0 $end
$var wire 1 )~ Data1 $end
$var reg 1 *! Out $end
$upscope $end


$scope module generate_NComps[2].equal_one_bit $end
$var wire 1 *" Data0 $end
$var wire 1 *# Data1 $end
$var reg 1 *$ Out $end
$upscope $end


$scope module generate_NComps[3].equal_one_bit $end
$var wire 1 *% Data0 $end
$var wire 1 *& Data1 $end
$var reg 1 *' Out $end
$upscope $end


$scope module generate_NComps[4].equal_one_bit $end
$var wire 1 *( Data0 $end
$var wire 1 *) Data1 $end
$var reg 1 ** Out $end
$upscope $end

$upscope $end


$scope module generate_hotbit_outputs[12].equal_n_bits $end
$var wire 5 'g Data0 [4:0] $end
$var wire 5 *+ Data1 [4:0] $end
$var reg 1 *, Out $end
$var reg 5 *- Comps [4:0] $end

$scope module generate_NComps[0].equal_one_bit $end
$var wire 1 *. Data0 $end
$var wire 1 */ Data1 $end
$var reg 1 *0 Out $end
$upscope $end


$scope module generate_NComps[1].equal_one_bit $end
$var wire 1 *1 Data0 $end
$var wire 1 *2 Data1 $end
$var reg 1 *3 Out $end
$upscope $end


$scope module generate_NComps[2].equal_one_bit $end
$var wire 1 *4 Data0 $end
$var wire 1 *5 Data1 $end
$var reg 1 *6 Out $end
$upscope $end


$scope module generate_NComps[3].equal_one_bit $end
$var wire 1 *7 Data0 $end
$var wire 1 *8 Data1 $end
$var reg 1 *9 Out $end
$upscope $end


$scope module generate_NComps[4].equal_one_bit $end
$var wire 1 *: Data0 $end
$var wire 1 *; Data1 $end
$var reg 1 *< Out $end
$upscope $end

$upscope $end


$scope module generate_hotbit_outputs[13].equal_n_bits $end
$var wire 5 'g Data0 [4:0] $end
$var wire 5 *= Data1 [4:0] $end
$var reg 1 *> Out $end
$var reg 5 *? Comps [4:0] $end

$scope module generate_NComps[0].equal_one_bit $end
$var wire 1 *@ Data0 $end
$var wire 1 *A Data1 $end
$var reg 1 *B Out $end
$upscope $end


$scope module generate_NComps[1].equal_one_bit $end
$var wire 1 *C Data0 $end
$var wire 1 *D Data1 $end
$var reg 1 *E Out $end
$upscope $end


$scope module generate_NComps[2].equal_one_bit $end
$var wire 1 *F Data0 $end
$var wire 1 *G Data1 $end
$var reg 1 *H Out $end
$upscope $end


$scope module generate_NComps[3].equal_one_bit $end
$var wire 1 *I Data0 $end
$var wire 1 *J Data1 $end
$var reg 1 *K Out $end
$upscope $end


$scope module generate_NComps[4].equal_one_bit $end
$var wire 1 *L Data0 $end
$var wire 1 *M Data1 $end
$var reg 1 *N Out $end
$upscope $end

$upscope $end


$scope module generate_hotbit_outputs[14].equal_n_bits $end
$var wire 5 'g Data0 [4:0] $end
$var wire 5 *O Data1 [4:0] $end
$var reg 1 *P Out $end
$var reg 5 *Q Comps [4:0] $end

$scope module generate_NComps[0].equal_one_bit $end
$var wire 1 *R Data0 $end
$var wire 1 *S Data1 $end
$var reg 1 *T Out $end
$upscope $end


$scope module generate_NComps[1].equal_one_bit $end
$var wire 1 *U Data0 $end
$var wire 1 *V Data1 $end
$var reg 1 *W Out $end
$upscope $end


$scope module generate_NComps[2].equal_one_bit $end
$var wire 1 *X Data0 $end
$var wire 1 *Y Data1 $end
$var reg 1 *Z Out $end
$upscope $end


$scope module generate_NComps[3].equal_one_bit $end
$var wire 1 *[ Data0 $end
$var wire 1 *\ Data1 $end
$var reg 1 *] Out $end
$upscope $end


$scope module generate_NComps[4].equal_one_bit $end
$var wire 1 *^ Data0 $end
$var wire 1 *_ Data1 $end
$var reg 1 *` Out $end
$upscope $end

$upscope $end


$scope module generate_hotbit_outputs[15].equal_n_bits $end
$var wire 5 'g Data0 [4:0] $end
$var wire 5 *a Data1 [4:0] $end
$var reg 1 *b Out $end
$var reg 5 *c Comps [4:0] $end

$scope module generate_NComps[0].equal_one_bit $end
$var wire 1 *d Data0 $end
$var wire 1 *e Data1 $end
$var reg 1 *f Out $end
$upscope $end


$scope module generate_NComps[1].equal_one_bit $end
$var wire 1 *g Data0 $end
$var wire 1 *h Data1 $end
$var reg 1 *i Out $end
$upscope $end


$scope module generate_NComps[2].equal_one_bit $end
$var wire 1 *j Data0 $end
$var wire 1 *k Data1 $end
$var reg 1 *l Out $end
$upscope $end


$scope module generate_NComps[3].equal_one_bit $end
$var wire 1 *m Data0 $end
$var wire 1 *n Data1 $end
$var reg 1 *o Out $end
$upscope $end


$scope module generate_NComps[4].equal_one_bit $end
$var wire 1 *p Data0 $end
$var wire 1 *q Data1 $end
$var reg 1 *r Out $end
$upscope $end

$upscope $end


$scope module generate_hotbit_outputs[16].equal_n_bits $end
$var wire 5 'g Data0 [4:0] $end
$var wire 5 *s Data1 [4:0] $end
$var reg 1 *t Out $end
$var reg 5 *u Comps [4:0] $end

$scope module generate_NComps[0].equal_one_bit $end
$var wire 1 *v Data0 $end
$var wire 1 *w Data1 $end
$var reg 1 *x Out $end
$upscope $end


$scope module generate_NComps[1].equal_one_bit $end
$var wire 1 *y Data0 $end
$var wire 1 *z Data1 $end
$var reg 1 *{ Out $end
$upscope $end


$scope module generate_NComps[2].equal_one_bit $end
$var wire 1 *| Data0 $end
$var wire 1 *} Data1 $end
$var reg 1 *~ Out $end
$upscope $end


$scope module generate_NComps[3].equal_one_bit $end
$var wire 1 +! Data0 $end
$var wire 1 +" Data1 $end
$var reg 1 +# Out $end
$upscope $end


$scope module generate_NComps[4].equal_one_bit $end
$var wire 1 +$ Data0 $end
$var wire 1 +% Data1 $end
$var reg 1 +& Out $end
$upscope $end

$upscope $end


$scope module generate_hotbit_outputs[17].equal_n_bits $end
$var wire 5 'g Data0 [4:0] $end
$var wire 5 +' Data1 [4:0] $end
$var reg 1 +( Out $end
$var reg 5 +) Comps [4:0] $end

$scope module generate_NComps[0].equal_one_bit $end
$var wire 1 +* Data0 $end
$var wire 1 ++ Data1 $end
$var reg 1 +, Out $end
$upscope $end


$scope module generate_NComps[1].equal_one_bit $end
$var wire 1 +- Data0 $end
$var wire 1 +. Data1 $end
$var reg 1 +/ Out $end
$upscope $end


$scope module generate_NComps[2].equal_one_bit $end
$var wire 1 +0 Data0 $end
$var wire 1 +1 Data1 $end
$var reg 1 +2 Out $end
$upscope $end


$scope module generate_NComps[3].equal_one_bit $end
$var wire 1 +3 Data0 $end
$var wire 1 +4 Data1 $end
$var reg 1 +5 Out $end
$upscope $end


$scope module generate_NComps[4].equal_one_bit $end
$var wire 1 +6 Data0 $end
$var wire 1 +7 Data1 $end
$var reg 1 +8 Out $end
$upscope $end

$upscope $end


$scope module generate_hotbit_outputs[18].equal_n_bits $end
$var wire 5 'g Data0 [4:0] $end
$var wire 5 +9 Data1 [4:0] $end
$var reg 1 +: Out $end
$var reg 5 +; Comps [4:0] $end

$scope module generate_NComps[0].equal_one_bit $end
$var wire 1 +< Data0 $end
$var wire 1 += Data1 $end
$var reg 1 +> Out $end
$upscope $end


$scope module generate_NComps[1].equal_one_bit $end
$var wire 1 +? Data0 $end
$var wire 1 +@ Data1 $end
$var reg 1 +A Out $end
$upscope $end


$scope module generate_NComps[2].equal_one_bit $end
$var wire 1 +B Data0 $end
$var wire 1 +C Data1 $end
$var reg 1 +D Out $end
$upscope $end


$scope module generate_NComps[3].equal_one_bit $end
$var wire 1 +E Data0 $end
$var wire 1 +F Data1 $end
$var reg 1 +G Out $end
$upscope $end


$scope module generate_NComps[4].equal_one_bit $end
$var wire 1 +H Data0 $end
$var wire 1 +I Data1 $end
$var reg 1 +J Out $end
$upscope $end

$upscope $end


$scope module generate_hotbit_outputs[19].equal_n_bits $end
$var wire 5 'g Data0 [4:0] $end
$var wire 5 +K Data1 [4:0] $end
$var reg 1 +L Out $end
$var reg 5 +M Comps [4:0] $end

$scope module generate_NComps[0].equal_one_bit $end
$var wire 1 +N Data0 $end
$var wire 1 +O Data1 $end
$var reg 1 +P Out $end
$upscope $end


$scope module generate_NComps[1].equal_one_bit $end
$var wire 1 +Q Data0 $end
$var wire 1 +R Data1 $end
$var reg 1 +S Out $end
$upscope $end


$scope module generate_NComps[2].equal_one_bit $end
$var wire 1 +T Data0 $end
$var wire 1 +U Data1 $end
$var reg 1 +V Out $end
$upscope $end


$scope module generate_NComps[3].equal_one_bit $end
$var wire 1 +W Data0 $end
$var wire 1 +X Data1 $end
$var reg 1 +Y Out $end
$upscope $end


$scope module generate_NComps[4].equal_one_bit $end
$var wire 1 +Z Data0 $end
$var wire 1 +[ Data1 $end
$var reg 1 +\ Out $end
$upscope $end

$upscope $end


$scope module generate_hotbit_outputs[20].equal_n_bits $end
$var wire 5 'g Data0 [4:0] $end
$var wire 5 +] Data1 [4:0] $end
$var reg 1 +^ Out $end
$var reg 5 +_ Comps [4:0] $end

$scope module generate_NComps[0].equal_one_bit $end
$var wire 1 +` Data0 $end
$var wire 1 +a Data1 $end
$var reg 1 +b Out $end
$upscope $end


$scope module generate_NComps[1].equal_one_bit $end
$var wire 1 +c Data0 $end
$var wire 1 +d Data1 $end
$var reg 1 +e Out $end
$upscope $end


$scope module generate_NComps[2].equal_one_bit $end
$var wire 1 +f Data0 $end
$var wire 1 +g Data1 $end
$var reg 1 +h Out $end
$upscope $end


$scope module generate_NComps[3].equal_one_bit $end
$var wire 1 +i Data0 $end
$var wire 1 +j Data1 $end
$var reg 1 +k Out $end
$upscope $end


$scope module generate_NComps[4].equal_one_bit $end
$var wire 1 +l Data0 $end
$var wire 1 +m Data1 $end
$var reg 1 +n Out $end
$upscope $end

$upscope $end


$scope module generate_hotbit_outputs[21].equal_n_bits $end
$var wire 5 'g Data0 [4:0] $end
$var wire 5 +o Data1 [4:0] $end
$var reg 1 +p Out $end
$var reg 5 +q Comps [4:0] $end

$scope module generate_NComps[0].equal_one_bit $end
$var wire 1 +r Data0 $end
$var wire 1 +s Data1 $end
$var reg 1 +t Out $end
$upscope $end


$scope module generate_NComps[1].equal_one_bit $end
$var wire 1 +u Data0 $end
$var wire 1 +v Data1 $end
$var reg 1 +w Out $end
$upscope $end


$scope module generate_NComps[2].equal_one_bit $end
$var wire 1 +x Data0 $end
$var wire 1 +y Data1 $end
$var reg 1 +z Out $end
$upscope $end


$scope module generate_NComps[3].equal_one_bit $end
$var wire 1 +{ Data0 $end
$var wire 1 +| Data1 $end
$var reg 1 +} Out $end
$upscope $end


$scope module generate_NComps[4].equal_one_bit $end
$var wire 1 +~ Data0 $end
$var wire 1 ,! Data1 $end
$var reg 1 ," Out $end
$upscope $end

$upscope $end


$scope module generate_hotbit_outputs[22].equal_n_bits $end
$var wire 5 'g Data0 [4:0] $end
$var wire 5 ,# Data1 [4:0] $end
$var reg 1 ,$ Out $end
$var reg 5 ,% Comps [4:0] $end

$scope module generate_NComps[0].equal_one_bit $end
$var wire 1 ,& Data0 $end
$var wire 1 ,' Data1 $end
$var reg 1 ,( Out $end
$upscope $end


$scope module generate_NComps[1].equal_one_bit $end
$var wire 1 ,) Data0 $end
$var wire 1 ,* Data1 $end
$var reg 1 ,+ Out $end
$upscope $end


$scope module generate_NComps[2].equal_one_bit $end
$var wire 1 ,, Data0 $end
$var wire 1 ,- Data1 $end
$var reg 1 ,. Out $end
$upscope $end


$scope module generate_NComps[3].equal_one_bit $end
$var wire 1 ,/ Data0 $end
$var wire 1 ,0 Data1 $end
$var reg 1 ,1 Out $end
$upscope $end


$scope module generate_NComps[4].equal_one_bit $end
$var wire 1 ,2 Data0 $end
$var wire 1 ,3 Data1 $end
$var reg 1 ,4 Out $end
$upscope $end

$upscope $end


$scope module generate_hotbit_outputs[23].equal_n_bits $end
$var wire 5 'g Data0 [4:0] $end
$var wire 5 ,5 Data1 [4:0] $end
$var reg 1 ,6 Out $end
$var reg 5 ,7 Comps [4:0] $end

$scope module generate_NComps[0].equal_one_bit $end
$var wire 1 ,8 Data0 $end
$var wire 1 ,9 Data1 $end
$var reg 1 ,: Out $end
$upscope $end


$scope module generate_NComps[1].equal_one_bit $end
$var wire 1 ,; Data0 $end
$var wire 1 ,< Data1 $end
$var reg 1 ,= Out $end
$upscope $end


$scope module generate_NComps[2].equal_one_bit $end
$var wire 1 ,> Data0 $end
$var wire 1 ,? Data1 $end
$var reg 1 ,@ Out $end
$upscope $end


$scope module generate_NComps[3].equal_one_bit $end
$var wire 1 ,A Data0 $end
$var wire 1 ,B Data1 $end
$var reg 1 ,C Out $end
$upscope $end


$scope module generate_NComps[4].equal_one_bit $end
$var wire 1 ,D Data0 $end
$var wire 1 ,E Data1 $end
$var reg 1 ,F Out $end
$upscope $end

$upscope $end


$scope module generate_hotbit_outputs[24].equal_n_bits $end
$var wire 5 'g Data0 [4:0] $end
$var wire 5 ,G Data1 [4:0] $end
$var reg 1 ,H Out $end
$var reg 5 ,I Comps [4:0] $end

$scope module generate_NComps[0].equal_one_bit $end
$var wire 1 ,J Data0 $end
$var wire 1 ,K Data1 $end
$var reg 1 ,L Out $end
$upscope $end


$scope module generate_NComps[1].equal_one_bit $end
$var wire 1 ,M Data0 $end
$var wire 1 ,N Data1 $end
$var reg 1 ,O Out $end
$upscope $end


$scope module generate_NComps[2].equal_one_bit $end
$var wire 1 ,P Data0 $end
$var wire 1 ,Q Data1 $end
$var reg 1 ,R Out $end
$upscope $end


$scope module generate_NComps[3].equal_one_bit $end
$var wire 1 ,S Data0 $end
$var wire 1 ,T Data1 $end
$var reg 1 ,U Out $end
$upscope $end


$scope module generate_NComps[4].equal_one_bit $end
$var wire 1 ,V Data0 $end
$var wire 1 ,W Data1 $end
$var reg 1 ,X Out $end
$upscope $end

$upscope $end


$scope module generate_hotbit_outputs[25].equal_n_bits $end
$var wire 5 'g Data0 [4:0] $end
$var wire 5 ,Y Data1 [4:0] $end
$var reg 1 ,Z Out $end
$var reg 5 ,[ Comps [4:0] $end

$scope module generate_NComps[0].equal_one_bit $end
$var wire 1 ,\ Data0 $end
$var wire 1 ,] Data1 $end
$var reg 1 ,^ Out $end
$upscope $end


$scope module generate_NComps[1].equal_one_bit $end
$var wire 1 ,_ Data0 $end
$var wire 1 ,` Data1 $end
$var reg 1 ,a Out $end
$upscope $end


$scope module generate_NComps[2].equal_one_bit $end
$var wire 1 ,b Data0 $end
$var wire 1 ,c Data1 $end
$var reg 1 ,d Out $end
$upscope $end


$scope module generate_NComps[3].equal_one_bit $end
$var wire 1 ,e Data0 $end
$var wire 1 ,f Data1 $end
$var reg 1 ,g Out $end
$upscope $end


$scope module generate_NComps[4].equal_one_bit $end
$var wire 1 ,h Data0 $end
$var wire 1 ,i Data1 $end
$var reg 1 ,j Out $end
$upscope $end

$upscope $end


$scope module generate_hotbit_outputs[26].equal_n_bits $end
$var wire 5 'g Data0 [4:0] $end
$var wire 5 ,k Data1 [4:0] $end
$var reg 1 ,l Out $end
$var reg 5 ,m Comps [4:0] $end

$scope module generate_NComps[0].equal_one_bit $end
$var wire 1 ,n Data0 $end
$var wire 1 ,o Data1 $end
$var reg 1 ,p Out $end
$upscope $end


$scope module generate_NComps[1].equal_one_bit $end
$var wire 1 ,q Data0 $end
$var wire 1 ,r Data1 $end
$var reg 1 ,s Out $end
$upscope $end


$scope module generate_NComps[2].equal_one_bit $end
$var wire 1 ,t Data0 $end
$var wire 1 ,u Data1 $end
$var reg 1 ,v Out $end
$upscope $end


$scope module generate_NComps[3].equal_one_bit $end
$var wire 1 ,w Data0 $end
$var wire 1 ,x Data1 $end
$var reg 1 ,y Out $end
$upscope $end


$scope module generate_NComps[4].equal_one_bit $end
$var wire 1 ,z Data0 $end
$var wire 1 ,{ Data1 $end
$var reg 1 ,| Out $end
$upscope $end

$upscope $end


$scope module generate_hotbit_outputs[27].equal_n_bits $end
$var wire 5 'g Data0 [4:0] $end
$var wire 5 ,} Data1 [4:0] $end
$var reg 1 ,~ Out $end
$var reg 5 -! Comps [4:0] $end

$scope module generate_NComps[0].equal_one_bit $end
$var wire 1 -" Data0 $end
$var wire 1 -# Data1 $end
$var reg 1 -$ Out $end
$upscope $end


$scope module generate_NComps[1].equal_one_bit $end
$var wire 1 -% Data0 $end
$var wire 1 -& Data1 $end
$var reg 1 -' Out $end
$upscope $end


$scope module generate_NComps[2].equal_one_bit $end
$var wire 1 -( Data0 $end
$var wire 1 -) Data1 $end
$var reg 1 -* Out $end
$upscope $end


$scope module generate_NComps[3].equal_one_bit $end
$var wire 1 -+ Data0 $end
$var wire 1 -, Data1 $end
$var reg 1 -- Out $end
$upscope $end


$scope module generate_NComps[4].equal_one_bit $end
$var wire 1 -. Data0 $end
$var wire 1 -/ Data1 $end
$var reg 1 -0 Out $end
$upscope $end

$upscope $end


$scope module generate_hotbit_outputs[28].equal_n_bits $end
$var wire 5 'g Data0 [4:0] $end
$var wire 5 -1 Data1 [4:0] $end
$var reg 1 -2 Out $end
$var reg 5 -3 Comps [4:0] $end

$scope module generate_NComps[0].equal_one_bit $end
$var wire 1 -4 Data0 $end
$var wire 1 -5 Data1 $end
$var reg 1 -6 Out $end
$upscope $end


$scope module generate_NComps[1].equal_one_bit $end
$var wire 1 -7 Data0 $end
$var wire 1 -8 Data1 $end
$var reg 1 -9 Out $end
$upscope $end


$scope module generate_NComps[2].equal_one_bit $end
$var wire 1 -: Data0 $end
$var wire 1 -; Data1 $end
$var reg 1 -< Out $end
$upscope $end


$scope module generate_NComps[3].equal_one_bit $end
$var wire 1 -= Data0 $end
$var wire 1 -> Data1 $end
$var reg 1 -? Out $end
$upscope $end


$scope module generate_NComps[4].equal_one_bit $end
$var wire 1 -@ Data0 $end
$var wire 1 -A Data1 $end
$var reg 1 -B Out $end
$upscope $end

$upscope $end


$scope module generate_hotbit_outputs[29].equal_n_bits $end
$var wire 5 'g Data0 [4:0] $end
$var wire 5 -C Data1 [4:0] $end
$var reg 1 -D Out $end
$var reg 5 -E Comps [4:0] $end

$scope module generate_NComps[0].equal_one_bit $end
$var wire 1 -F Data0 $end
$var wire 1 -G Data1 $end
$var reg 1 -H Out $end
$upscope $end


$scope module generate_NComps[1].equal_one_bit $end
$var wire 1 -I Data0 $end
$var wire 1 -J Data1 $end
$var reg 1 -K Out $end
$upscope $end


$scope module generate_NComps[2].equal_one_bit $end
$var wire 1 -L Data0 $end
$var wire 1 -M Data1 $end
$var reg 1 -N Out $end
$upscope $end


$scope module generate_NComps[3].equal_one_bit $end
$var wire 1 -O Data0 $end
$var wire 1 -P Data1 $end
$var reg 1 -Q Out $end
$upscope $end


$scope module generate_NComps[4].equal_one_bit $end
$var wire 1 -R Data0 $end
$var wire 1 -S Data1 $end
$var reg 1 -T Out $end
$upscope $end

$upscope $end


$scope module generate_hotbit_outputs[30].equal_n_bits $end
$var wire 5 'g Data0 [4:0] $end
$var wire 5 -U Data1 [4:0] $end
$var reg 1 -V Out $end
$var reg 5 -W Comps [4:0] $end

$scope module generate_NComps[0].equal_one_bit $end
$var wire 1 -X Data0 $end
$var wire 1 -Y Data1 $end
$var reg 1 -Z Out $end
$upscope $end


$scope module generate_NComps[1].equal_one_bit $end
$var wire 1 -[ Data0 $end
$var wire 1 -\ Data1 $end
$var reg 1 -] Out $end
$upscope $end


$scope module generate_NComps[2].equal_one_bit $end
$var wire 1 -^ Data0 $end
$var wire 1 -_ Data1 $end
$var reg 1 -` Out $end
$upscope $end


$scope module generate_NComps[3].equal_one_bit $end
$var wire 1 -a Data0 $end
$var wire 1 -b Data1 $end
$var reg 1 -c Out $end
$upscope $end


$scope module generate_NComps[4].equal_one_bit $end
$var wire 1 -d Data0 $end
$var wire 1 -e Data1 $end
$var reg 1 -f Out $end
$upscope $end

$upscope $end


$scope module generate_hotbit_outputs[31].equal_n_bits $end
$var wire 5 'g Data0 [4:0] $end
$var wire 5 -g Data1 [4:0] $end
$var reg 1 -h Out $end
$var reg 5 -i Comps [4:0] $end

$scope module generate_NComps[0].equal_one_bit $end
$var wire 1 -j Data0 $end
$var wire 1 -k Data1 $end
$var reg 1 -l Out $end
$upscope $end


$scope module generate_NComps[1].equal_one_bit $end
$var wire 1 -m Data0 $end
$var wire 1 -n Data1 $end
$var reg 1 -o Out $end
$upscope $end


$scope module generate_NComps[2].equal_one_bit $end
$var wire 1 -p Data0 $end
$var wire 1 -q Data1 $end
$var reg 1 -r Out $end
$upscope $end


$scope module generate_NComps[3].equal_one_bit $end
$var wire 1 -s Data0 $end
$var wire 1 -t Data1 $end
$var reg 1 -u Out $end
$upscope $end


$scope module generate_NComps[4].equal_one_bit $end
$var wire 1 -v Data0 $end
$var wire 1 -w Data1 $end
$var reg 1 -x Out $end
$upscope $end

$upscope $end

$upscope $end


$scope module mux1 $end
$var wire 5 'e selector [4:0] $end
$var reg 64 -y Out [63:0] $end
$upscope $end


$scope module mux2 $end
$var wire 5 'f selector [4:0] $end
$var reg 64 -z Out [63:0] $end
$upscope $end


$scope module generate_registers[1].register $end
$var reg 64 -{ register [0:63] $end
$var wire 64 G writeData [0:63] $end
$var wire 1 -| writeEn $end
$var wire 1 # clk $end
$var reg 64 -} read [0:63] $end
$upscope $end


$scope module generate_registers[2].register $end
$var reg 64 -~ register [0:63] $end
$var wire 64 G writeData [0:63] $end
$var wire 1 .! writeEn $end
$var wire 1 # clk $end
$var reg 64 ." read [0:63] $end
$upscope $end


$scope module generate_registers[3].register $end
$var reg 64 .# register [0:63] $end
$var wire 64 G writeData [0:63] $end
$var wire 1 .$ writeEn $end
$var wire 1 # clk $end
$var reg 64 .% read [0:63] $end
$upscope $end


$scope module generate_registers[4].register $end
$var reg 64 .& register [0:63] $end
$var wire 64 G writeData [0:63] $end
$var wire 1 .' writeEn $end
$var wire 1 # clk $end
$var reg 64 .( read [0:63] $end
$upscope $end


$scope module generate_registers[5].register $end
$var reg 64 .) register [0:63] $end
$var wire 64 G writeData [0:63] $end
$var wire 1 .* writeEn $end
$var wire 1 # clk $end
$var reg 64 .+ read [0:63] $end
$upscope $end


$scope module generate_registers[6].register $end
$var reg 64 ., register [0:63] $end
$var wire 64 G writeData [0:63] $end
$var wire 1 .- writeEn $end
$var wire 1 # clk $end
$var reg 64 .. read [0:63] $end
$upscope $end


$scope module generate_registers[7].register $end
$var reg 64 ./ register [0:63] $end
$var wire 64 G writeData [0:63] $end
$var wire 1 .0 writeEn $end
$var wire 1 # clk $end
$var reg 64 .1 read [0:63] $end
$upscope $end


$scope module generate_registers[8].register $end
$var reg 64 .2 register [0:63] $end
$var wire 64 G writeData [0:63] $end
$var wire 1 .3 writeEn $end
$var wire 1 # clk $end
$var reg 64 .4 read [0:63] $end
$upscope $end


$scope module generate_registers[9].register $end
$var reg 64 .5 register [0:63] $end
$var wire 64 G writeData [0:63] $end
$var wire 1 .6 writeEn $end
$var wire 1 # clk $end
$var reg 64 .7 read [0:63] $end
$upscope $end


$scope module generate_registers[10].register $end
$var reg 64 .8 register [0:63] $end
$var wire 64 G writeData [0:63] $end
$var wire 1 .9 writeEn $end
$var wire 1 # clk $end
$var reg 64 .: read [0:63] $end
$upscope $end


$scope module generate_registers[11].register $end
$var reg 64 .; register [0:63] $end
$var wire 64 G writeData [0:63] $end
$var wire 1 .< writeEn $end
$var wire 1 # clk $end
$var reg 64 .= read [0:63] $end
$upscope $end


$scope module generate_registers[12].register $end
$var reg 64 .> register [0:63] $end
$var wire 64 G writeData [0:63] $end
$var wire 1 .? writeEn $end
$var wire 1 # clk $end
$var reg 64 .@ read [0:63] $end
$upscope $end


$scope module generate_registers[13].register $end
$var reg 64 .A register [0:63] $end
$var wire 64 G writeData [0:63] $end
$var wire 1 .B writeEn $end
$var wire 1 # clk $end
$var reg 64 .C read [0:63] $end
$upscope $end


$scope module generate_registers[14].register $end
$var reg 64 .D register [0:63] $end
$var wire 64 G writeData [0:63] $end
$var wire 1 .E writeEn $end
$var wire 1 # clk $end
$var reg 64 .F read [0:63] $end
$upscope $end


$scope module generate_registers[15].register $end
$var reg 64 .G register [0:63] $end
$var wire 64 G writeData [0:63] $end
$var wire 1 .H writeEn $end
$var wire 1 # clk $end
$var reg 64 .I read [0:63] $end
$upscope $end


$scope module generate_registers[16].register $end
$var reg 64 .J register [0:63] $end
$var wire 64 G writeData [0:63] $end
$var wire 1 .K writeEn $end
$var wire 1 # clk $end
$var reg 64 .L read [0:63] $end
$upscope $end


$scope module generate_registers[17].register $end
$var reg 64 .M register [0:63] $end
$var wire 64 G writeData [0:63] $end
$var wire 1 .N writeEn $end
$var wire 1 # clk $end
$var reg 64 .O read [0:63] $end
$upscope $end


$scope module generate_registers[18].register $end
$var reg 64 .P register [0:63] $end
$var wire 64 G writeData [0:63] $end
$var wire 1 .Q writeEn $end
$var wire 1 # clk $end
$var reg 64 .R read [0:63] $end
$upscope $end


$scope module generate_registers[19].register $end
$var reg 64 .S register [0:63] $end
$var wire 64 G writeData [0:63] $end
$var wire 1 .T writeEn $end
$var wire 1 # clk $end
$var reg 64 .U read [0:63] $end
$upscope $end


$scope module generate_registers[20].register $end
$var reg 64 .V register [0:63] $end
$var wire 64 G writeData [0:63] $end
$var wire 1 .W writeEn $end
$var wire 1 # clk $end
$var reg 64 .X read [0:63] $end
$upscope $end


$scope module generate_registers[21].register $end
$var reg 64 .Y register [0:63] $end
$var wire 64 G writeData [0:63] $end
$var wire 1 .Z writeEn $end
$var wire 1 # clk $end
$var reg 64 .[ read [0:63] $end
$upscope $end


$scope module generate_registers[22].register $end
$var reg 64 .\ register [0:63] $end
$var wire 64 G writeData [0:63] $end
$var wire 1 .] writeEn $end
$var wire 1 # clk $end
$var reg 64 .^ read [0:63] $end
$upscope $end


$scope module generate_registers[23].register $end
$var reg 64 ._ register [0:63] $end
$var wire 64 G writeData [0:63] $end
$var wire 1 .` writeEn $end
$var wire 1 # clk $end
$var reg 64 .a read [0:63] $end
$upscope $end


$scope module generate_registers[24].register $end
$var reg 64 .b register [0:63] $end
$var wire 64 G writeData [0:63] $end
$var wire 1 .c writeEn $end
$var wire 1 # clk $end
$var reg 64 .d read [0:63] $end
$upscope $end


$scope module generate_registers[25].register $end
$var reg 64 .e register [0:63] $end
$var wire 64 G writeData [0:63] $end
$var wire 1 .f writeEn $end
$var wire 1 # clk $end
$var reg 64 .g read [0:63] $end
$upscope $end


$scope module generate_registers[26].register $end
$var reg 64 .h register [0:63] $end
$var wire 64 G writeData [0:63] $end
$var wire 1 .i writeEn $end
$var wire 1 # clk $end
$var reg 64 .j read [0:63] $end
$upscope $end


$scope module generate_registers[27].register $end
$var reg 64 .k register [0:63] $end
$var wire 64 G writeData [0:63] $end
$var wire 1 .l writeEn $end
$var wire 1 # clk $end
$var reg 64 .m read [0:63] $end
$upscope $end


$scope module generate_registers[28].register $end
$var reg 64 .n register [0:63] $end
$var wire 64 G writeData [0:63] $end
$var wire 1 .o writeEn $end
$var wire 1 # clk $end
$var reg 64 .p read [0:63] $end
$upscope $end


$scope module generate_registers[29].register $end
$var reg 64 .q register [0:63] $end
$var wire 64 G writeData [0:63] $end
$var wire 1 .r writeEn $end
$var wire 1 # clk $end
$var reg 64 .s read [0:63] $end
$upscope $end


$scope module generate_registers[30].register $end
$var reg 64 .t register [0:63] $end
$var wire 64 G writeData [0:63] $end
$var wire 1 .u writeEn $end
$var wire 1 # clk $end
$var reg 64 .v read [0:63] $end
$upscope $end


$scope module generate_registers[31].register $end
$var reg 64 .w register [0:63] $end
$var wire 64 G writeData [0:63] $end
$var wire 1 .x writeEn $end
$var wire 1 # clk $end
$var reg 64 .y read [0:63] $end
$upscope $end

$upscope $end


$scope module ALUScrMux $end
$var wire 1 + selector [0:0] $end
$var reg 64 .z Out [63:0] $end
$upscope $end


$scope module alu $end
$var wire 64 D SrcA [63:0] $end
$var wire 64 E SrcB [63:0] $end
$var wire 2 & ALUControl [1:0] $end
$var reg 64 .{ ALUResult [63:0] $end
$var reg 4 .| ALUFlags [3:0] $end
$var wire 64 .} mux2_output [63:0] $end
$var wire 64 .~ mux4_output [63:0] $end
$var wire 1 /! cout $end

$scope module mux2 $end
$var wire 1 /" selector [0:0] $end
$var reg 64 /# Out [63:0] $end
$upscope $end


$scope module sum $end
$var wire 64 D a [63:0] $end
$var wire 64 .} b [63:0] $end
$var wire 1 /$ cin $end
$var reg 64 /% sum [63:0] $end
$var reg 1 /& cout $end
$var reg 64 /' cs [63:0] $end

$scope module firstAdd $end
$var wire 1 /( a $end
$var wire 1 /) b $end
$var wire 1 /$ cin $end
$var reg 1 /* sum $end
$var reg 1 /+ cout $end
$upscope $end


$scope module adderLoop[1].adder $end
$var wire 1 /, a $end
$var wire 1 /- b $end
$var wire 1 /. cin $end
$var reg 1 // sum $end
$var reg 1 /0 cout $end
$upscope $end


$scope module adderLoop[2].adder $end
$var wire 1 /1 a $end
$var wire 1 /2 b $end
$var wire 1 /3 cin $end
$var reg 1 /4 sum $end
$var reg 1 /5 cout $end
$upscope $end


$scope module adderLoop[3].adder $end
$var wire 1 /6 a $end
$var wire 1 /7 b $end
$var wire 1 /8 cin $end
$var reg 1 /9 sum $end
$var reg 1 /: cout $end
$upscope $end


$scope module adderLoop[4].adder $end
$var wire 1 /; a $end
$var wire 1 /< b $end
$var wire 1 /= cin $end
$var reg 1 /> sum $end
$var reg 1 /? cout $end
$upscope $end


$scope module adderLoop[5].adder $end
$var wire 1 /@ a $end
$var wire 1 /A b $end
$var wire 1 /B cin $end
$var reg 1 /C sum $end
$var reg 1 /D cout $end
$upscope $end


$scope module adderLoop[6].adder $end
$var wire 1 /E a $end
$var wire 1 /F b $end
$var wire 1 /G cin $end
$var reg 1 /H sum $end
$var reg 1 /I cout $end
$upscope $end


$scope module adderLoop[7].adder $end
$var wire 1 /J a $end
$var wire 1 /K b $end
$var wire 1 /L cin $end
$var reg 1 /M sum $end
$var reg 1 /N cout $end
$upscope $end


$scope module adderLoop[8].adder $end
$var wire 1 /O a $end
$var wire 1 /P b $end
$var wire 1 /Q cin $end
$var reg 1 /R sum $end
$var reg 1 /S cout $end
$upscope $end


$scope module adderLoop[9].adder $end
$var wire 1 /T a $end
$var wire 1 /U b $end
$var wire 1 /V cin $end
$var reg 1 /W sum $end
$var reg 1 /X cout $end
$upscope $end


$scope module adderLoop[10].adder $end
$var wire 1 /Y a $end
$var wire 1 /Z b $end
$var wire 1 /[ cin $end
$var reg 1 /\ sum $end
$var reg 1 /] cout $end
$upscope $end


$scope module adderLoop[11].adder $end
$var wire 1 /^ a $end
$var wire 1 /_ b $end
$var wire 1 /` cin $end
$var reg 1 /a sum $end
$var reg 1 /b cout $end
$upscope $end


$scope module adderLoop[12].adder $end
$var wire 1 /c a $end
$var wire 1 /d b $end
$var wire 1 /e cin $end
$var reg 1 /f sum $end
$var reg 1 /g cout $end
$upscope $end


$scope module adderLoop[13].adder $end
$var wire 1 /h a $end
$var wire 1 /i b $end
$var wire 1 /j cin $end
$var reg 1 /k sum $end
$var reg 1 /l cout $end
$upscope $end


$scope module adderLoop[14].adder $end
$var wire 1 /m a $end
$var wire 1 /n b $end
$var wire 1 /o cin $end
$var reg 1 /p sum $end
$var reg 1 /q cout $end
$upscope $end


$scope module adderLoop[15].adder $end
$var wire 1 /r a $end
$var wire 1 /s b $end
$var wire 1 /t cin $end
$var reg 1 /u sum $end
$var reg 1 /v cout $end
$upscope $end


$scope module adderLoop[16].adder $end
$var wire 1 /w a $end
$var wire 1 /x b $end
$var wire 1 /y cin $end
$var reg 1 /z sum $end
$var reg 1 /{ cout $end
$upscope $end


$scope module adderLoop[17].adder $end
$var wire 1 /| a $end
$var wire 1 /} b $end
$var wire 1 /~ cin $end
$var reg 1 0! sum $end
$var reg 1 0" cout $end
$upscope $end


$scope module adderLoop[18].adder $end
$var wire 1 0# a $end
$var wire 1 0$ b $end
$var wire 1 0% cin $end
$var reg 1 0& sum $end
$var reg 1 0' cout $end
$upscope $end


$scope module adderLoop[19].adder $end
$var wire 1 0( a $end
$var wire 1 0) b $end
$var wire 1 0* cin $end
$var reg 1 0+ sum $end
$var reg 1 0, cout $end
$upscope $end


$scope module adderLoop[20].adder $end
$var wire 1 0- a $end
$var wire 1 0. b $end
$var wire 1 0/ cin $end
$var reg 1 00 sum $end
$var reg 1 01 cout $end
$upscope $end


$scope module adderLoop[21].adder $end
$var wire 1 02 a $end
$var wire 1 03 b $end
$var wire 1 04 cin $end
$var reg 1 05 sum $end
$var reg 1 06 cout $end
$upscope $end


$scope module adderLoop[22].adder $end
$var wire 1 07 a $end
$var wire 1 08 b $end
$var wire 1 09 cin $end
$var reg 1 0: sum $end
$var reg 1 0; cout $end
$upscope $end


$scope module adderLoop[23].adder $end
$var wire 1 0< a $end
$var wire 1 0= b $end
$var wire 1 0> cin $end
$var reg 1 0? sum $end
$var reg 1 0@ cout $end
$upscope $end


$scope module adderLoop[24].adder $end
$var wire 1 0A a $end
$var wire 1 0B b $end
$var wire 1 0C cin $end
$var reg 1 0D sum $end
$var reg 1 0E cout $end
$upscope $end


$scope module adderLoop[25].adder $end
$var wire 1 0F a $end
$var wire 1 0G b $end
$var wire 1 0H cin $end
$var reg 1 0I sum $end
$var reg 1 0J cout $end
$upscope $end


$scope module adderLoop[26].adder $end
$var wire 1 0K a $end
$var wire 1 0L b $end
$var wire 1 0M cin $end
$var reg 1 0N sum $end
$var reg 1 0O cout $end
$upscope $end


$scope module adderLoop[27].adder $end
$var wire 1 0P a $end
$var wire 1 0Q b $end
$var wire 1 0R cin $end
$var reg 1 0S sum $end
$var reg 1 0T cout $end
$upscope $end


$scope module adderLoop[28].adder $end
$var wire 1 0U a $end
$var wire 1 0V b $end
$var wire 1 0W cin $end
$var reg 1 0X sum $end
$var reg 1 0Y cout $end
$upscope $end


$scope module adderLoop[29].adder $end
$var wire 1 0Z a $end
$var wire 1 0[ b $end
$var wire 1 0\ cin $end
$var reg 1 0] sum $end
$var reg 1 0^ cout $end
$upscope $end


$scope module adderLoop[30].adder $end
$var wire 1 0_ a $end
$var wire 1 0` b $end
$var wire 1 0a cin $end
$var reg 1 0b sum $end
$var reg 1 0c cout $end
$upscope $end


$scope module adderLoop[31].adder $end
$var wire 1 0d a $end
$var wire 1 0e b $end
$var wire 1 0f cin $end
$var reg 1 0g sum $end
$var reg 1 0h cout $end
$upscope $end


$scope module adderLoop[32].adder $end
$var wire 1 0i a $end
$var wire 1 0j b $end
$var wire 1 0k cin $end
$var reg 1 0l sum $end
$var reg 1 0m cout $end
$upscope $end


$scope module adderLoop[33].adder $end
$var wire 1 0n a $end
$var wire 1 0o b $end
$var wire 1 0p cin $end
$var reg 1 0q sum $end
$var reg 1 0r cout $end
$upscope $end


$scope module adderLoop[34].adder $end
$var wire 1 0s a $end
$var wire 1 0t b $end
$var wire 1 0u cin $end
$var reg 1 0v sum $end
$var reg 1 0w cout $end
$upscope $end


$scope module adderLoop[35].adder $end
$var wire 1 0x a $end
$var wire 1 0y b $end
$var wire 1 0z cin $end
$var reg 1 0{ sum $end
$var reg 1 0| cout $end
$upscope $end


$scope module adderLoop[36].adder $end
$var wire 1 0} a $end
$var wire 1 0~ b $end
$var wire 1 1! cin $end
$var reg 1 1" sum $end
$var reg 1 1# cout $end
$upscope $end


$scope module adderLoop[37].adder $end
$var wire 1 1$ a $end
$var wire 1 1% b $end
$var wire 1 1& cin $end
$var reg 1 1' sum $end
$var reg 1 1( cout $end
$upscope $end


$scope module adderLoop[38].adder $end
$var wire 1 1) a $end
$var wire 1 1* b $end
$var wire 1 1+ cin $end
$var reg 1 1, sum $end
$var reg 1 1- cout $end
$upscope $end


$scope module adderLoop[39].adder $end
$var wire 1 1. a $end
$var wire 1 1/ b $end
$var wire 1 10 cin $end
$var reg 1 11 sum $end
$var reg 1 12 cout $end
$upscope $end


$scope module adderLoop[40].adder $end
$var wire 1 13 a $end
$var wire 1 14 b $end
$var wire 1 15 cin $end
$var reg 1 16 sum $end
$var reg 1 17 cout $end
$upscope $end


$scope module adderLoop[41].adder $end
$var wire 1 18 a $end
$var wire 1 19 b $end
$var wire 1 1: cin $end
$var reg 1 1; sum $end
$var reg 1 1< cout $end
$upscope $end


$scope module adderLoop[42].adder $end
$var wire 1 1= a $end
$var wire 1 1> b $end
$var wire 1 1? cin $end
$var reg 1 1@ sum $end
$var reg 1 1A cout $end
$upscope $end


$scope module adderLoop[43].adder $end
$var wire 1 1B a $end
$var wire 1 1C b $end
$var wire 1 1D cin $end
$var reg 1 1E sum $end
$var reg 1 1F cout $end
$upscope $end


$scope module adderLoop[44].adder $end
$var wire 1 1G a $end
$var wire 1 1H b $end
$var wire 1 1I cin $end
$var reg 1 1J sum $end
$var reg 1 1K cout $end
$upscope $end


$scope module adderLoop[45].adder $end
$var wire 1 1L a $end
$var wire 1 1M b $end
$var wire 1 1N cin $end
$var reg 1 1O sum $end
$var reg 1 1P cout $end
$upscope $end


$scope module adderLoop[46].adder $end
$var wire 1 1Q a $end
$var wire 1 1R b $end
$var wire 1 1S cin $end
$var reg 1 1T sum $end
$var reg 1 1U cout $end
$upscope $end


$scope module adderLoop[47].adder $end
$var wire 1 1V a $end
$var wire 1 1W b $end
$var wire 1 1X cin $end
$var reg 1 1Y sum $end
$var reg 1 1Z cout $end
$upscope $end


$scope module adderLoop[48].adder $end
$var wire 1 1[ a $end
$var wire 1 1\ b $end
$var wire 1 1] cin $end
$var reg 1 1^ sum $end
$var reg 1 1_ cout $end
$upscope $end


$scope module adderLoop[49].adder $end
$var wire 1 1` a $end
$var wire 1 1a b $end
$var wire 1 1b cin $end
$var reg 1 1c sum $end
$var reg 1 1d cout $end
$upscope $end


$scope module adderLoop[50].adder $end
$var wire 1 1e a $end
$var wire 1 1f b $end
$var wire 1 1g cin $end
$var reg 1 1h sum $end
$var reg 1 1i cout $end
$upscope $end


$scope module adderLoop[51].adder $end
$var wire 1 1j a $end
$var wire 1 1k b $end
$var wire 1 1l cin $end
$var reg 1 1m sum $end
$var reg 1 1n cout $end
$upscope $end


$scope module adderLoop[52].adder $end
$var wire 1 1o a $end
$var wire 1 1p b $end
$var wire 1 1q cin $end
$var reg 1 1r sum $end
$var reg 1 1s cout $end
$upscope $end


$scope module adderLoop[53].adder $end
$var wire 1 1t a $end
$var wire 1 1u b $end
$var wire 1 1v cin $end
$var reg 1 1w sum $end
$var reg 1 1x cout $end
$upscope $end


$scope module adderLoop[54].adder $end
$var wire 1 1y a $end
$var wire 1 1z b $end
$var wire 1 1{ cin $end
$var reg 1 1| sum $end
$var reg 1 1} cout $end
$upscope $end


$scope module adderLoop[55].adder $end
$var wire 1 1~ a $end
$var wire 1 2! b $end
$var wire 1 2" cin $end
$var reg 1 2# sum $end
$var reg 1 2$ cout $end
$upscope $end


$scope module adderLoop[56].adder $end
$var wire 1 2% a $end
$var wire 1 2& b $end
$var wire 1 2' cin $end
$var reg 1 2( sum $end
$var reg 1 2) cout $end
$upscope $end


$scope module adderLoop[57].adder $end
$var wire 1 2* a $end
$var wire 1 2+ b $end
$var wire 1 2, cin $end
$var reg 1 2- sum $end
$var reg 1 2. cout $end
$upscope $end


$scope module adderLoop[58].adder $end
$var wire 1 2/ a $end
$var wire 1 20 b $end
$var wire 1 21 cin $end
$var reg 1 22 sum $end
$var reg 1 23 cout $end
$upscope $end


$scope module adderLoop[59].adder $end
$var wire 1 24 a $end
$var wire 1 25 b $end
$var wire 1 26 cin $end
$var reg 1 27 sum $end
$var reg 1 28 cout $end
$upscope $end


$scope module adderLoop[60].adder $end
$var wire 1 29 a $end
$var wire 1 2: b $end
$var wire 1 2; cin $end
$var reg 1 2< sum $end
$var reg 1 2= cout $end
$upscope $end


$scope module adderLoop[61].adder $end
$var wire 1 2> a $end
$var wire 1 2? b $end
$var wire 1 2@ cin $end
$var reg 1 2A sum $end
$var reg 1 2B cout $end
$upscope $end


$scope module adderLoop[62].adder $end
$var wire 1 2C a $end
$var wire 1 2D b $end
$var wire 1 2E cin $end
$var reg 1 2F sum $end
$var reg 1 2G cout $end
$upscope $end


$scope module adderLoop[63].adder $end
$var wire 1 2H a $end
$var wire 1 2I b $end
$var wire 1 2J cin $end
$var reg 1 2K sum $end
$var reg 1 2L cout $end
$upscope $end

$upscope $end


$scope module mux4 $end
$var wire 2 & selector [1:0] $end
$var reg 64 2M Out [63:0] $end
$upscope $end

$upscope $end


$scope module mem $end
$var wire 10 2N address [0:9] $end
$var wire 64 2O writeData [0:63] $end
$var wire 1 ( writeEn $end
$var wire 1 # clk $end
$var reg 64 2P readData [0:63] $end
$upscope $end


$scope module WBMuxMux $end
$var wire 1 * selector [0:0] $end
$var reg 64 2Q Out [63:0] $end
$upscope $end

$upscope $end

$upscope $end

$upscope $end

$enddefinitions $end

#0
$dumpvars
0+
0)
0*
0(
0'
1!
03
01
02
00
0/
0<
0:
0;
09
08
x6
1"
0I
0'a
x/"
x.K
x-|
x.N
x.!
x.Q
x.$
x.T
x.'
x.W
x.*
x.Z
x.-
x.]
x.0
x.`
x.3
x.c
x.6
x.f
x.9
x.i
x.<
x.l
x.?
x.o
x.B
x.r
x.E
x.u
x.H
x.x
1#
1$
1J
bxxxx H
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx .{
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx .z
b0000000000000000000000000000000000000000000000000000000000000000 ,
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx %
bxxxxxxxxxxxx >
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx -y
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 'b
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx K
b0000000000000000000000000000000000000000000000000000000000000000 L
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx B
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx E
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 2Q
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx G
bxxxx .|
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /#
b00 .
b0000000000000000000000000000000000000000000000000000000000000000 -
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx A
b00 7
b0000000000000000000000000000000000000000000000000000000000000000 .:
b0000000000000000000000000000000000000000000000000000000000000000 .8
b0000000000000000000000000000000000000000000000000000000000000000 .=
b0000000000000000000000000000000000000000000000000000000000000000 .;
b0000000000000000000000000000000000000000000000000000000000000000 .@
b0000000000000000000000000000000000000000000000000000000000000000 .>
b0000000000000000000000000000000000000000000000000000000000000000 .C
b0000000000000000000000000000000000000000000000000000000000000000 .A
b0000000000000000000000000000000000000000000000000000000000000000 .F
b0000000000000000000000000000000000000000000000000000000000000000 .D
b0000000000000000000000000000000000000000000000000000000000000000 .I
b0000000000000000000000000000000000000000000000000000000000000000 .G
b0000000000000000000000000000000000000000000000000000000000000000 .L
b0000000000000000000000000000000000000000000000000000000000000000 .J
b0000000000000000000000000000000000000000000000000000000000000000 .O
b0000000000000000000000000000000000000000000000000000000000000000 .M
b0000000000000000000000000000000000000000000000000000000000000000 .R
b0000000000000000000000000000000000000000000000000000000000000000 .P
b0000000000000000000000000000000000000000000000000000000000000000 .U
b0000000000000000000000000000000000000000000000000000000000000000 .S
b0000000000000000000000000000000000000000000000000000000000000000 .X
b0000000000000000000000000000000000000000000000000000000000000000 .V
b0000000000000000000000000000000000000000000000000000000000000000 .[
b0000000000000000000000000000000000000000000000000000000000000000 .Y
b0000000000000000000000000000000000000000000000000000000000000000 .^
b0000000000000000000000000000000000000000000000000000000000000000 .\
b0000000000000000000000000000000000000000000000000000000000000000 .a
b0000000000000000000000000000000000000000000000000000000000000000 ._
b0000000000000000000000000000000000000000000000000000000000000000 .d
b0000000000000000000000000000000000000000000000000000000000000000 .b
b0000000000000000000000000000000000000000000000000000000000000000 .g
b0000000000000000000000000000000000000000000000000000000000000000 .e
b0000000000000000000000000000000000000000000000000000000000000000 .j
b0000000000000000000000000000000000000000000000000000000000000000 .h
b0000000000000000000000000000000000000000000000000000000000000000 .m
b0000000000000000000000000000000000000000000000000000000000000000 .k
b0000000000000000000000000000000000000000000000000000000000000000 .p
b0000000000000000000000000000000000000000000000000000000000000000 .n
b0000000000000000000000000000000000000000000000000000000000000000 .s
b0000000000000000000000000000000000000000000000000000000000000000 .q
b0000000000000000000000000000000000000000000000000000000000000000 ."
b0000000000000000000000000000000000000000000000000000000000000000 -~
b0000000000000000000000000000000000000000000000000000000000000000 .v
b0000000000000000000000000000000000000000000000000000000000000000 .t
b0000000000000000000000000000000000000000000000000000000000000000 .y
b0000000000000000000000000000000000000000000000000000000000000000 .w
b0000000000000000000000000000000000000000000000000000000000000000 .%
b0000000000000000000000000000000000000000000000000000000000000000 .#
b0000000000000000000000000000000000000000000000000000000000000000 .(
b0000000000000000000000000000000000000000000000000000000000000000 .&
b0000000000000000000000000000000000000000000000000000000000000000 .+
b0000000000000000000000000000000000000000000000000000000000000000 .)
b0000000000000000000000000000000000000000000000000000000000000000 ..
b0000000000000000000000000000000000000000000000000000000000000000 .,
b0000000000000000000000000000000000000000000000000000000000000000 .1
b0000000000000000000000000000000000000000000000000000000000000000 ./
b0000000000000000000000000000000000000000000000000000000000000000 .4
b0000000000000000000000000000000000000000000000000000000000000000 .2
b0000000000000000000000000000000000000000000000000000000000000000 .7
b0000000000000000000000000000000000000000000000000000000000000000 .5
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 'l
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 'j
b0000000000000000000000000000000000000000000000000000000000000000 @
bxxxxx =
bxxxxxxxxxx 'c
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 'd
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx -z
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 2M
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx .~
b0000000000000000000000000000000000000000000000000000000000000000 $w
b0000000000000000000000000000000000000000000000000000000000000000 -}
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 'h
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 'i
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 2P
b0000000000000000000000000000000z 'k
b0000000000000000000000000000000000000000000000000000000000000000 -{
bxxx 5
bxxxxx ?
bxxxxx 4
bxxxxx 'f
bxxxxx 'e
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx Q
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx O
b0000000000000000000000000000000000000000000000000000000000000000 ${
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx $y
x'{
x'x
x'u
x'r
x'p
x's
x'v
x'y
x'|
x'q
x't
x'w
x'z
x'}
x'~
bxxxxx 'o
x(/
x(,
x()
x(&
x($
x('
x(*
x(-
x(0
x(%
x((
x(+
x(.
x(1
x(2
bxxxxx (#
x(A
x(>
x(;
x(8
x(6
x(9
x(<
x(?
x(B
x(7
x(:
x(=
x(@
x(C
x(D
bxxxxx (5
x(S
x(P
x(M
x(J
x(H
x(K
x(N
x(Q
x(T
x(I
x(L
x(O
x(R
x(U
x(V
bxxxxx (G
x(e
x(b
x(_
x(\
x(Z
x(]
x(`
x(c
x(f
x([
x(^
x(a
x(d
x(g
x(h
bxxxxx (Y
x(w
x(t
x(q
x(n
x(l
x(o
x(r
x(u
x(x
x(m
x(p
x(s
x(v
x(y
x(z
bxxxxx (k
x)+
x)(
x)%
x)"
x(~
x)#
x)&
x))
x),
x)!
x)$
x)'
x)*
x)-
x).
bxxxxx (}
x)=
x):
x)7
x)4
x)2
x)5
x)8
x);
x)>
x)3
x)6
x)9
x)<
x)?
x)@
bxxxxx )1
x)O
x)L
x)I
x)F
x)D
x)G
x)J
x)M
x)P
x)E
x)H
x)K
x)N
x)Q
x)R
bxxxxx )C
x)a
x)^
x)[
x)X
x)V
x)Y
x)\
x)_
x)b
x)W
x)Z
x)]
x)`
x)c
x)d
bxxxxx )U
x)s
x)p
x)m
x)j
x)h
x)k
x)n
x)q
x)t
x)i
x)l
x)o
x)r
x)u
x)v
bxxxxx )g
x*'
x*$
x*!
x)|
x)z
x)}
x*"
x*%
x*(
x){
x)~
x*#
x*&
x*)
x**
bxxxxx )y
x*9
x*6
x*3
x*0
x*.
x*1
x*4
x*7
x*:
x*/
x*2
x*5
x*8
x*;
x*<
bxxxxx *-
x*K
x*H
x*E
x*B
x*@
x*C
x*F
x*I
x*L
x*A
x*D
x*G
x*J
x*M
x*N
bxxxxx *?
x*]
x*Z
x*W
x*T
x*R
x*U
x*X
x*[
x*^
x*S
x*V
x*Y
x*\
x*_
x*`
bxxxxx *Q
x*o
x*l
x*i
x*f
x*d
x*g
x*j
x*m
x*p
x*e
x*h
x*k
x*n
x*q
x*r
bxxxxx *c
x+#
x*~
x*{
x*x
x*v
x*y
x*|
x+!
x+$
x*w
x*z
x*}
x+"
x+%
x+&
bxxxxx *u
x+5
x+2
x+/
x+,
x+*
x+-
x+0
x+3
x+6
x++
x+.
x+1
x+4
x+7
x+8
bxxxxx +)
x+G
x+D
x+A
x+>
x+<
x+?
x+B
x+E
x+H
x+=
x+@
x+C
x+F
x+I
x+J
bxxxxx +;
x+Y
x+V
x+S
x+P
x+N
x+Q
x+T
x+W
x+Z
x+O
x+R
x+U
x+X
x+[
x+\
bxxxxx +M
x+k
x+h
x+e
x+b
x+`
x+c
x+f
x+i
x+l
x+a
x+d
x+g
x+j
x+m
x+n
bxxxxx +_
x+}
x+z
x+w
x+t
x+r
x+u
x+x
x+{
x+~
x+s
x+v
x+y
x+|
x,!
x,"
bxxxxx +q
x,1
x,.
x,+
x,(
x,&
x,)
x,,
x,/
x,2
x,'
x,*
x,-
x,0
x,3
x,4
bxxxxx ,%
x,C
x,@
x,=
x,:
x,8
x,;
x,>
x,A
x,D
x,9
x,<
x,?
x,B
x,E
x,F
bxxxxx ,7
x,U
x,R
x,O
x,L
x,J
x,M
x,P
x,S
x,V
x,K
x,N
x,Q
x,T
x,W
x,X
bxxxxx ,I
x,g
x,d
x,a
x,^
x,\
x,_
x,b
x,e
x,h
x,]
x,`
x,c
x,f
x,i
x,j
bxxxxx ,[
x,y
x,v
x,s
x,p
x,n
x,q
x,t
x,w
x,z
x,o
x,r
x,u
x,x
x,{
x,|
bxxxxx ,m
x--
x-*
x-'
x-$
x-"
x-%
x-(
x-+
x-.
x-#
x-&
x-)
x-,
x-/
x-0
bxxxxx -!
x-?
x-<
x-9
x-6
x-4
x-7
x-:
x-=
x-@
x-5
x-8
x-;
x->
x-A
x-B
bxxxxx -3
x-Q
x-N
x-K
x-H
x-F
x-I
x-L
x-O
x-R
x-G
x-J
x-M
x-P
x-S
x-T
bxxxxx -E
x-c
x-`
x-]
x-Z
x-X
x-[
x-^
x-a
x-d
x-Y
x-\
x-_
x-b
x-e
x-f
bxxxxx -W
x-u
x-r
x-o
x-l
x-j
x-m
x-p
x-s
x-v
x-k
x-n
x-q
x-t
x-w
x-x
bxxxxx -i
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /'
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /%
0/$
x2H
bxxxxxxxxxx 2N
xR
1S
xV
0W
x[
0\
x`
0a
xe
0f
xj
0k
xo
0p
xt
0u
xy
0z
x~
0"!
x"%
0"&
x"*
0"+
x"/
0"0
x"4
0"5
x"9
0":
x">
0"?
x"C
0"D
x"H
0"I
x"M
0"N
x"R
0"S
x"W
0"X
x"\
0"]
x"a
0"b
x"f
0"g
x"k
0"l
x"p
0"q
x"u
0"v
x"z
0"{
x#!
0#"
x#&
0#'
x#+
0#,
x#0
0#1
x#5
0#6
x#:
0#;
x#?
0#@
x#D
0#E
x#I
0#J
x#N
0#O
x#S
0#T
x#X
0#Y
x#]
0#^
x#b
0#c
x#g
0#h
x#l
0#m
x#q
0#r
x#v
0#w
x#{
0#|
x$"
0$#
x$'
0$(
x$,
0$-
x$1
0$2
x$6
0$7
x$;
0$<
x$@
0$A
x$E
0$F
x$J
0$K
x$O
0$P
x$T
0$U
x$Y
0$Z
x$^
0$_
x$c
0$d
x$h
0$i
x$m
0$n
x$r
0$s
0$|
0%!
0%%
0%)
0%-
0%1
0%5
0%9
0%=
0%A
0%E
0%I
0%M
0%Q
0%U
0%Y
0%]
0%a
0%e
0%i
0%m
0%q
0%u
0%y
0%}
0&#
0&'
0&+
0&/
0&3
0&7
0&;
0&?
0&C
0&G
0&K
0&O
0&S
0&W
0&[
0&_
0&c
0&g
0&k
0&o
0&s
0&w
0&{
0'!
0'%
0')
0'-
0'1
0'5
0'9
0'=
0'A
0'E
0'I
0'M
0'Q
0'U
0'Y
0']
x/(
x/)
x/,
x/-
x/1
x/2
x/6
x/7
x/;
x/<
x/@
x/A
x/E
x/F
x/J
x/K
x/O
x/P
x/T
x/U
x/Y
x/Z
x/^
x/_
x/c
x/d
x/h
x/i
x/m
x/n
x/r
x/s
x/w
x/x
x/|
x/}
x0#
x0$
x0(
x0)
x0-
x0.
x02
x03
x07
x08
x0<
x0=
x0A
x0B
x0F
x0G
x0K
x0L
x0P
x0Q
x0U
x0V
x0Z
x0[
x0_
x0`
x0d
x0e
x0i
x0j
x0n
x0o
x0s
x0t
x0x
x0y
x0}
x0~
x1$
x1%
x1)
x1*
x1.
x1/
x13
x14
x18
x19
x1=
x1>
x1B
x1C
x1G
x1H
x1L
x1M
x1Q
x1R
x1V
x1W
x1[
x1\
x1`
x1a
x1e
x1f
x1j
x1k
x1o
x1p
x1t
x1u
x1y
x1z
x1~
x2!
x2%
x2&
x2*
x2+
x2/
x20
x24
x25
x29
x2:
x2>
x2?
x2C
x2D
x2I
xP
0$z
x'n
x("
x(4
x(F
x(X
x(j
x(|
x)0
x)B
x)T
x)f
x)x
x*,
x*>
x*P
x*b
x*t
x+(
x+:
x+L
x+^
x+p
x,$
x,6
x,H
x,Z
x,l
x,~
x-2
x-D
x-V
x-h
x/&
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 2O
b00 &
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx D
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx C
b0000000000000000000000000000000000000000000000000000000000000000 F
bxxxxx 'g
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx .}
x/!
b0000000000000000000000000000000000000000000000000000000000000001 M
b00000 'm
b00001 (!
b00010 (3
b00011 (E
b00100 (W
b00101 (i
b00110 ({
b00111 )/
b01000 )A
b01001 )S
b01010 )e
b01011 )w
b01100 *+
b01101 *=
b01110 *O
b01111 *a
b10000 *s
b10001 +'
b10010 +9
b10011 +K
b10100 +]
b10101 +o
b10110 ,#
b10111 ,5
b11000 ,G
b11001 ,Y
b11010 ,k
b11011 ,}
b11100 -1
b11101 -C
b11110 -U
b11111 -g
0N
0$x
x$v
x$u
x$q
x$p
x$l
x$k
x$g
x$f
x$b
x$a
x$]
x$\
x$X
x$W
x$S
x$R
x$N
x$M
x$I
x$H
x$D
x$C
x$?
x$>
x$:
x$9
x$5
x$4
x$0
x$/
x$+
x$*
x$&
x$%
x$!
x#~
x#z
x#y
x#u
x#t
x#p
x#o
x#k
x#j
x#f
x#e
x#a
x#`
x#\
x#[
x#W
x#V
x#R
x#Q
x#M
x#L
x#H
x#G
x#C
x#B
x#>
x#=
x#9
x#8
x#4
x#3
x#/
x#.
x#*
x#)
x#%
x#$
x"~
x"}
x"y
x"x
x"t
x"s
x"o
x"n
x"j
x"i
x"e
x"d
x"`
x"_
x"[
x"Z
x"V
x"U
x"Q
x"P
x"L
x"K
x"G
x"F
x"B
x"A
x"=
x"<
x"8
x"7
x"3
x"2
x".
x"-
x")
x"(
x"$
x"#
x}
x|
xx
xw
xs
xr
xn
xm
xi
xh
xd
xc
x_
x^
xZ
xY
xU
xT
xX
x]
xb
xg
xl
xq
xv
x{
x""
x"'
x",
x"1
x"6
x";
x"@
x"E
x"J
x"O
x"T
x"Y
x"^
x"c
x"h
x"m
x"r
x"w
x"|
x##
x#(
x#-
x#2
x#7
x#<
x#A
x#F
x#K
x#P
x#U
x#Z
x#_
x#d
x#i
x#n
x#s
x#x
x#}
x$$
x$)
x$.
x$3
x$8
x$=
x$B
x$G
x$L
x$Q
x$V
x$[
x$`
x$e
x$j
x$o
x$t
0'`
x'_
0'\
x'[
0'X
x'W
0'T
x'S
0'P
x'O
0'L
x'K
0'H
x'G
0'D
x'C
0'@
x'?
0'<
x';
0'8
x'7
0'4
x'3
0'0
x'/
0',
x'+
0'(
x''
0'$
x'#
0&~
x&}
0&z
x&y
0&v
x&u
0&r
x&q
0&n
x&m
0&j
x&i
0&f
x&e
0&b
x&a
0&^
x&]
0&Z
x&Y
0&V
x&U
0&R
x&Q
0&N
x&M
0&J
x&I
0&F
x&E
0&B
x&A
0&>
x&=
0&:
x&9
0&6
x&5
0&2
x&1
0&.
x&-
0&*
x&)
0&&
x&%
0&"
x&!
0%|
x%{
0%x
x%w
0%t
x%s
0%p
x%o
0%l
x%k
0%h
x%g
0%d
x%c
0%`
x%_
0%\
x%[
0%X
x%W
0%T
x%S
0%P
x%O
0%L
x%K
0%H
x%G
0%D
x%C
0%@
x%?
0%<
x%;
0%8
x%7
0%4
x%3
0%0
x%/
0%,
x%+
0%(
x%'
0%$
x%#
0$~
x$}
0%"
0%&
0%*
0%.
0%2
0%6
0%:
0%>
0%B
0%F
0%J
0%N
0%R
0%V
0%Z
0%^
0%b
0%f
0%j
0%n
0%r
0%v
0%z
0%~
0&$
0&(
0&,
0&0
0&4
0&8
0&<
0&@
0&D
0&H
0&L
0&P
0&T
0&X
0&\
0&`
0&d
0&h
0&l
0&p
0&t
0&x
0&|
0'"
0'&
0'*
0'.
0'2
0'6
0':
0'>
0'B
0'F
0'J
0'N
0'R
0'V
0'Z
0'^
x2L
x2K
x2G
x2F
x2B
x2A
x2=
x2<
x28
x27
x23
x22
x2.
x2-
x2)
x2(
x2$
x2#
x1}
x1|
x1x
x1w
x1s
x1r
x1n
x1m
x1i
x1h
x1d
x1c
x1_
x1^
x1Z
x1Y
x1U
x1T
x1P
x1O
x1K
x1J
x1F
x1E
x1A
x1@
x1<
x1;
x17
x16
x12
x11
x1-
x1,
x1(
x1'
x1#
x1"
x0|
x0{
x0w
x0v
x0r
x0q
x0m
x0l
x0h
x0g
x0c
x0b
x0^
x0]
x0Y
x0X
x0T
x0S
x0O
x0N
x0J
x0I
x0E
x0D
x0@
x0?
x0;
x0:
x06
x05
x01
x00
x0,
x0+
x0'
x0&
x0"
x0!
x/{
x/z
x/v
x/u
x/q
x/p
x/l
x/k
x/g
x/f
x/b
x/a
x/]
x/\
x/X
x/W
x/S
x/R
x/N
x/M
x/I
x/H
x/D
x/C
x/?
x/>
x/:
x/9
x/5
x/4
x/0
x//
x/+
x/*
x/.
x/3
x/8
x/=
x/B
x/G
x/L
x/Q
x/V
x/[
x/`
x/e
x/j
x/o
x/t
x/y
x/~
x0%
x0*
x0/
x04
x09
x0>
x0C
x0H
x0M
x0R
x0W
x0\
x0a
x0f
x0k
x0p
x0u
x0z
x1!
x1&
x1+
x10
x15
x1:
x1?
x1D
x1I
x1N
x1S
x1X
x1]
x1b
x1g
x1l
x1q
x1v
x1{
x2"
x2'
x2,
x21
x26
x2;
x2@
x2E
x2J
$end
0/"
0-|
0.!
0.$
0.'
0.*
0.-
0.0
0.3
0.6
0.9
0.<
0.?
0.B
0.E
0.H
0.K
0.N
0.Q
0.T
0.W
0.Z
0.]
0.`
0.c
0.f
0.i
0.l
0.o
0.r
0.u
0.x
0'q
0't
0'w
0'z
0'}
1(%
0((
0(+
0(.
0(1
0(7
1(:
0(=
0(@
0(C
1(I
1(L
0(O
0(R
0(U
0([
0(^
1(a
0(d
0(g
1(m
0(p
1(s
0(v
0(y
0)!
1)$
1)'
0)*
0)-
1)3
1)6
1)9
0)<
0)?
0)E
0)H
0)K
1)N
0)Q
1)W
0)Z
0)]
1)`
0)c
0)i
1)l
0)o
1)r
0)u
1){
1)~
0*#
1*&
0*)
0*/
0*2
1*5
1*8
0*;
1*A
0*D
1*G
1*J
0*M
0*S
1*V
1*Y
1*\
0*_
1*e
1*h
1*k
1*n
0*q
0*w
0*z
0*}
0+"
1+%
1++
0+.
0+1
0+4
1+7
0+=
1+@
0+C
0+F
1+I
1+O
1+R
0+U
0+X
1+[
0+a
0+d
1+g
0+j
1+m
1+s
0+v
1+y
0+|
1,!
0,'
1,*
1,-
0,0
1,3
1,9
1,<
1,?
0,B
1,E
0,K
0,N
0,Q
1,T
1,W
1,]
0,`
0,c
1,f
1,i
0,o
1,r
0,u
1,x
1,{
1-#
1-&
0-)
1-,
1-/
0-5
0-8
1-;
1->
1-A
1-G
0-J
1-M
1-P
1-S
0-Y
1-\
1-_
1-b
1-e
1-k
1-n
1-q
1-t
1-w
#5
0!
0#
#10
0"
0$
1!
1#
b0000000000000000000000000000000000000000000000000000000000000000 K
b0000000000000000000000000000000000000000000000000000000000000000 C
0R
0V
0[
0`
0e
0j
0o
0t
0y
0~
0"%
0"*
0"/
0"4
0"9
0">
0"C
0"H
0"M
0"R
0"W
0"\
0"a
0"f
0"k
0"p
0"u
0"z
0#!
0#&
0#+
0#0
0#5
0#:
0#?
0#D
0#I
0#N
0#S
0#X
0#]
0#b
0#g
0#l
0#q
0#v
0#{
0$"
0$'
0$,
0$1
0$6
0$;
0$@
0$E
0$J
0$O
0$T
0$Y
0$^
0$c
0$h
0$m
0$r
b0000000000 'c
0U
1T
0$}
0Z
0%#
0_
0%'
0d
0%+
0i
0%/
0n
0%3
0s
0%7
0x
0%;
0}
0%?
0"$
0%C
0")
0%G
0".
0%K
0"3
0%O
0"8
0%S
0"=
0%W
0"B
0%[
0"G
0%_
0"L
0%c
0"Q
0%g
0"V
0%k
0"[
0%o
0"`
0%s
0"e
0%w
0"j
0%{
0"o
0&!
0"t
0&%
0"y
0&)
0"~
0&-
0#%
0&1
0#*
0&5
0#/
0&9
0#4
0&=
0#9
0&A
0#>
0&E
0#C
0&I
0#H
0&M
0#M
0&Q
0#R
0&U
0#W
0&Y
0#\
0&]
0#a
0&a
0#f
0&e
0#k
0&i
0#p
0&m
0#u
0&q
0#z
0&u
0$!
0&y
0$&
0&}
0$+
0'#
0$0
0''
0$5
0'+
0$:
0'/
0$?
0'3
0$D
0'7
0$I
0';
0$N
0'?
0$S
0'C
0$X
0'G
0$]
0'K
0$b
0'O
0$g
0'S
0$l
0'W
0$q
0'[
0$v
0'_
0X
0]
0b
0g
0l
0q
0v
0{
0""
0"'
0",
0"1
0"6
0";
0"@
0"E
0"J
0"O
0"T
0"Y
0"^
0"c
0"h
0"m
0"r
0"w
0"|
0##
0#(
0#-
0#2
0#7
0#<
0#A
0#F
0#K
0#P
0#U
0#Z
0#_
0#d
0#i
0#n
0#s
0#x
0#}
0$$
0$)
0$.
0$3
0$8
0$=
0$B
0$G
0$L
0$Q
0$V
0$[
0$`
0$e
0$j
0$o
0$t
0Y
0^
0c
0h
0m
0r
0w
0|
0"#
0"(
0"-
0"2
0"7
0"<
0"A
0"F
0"K
0"P
0"U
0"Z
0"_
0"d
0"i
0"n
0"s
0"x
0"}
0#$
0#)
0#.
0#3
0#8
0#=
0#B
0#G
0#L
0#Q
0#V
0#[
0#`
0#e
0#j
0#o
0#t
0#y
0#~
0$%
0$*
0$/
0$4
0$9
0$>
0$C
0$H
0$M
0$R
0$W
0$\
0$a
0$f
0$k
0$p
0$u
b0000000000000000000000000000000000000000000000000000000000000000 Q
b0000000000000000000000000000000000000000000000000000000000000001 O
b0000000000000000000000000000000000000000000000000000000000000000 $y
0P
b00000000001000000000000010010011 'd
b00000000001000000000000010010011 A
b00010 'f
b00000 'e
b0000000000000000000000000000000000000000000000000000000000000000 -z
b0000000000000000000000000000000000000000000000000000000000000000 'i
b0000000000000000000000000000000000000000000000000000000000000000 2O
b0000000000000000000000000000000000000000000000000000000000000000 -y
b0000000000000000000000000000000000000000000000000000000000000000 'h
b0000000000000000000000000000000000000000000000000000000000000000 D
0/(
0/,
0/1
0/6
0/;
0/@
0/E
0/J
0/O
0/T
0/Y
0/^
0/c
0/h
0/m
0/r
0/w
0/|
00#
00(
00-
002
007
00<
00A
00F
00K
00P
00U
00Z
00_
00d
00i
00n
00s
00x
00}
01$
01)
01.
013
018
01=
01B
01G
01L
01Q
01V
01[
01`
01e
01j
01o
01t
01y
01~
02%
02*
02/
024
029
02>
02C
02H
b00000000001000000000000010010011 %
b000 5
b00001 ?
b00100 4
b000000000010 >
b00100 =
06
b00001 'g
1'p
0's
0'v
0'y
0'|
1'~
1'{
1'x
1'u
0'r
b11110 'o
0'n
1($
0('
0(*
0(-
0(0
1(2
1(/
1(,
1()
1(&
b11111 (#
1("
1(6
0(9
0(<
0(?
0(B
1(D
1(A
1(>
0(;
0(8
b11100 (5
0(4
1(H
0(K
0(N
0(Q
0(T
1(V
1(S
1(P
0(M
1(J
b11101 (G
0(F
1(Z
0(]
0(`
0(c
0(f
1(h
1(e
0(b
1(_
0(\
b11010 (Y
0(X
1(l
0(o
0(r
0(u
0(x
1(z
1(w
0(t
1(q
1(n
b11011 (k
0(j
1(~
0)#
0)&
0))
0),
1).
1)+
0)(
0)%
0)"
b11000 (}
0(|
1)2
0)5
0)8
0);
0)>
1)@
1)=
0):
0)7
1)4
b11001 )1
0)0
1)D
0)G
0)J
0)M
0)P
1)R
0)O
1)L
1)I
0)F
b10110 )C
0)B
1)V
0)Y
0)\
0)_
0)b
1)d
0)a
1)^
1)[
1)X
b10111 )U
0)T
1)h
0)k
0)n
0)q
0)t
1)v
0)s
1)p
0)m
0)j
b10100 )g
0)f
1)z
0)}
0*"
0*%
0*(
1**
0*'
1*$
0*!
1)|
b10101 )y
0)x
1*.
0*1
0*4
0*7
0*:
1*<
0*9
0*6
1*3
0*0
b10010 *-
0*,
1*@
0*C
0*F
0*I
0*L
1*N
0*K
0*H
1*E
1*B
b10011 *?
0*>
1*R
0*U
0*X
0*[
0*^
1*`
0*]
0*Z
0*W
0*T
b10000 *Q
0*P
1*d
0*g
0*j
0*m
0*p
1*r
0*o
0*l
0*i
1*f
b10001 *c
0*b
1*v
0*y
0*|
0+!
0+$
0+&
1+#
1*~
1*{
0*x
b01110 *u
0*t
1+*
0+-
0+0
0+3
0+6
0+8
1+5
1+2
1+/
1+,
b01111 +)
0+(
1+<
0+?
0+B
0+E
0+H
0+J
1+G
1+D
0+A
0+>
b01100 +;
0+:
1+N
0+Q
0+T
0+W
0+Z
0+\
1+Y
1+V
0+S
1+P
b01101 +M
0+L
1+`
0+c
0+f
0+i
0+l
0+n
1+k
0+h
1+e
0+b
b01010 +_
0+^
1+r
0+u
0+x
0+{
0+~
0,"
1+}
0+z
1+w
1+t
b01011 +q
0+p
1,&
0,)
0,,
0,/
0,2
0,4
1,1
0,.
0,+
0,(
b01000 ,%
0,$
1,8
0,;
0,>
0,A
0,D
0,F
1,C
0,@
0,=
1,:
b01001 ,7
0,6
1,J
0,M
0,P
0,S
0,V
0,X
0,U
1,R
1,O
0,L
b00110 ,I
0,H
1,\
0,_
0,b
0,e
0,h
0,j
0,g
1,d
1,a
1,^
b00111 ,[
0,Z
1,n
0,q
0,t
0,w
0,z
0,|
0,y
1,v
0,s
0,p
b00100 ,m
0,l
1-"
0-%
0-(
0-+
0-.
0-0
0--
1-*
0-'
1-$
b00101 -!
0,~
1-4
0-7
0-:
0-=
0-@
0-B
0-?
0-<
1-9
0-6
b00010 -3
0-2
1-F
0-I
0-L
0-O
0-R
0-T
0-Q
0-N
1-K
1-H
b00011 -E
0-D
1-X
0-[
0-^
0-a
0-d
0-f
0-c
0-`
0-]
0-Z
b00000 -W
0-V
1-j
0-m
0-p
0-s
0-v
0-x
0-u
0-r
0-o
1-l
b00001 -i
0-h
b0000000000000000000000000000000000000000000000000000000000000000 .z
b0000000000000000000000000000000000000000000000000000000000000000 E
b0000000000000000000000000000000000000000000000000000000000000000 /#
b0000000000000000000000000000000000000000000000000000000000000000 .}
0/)
0/-
0/2
0/7
0/<
0/A
0/F
0/K
0/P
0/U
0/Z
0/_
0/d
0/i
0/n
0/s
0/x
0/}
00$
00)
00.
003
008
00=
00B
00G
00L
00Q
00V
00[
00`
00e
00j
00o
00t
00y
00~
01%
01*
01/
014
019
01>
01C
01H
01M
01R
01W
01\
01a
01f
01k
01p
01u
01z
02!
02&
02+
020
025
02:
02?
02D
02I
0/+
0/*
0/0
0/5
0/:
0/?
0/D
0/I
0/N
0/S
0/X
0/]
0/b
0/g
0/l
0/q
0/v
0/{
00"
00'
00,
001
006
00;
00@
00E
00J
00O
00T
00Y
00^
00c
00h
00m
00r
00w
00|
01#
01(
01-
012
017
01<
01A
01F
01K
01P
01U
01Z
01_
01d
01i
01n
01s
01x
01}
02$
02)
02.
023
028
02=
02B
02G
02L
0/.
0/3
0/8
0/=
0/B
0/G
0/L
0/Q
0/V
0/[
0/`
0/e
0/j
0/o
0/t
0/y
0/~
00%
00*
00/
004
009
00>
00C
00H
00M
00R
00W
00\
00a
00f
00k
00p
00u
00z
01!
01&
01+
010
015
01:
01?
01D
01I
01N
01S
01X
01]
01b
01g
01l
01q
01v
01{
02"
02'
02,
021
026
02;
02@
02E
02J
0//
0/4
0/9
0/>
0/C
0/H
0/M
0/R
0/W
0/\
0/a
0/f
0/k
0/p
0/u
0/z
00!
00&
00+
000
005
00:
00?
00D
00I
00N
00S
00X
00]
00b
00g
00l
00q
00v
00{
01"
01'
01,
011
016
01;
01@
01E
01J
01O
01T
01Y
01^
01c
01h
01m
01r
01w
01|
02#
02(
02-
022
027
02<
02A
02F
02K
b00000000000000000000000000000010 'l
b0000000000000000000000000000000000000000000000000000000000000000 /'
b0000000000000000000000000000000000000000000000000000000000000000 /%
0/&
0/!
bx0xx .|
b0000000000000000000000000000000000000000000000000000000000000010 @
b0000000000000000000000000000000000000000000000000000000000000010 -
b0000000000000000000000000000000000000000000000000000000000000010 ,
b0000000000000000000000000000000000000000000000000000000000000001 $w
b0000000000000000000000000000000000000000000000000000000000000001 F
1$|
1<
13
1+
b0000000000000000000000000000000000000000000000000000000000000010 .z
b0000000000000000000000000000000000000000000000000000000000000010 E
18
1/
1'
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxz 'k
x-|
x.!
x.$
x.'
x.*
x.-
x.0
x.3
x.6
x.9
x.<
x.?
x.B
x.E
x.H
x.K
x.N
x.Q
x.T
x.W
x.Z
x.]
x.`
x.c
x.f
x.i
x.l
x.o
x.r
x.u
x.x
b00000000000000000000000000000010 'j
b0000000000000000000000000000001z 'k
1-|
0.!
0.$
0.'
0.*
0.-
0.0
0.3
0.6
0.9
0.<
0.?
0.B
0.E
0.H
0.K
0.N
0.Q
0.T
0.W
0.Z
0.]
0.`
0.c
0.f
0.i
0.l
0.o
0.r
0.u
0.x
b0000000000000000000000000000000000000000000000000000000000000001 'b
b0000000000000000000000000000000000000000000000000000000000000001 B
b0000000000000000000000000000000000000000000000000000000000000000 2M
b0000000000000000000000000000000000000000000000000000000000000000 .~
b0000000000000000000000000000000000000000000000000000000000000000 .{
b0000000000 2N
b0000000000000000000000000000000000000000000000000000000000000010 /#
b0000000000000000000000000000000000000000000000000000000000000010 .}
1/-
b0000000000000000000000000000000000000000000000000000000000000000 2Q
b0000000000000000000000000000000000000000000000000000000000000000 G
bx00x H
1$}
1//
b0000000000000000000000000000000000000000000000000000000000000001 $y
b0000000000000000000000000000000000000000000000000000000000000010 /%
b0001 .|
b0000000000000000000000000000000000000000000000000000000000000010 2M
b0000000000000000000000000000000000000000000000000000000000000010 .~
b0000000000000000000000000000000000000000000000000000000000000010 .{
b0000000010 2N
b0000000000000000000000000000000000000000000000000000000000000010 2Q
b0000000000000000000000000000000000000000000000000000000000000010 G
b0001 H
b0000 .|
b0000 H
#15
0!
0#
b0000000000000000000000000000000000000000000000000000000000000010 -{
b0000000000000000000000000000000000000000000000000000000000000001 L
#20
1!
1#
b0000000000000000000000000000000000000000000000000000000000000010 -}
b0000000000000000000000000000000000000000000000000000000000000001 K
b0000000000000000000000000000000000000000000000000000000000000001 C
1R
b0000000001 'c
1U
0T
1$~
0$}
1X
1%"
1Y
1%#
b0000000000000000000000000000000000000000000000000000000000000001 Q
b0000000000000000000000000000000000000000000000000000000000000010 O
b0000000000000000000000000000000000000000000000000000000000000001 ${
b0000000000000000000000000000000000000000000000000000000000000010 $y
b00000000000100001000000100110011 'd
b00000000000100001000000100110011 A
b00001 'f
b00001 'e
b0000000000000000000000000000000000000000000000000000000000000010 -z
b0000000000000000000000000000000000000000000000000000000000000010 'i
b0000000000000000000000000000000000000000000000000000000000000010 2O
b0000000000000000000000000000000000000000000000000000000000000010 -y
b0000000000000000000000000000000000000000000000000000000000000010 'h
b0000000000000000000000000000000000000000000000000000000000000010 D
1/,
b00000000000100001000000100110011 %
b00010 ?
b01100 4
b000000000001 >
b01100 =
b00010 'g
0'p
1's
0'u
1'r
b11101 'o
0($
1('
0()
0(&
b11100 (#
0("
0(6
1(9
1(;
1(8
b11111 (5
1(4
0(H
1(K
1(M
0(J
b11110 (G
0(Z
1(]
0(_
1(\
b11001 (Y
0(l
1(o
0(q
0(n
b11000 (k
0(~
1)#
1)%
1)"
b11011 (}
0)2
1)5
1)7
0)4
b11010 )1
0)D
1)G
0)I
1)F
b10101 )C
0)V
1)Y
0)[
0)X
b10100 )U
0)h
1)k
1)m
1)j
b10111 )g
0)z
1)}
1*!
0)|
b10110 )y
0*.
1*1
0*3
1*0
b10001 *-
0*@
1*C
0*E
0*B
b10000 *?
0*R
1*U
1*W
1*T
b10011 *Q
0*d
1*g
1*i
0*f
b10010 *c
0*v
1*y
0*{
1*x
b01101 *u
0+*
1+-
0+/
0+,
b01100 +)
0+<
1+?
1+A
1+>
b01111 +;
0+N
1+Q
1+S
0+P
b01110 +M
0+`
1+c
0+e
1+b
b01001 +_
0+r
1+u
0+w
0+t
b01000 +q
0,&
1,)
1,+
1,(
b01011 ,%
0,8
1,;
1,=
0,:
b01010 ,7
0,J
1,M
0,O
1,L
b00101 ,I
0,\
1,_
0,a
0,^
b00100 ,[
0,n
1,q
1,s
1,p
b00111 ,m
0-"
1-%
1-'
0-$
b00110 -!
0-4
1-7
0-9
1-6
b00001 -3
0-F
1-I
0-K
0-H
b00000 -E
0-X
1-[
1-]
1-Z
b00011 -W
0-j
1-m
1-o
0-l
b00010 -i
1/0
0//
1/3
1/4
b00000000000000000000000000000100 'l
b0000000000000000000000000000000000000000000000000000000000000010 /'
b0000000000000000000000000000000000000000000000000000000000000100 /%
b0000000000000000000000000000000000000000000000000000000000000000 @
b0000000000000000000000000000000000000000000000000000000000000000 -
b0000000000000000000000000000000000000000000000000000000000000000 ,
b0000000000000000000000000000000000000000000000000000000000000000 $w
b0000000000000000000000000000000000000000000000000000000000000000 F
0$|
0<
03
0+
b00000000000000000000000000000100 'j
b0000000000000000000000000000010z 'k
0-|
1.!
b0000000000000000000000000000000000000000000000000000000000000010 'b
b0000000000000000000000000000000000000000000000000000000000000010 B
b0000000000000000000000000000000000000000000000000000000000000100 2M
b0000000000000000000000000000000000000000000000000000000000000100 .~
b0000000000000000000000000000000000000000000000000000000000000100 .{
b0000000100 2N
b0000000000000000000000000000000000000000000000000000000000000100 2Q
b0000000000000000000000000000000000000000000000000000000000000100 G
0$~
1$}
0%"
0%#
b0000000000000000000000000000000000000000000000000000000000000000 ${
b0000000000000000000000000000000000000000000000000000000000000001 $y
#25
0!
0#
b0000000000000000000000000000000000000000000000000000000000000100 -~
b0000000000000000000000000000000000000000000000000000000000000010 L
#30
1!
1#
b0000000000000000000000000000000000000000000000000000000000000100 ."
b0000000000000000000000000000000000000000000000000000000000000010 K
b0000000000000000000000000000000000000000000000000000000000000010 C
0R
1V
b0000000010 'c
0U
1T
0$}
1Z
0Y
1%#
0X
1]
0Z
1Y
1^
0]
0^
b0000000000000000000000000000000000000000000000000000000000000000 Q
b0000000000000000000000000000000000000000000000000000000000000011 O
b0000000000000000000000000000000000000000000000000000000000000010 $y
b01000000000100010000000110110011 'd
b01000000000100010000000110110011 A
b00010 'e
b0000000000000000000000000000000000000000000000000000000000000100 -y
b0000000000000000000000000000000000000000000000000000000000000100 'h
b0000000000000000000000000000000000000000000000000000000000000100 D
0/,
1/1
b01000000000100010000000110110011 %
b00011 ?
b010000000001 >
16
b00011 'g
1'p
0'r
b11100 'o
1($
1(&
b11101 (#
1(6
0(8
b11110 (5
0(4
1(H
1(J
b11111 (G
1(F
1(Z
0(\
b11000 (Y
1(l
1(n
b11001 (k
1(~
0)"
b11010 (}
1)2
1)4
b11011 )1
1)D
0)F
b10100 )C
1)V
1)X
b10101 )U
1)h
0)j
b10110 )g
1)z
1)|
b10111 )y
1*.
0*0
b10000 *-
1*@
1*B
b10001 *?
1*R
0*T
b10010 *Q
1*d
1*f
b10011 *c
1*v
0*x
b01100 *u
1+*
1+,
b01101 +)
1+<
0+>
b01110 +;
1+N
1+P
b01111 +M
1+`
0+b
b01000 +_
1+r
1+t
b01001 +q
1,&
0,(
b01010 ,%
1,8
1,:
b01011 ,7
1,J
0,L
b00100 ,I
1,\
1,^
b00101 ,[
1,n
0,p
b00110 ,m
1-"
1-$
b00111 -!
1-4
0-6
b00000 -3
1-F
1-H
b00001 -E
1-X
0-Z
b00010 -W
1-j
1-l
b00011 -i
0/0
1//
1/5
0/4
0/3
1/8
0/5
1/4
1/9
0/8
0/9
b00000000000000000000000000001000 'l
b0000000000000000000000000000000000000000000000000000000000000000 /'
b0000000000000000000000000000000000000000000000000000000000000110 /%
b01 7
b01 .
b01 &
1/$
b1111111111111111111111111111111111111111111111111111111111111101 /#
b1111111111111111111111111111111111111111111111111111111111111101 .}
1/)
0/-
1/2
1/7
1/<
1/A
1/F
1/K
1/P
1/U
1/Z
1/_
1/d
1/i
1/n
1/s
1/x
1/}
10$
10)
10.
103
108
10=
10B
10G
10L
10Q
10V
10[
10`
10e
10j
10o
10t
10y
10~
11%
11*
11/
114
119
11>
11C
11H
11M
11R
11W
11\
11a
11f
11k
11p
11u
11z
12!
12&
12+
120
125
12:
12?
12D
12I
1/"
b0000000000000000000000000000000000000000000000000000000000000110 2M
b0000000000000000000000000000000000000000000000000000000000000110 .~
b0000000000000000000000000000000000000000000000000000000000000110 .{
b0000000110 2N
b00000000000000000000000000001000 'j
b0000000000000000000000000000100z 'k
0.!
1.$
b0000000000000000000000000000000000000000000000000000000000000011 'b
b0000000000000000000000000000000000000000000000000000000000000011 B
b0000000000000000000000000000000000000000000000000000000000000110 2Q
b0000000000000000000000000000000000000000000000000000000000000110 G
0//
1/5
0/4
1/9
1/>
1/C
1/H
1/M
1/R
1/W
1/\
1/a
1/f
1/k
1/p
1/u
1/z
10!
10&
10+
100
105
10:
10?
10D
10I
10N
10S
10X
10]
10b
10g
10l
10q
10v
10{
11"
11'
11,
111
116
11;
11@
11E
11J
11O
11T
11Y
11^
11c
11h
11m
11r
11w
11|
12#
12(
12-
122
127
12<
12A
12F
12K
1/+
1/8
1/.
1/:
0/9
1//
1/=
1/?
0/>
1/B
1/D
0/C
1/G
1/I
0/H
1/L
1/N
0/M
1/Q
1/S
0/R
1/V
1/X
0/W
1/[
1/]
0/\
1/`
1/b
0/a
1/e
1/g
0/f
1/j
1/l
0/k
1/o
1/q
0/p
1/t
1/v
0/u
1/y
1/{
0/z
1/~
10"
00!
10%
10'
00&
10*
10,
00+
10/
101
000
104
106
005
109
10;
00:
10>
10@
00?
10C
10E
00D
10H
10J
00I
10M
10O
00N
10R
10T
00S
10W
10Y
00X
10\
10^
00]
10a
10c
00b
10f
10h
00g
10k
10m
00l
10p
10r
00q
10u
10w
00v
10z
10|
00{
11!
11#
01"
11&
11(
01'
11+
11-
01,
110
112
011
115
117
016
11:
11<
01;
11?
11A
01@
11D
11F
01E
11I
11K
01J
11N
11P
01O
11S
11U
01T
11X
11Z
01Y
11]
11_
01^
11b
11d
01c
11g
11i
01h
11l
11n
01m
11q
11s
01r
11v
11x
01w
11{
11}
01|
12"
12$
02#
12'
12)
02(
12,
12.
02-
121
123
022
126
128
027
12;
12=
02<
12@
12B
02A
12E
12G
02F
12J
12L
02K
b0000000000000000000000000000000000000000000000000000000000000010 /%
b1111111111111111111111111111111111111111111111111111111111111101 /'
1/&
1/!
b0100 .|
b0000000000000000000000000000000000000000000000000000000000000010 2M
b0000000000000000000000000000000000000000000000000000000000000010 .~
b0000000000000000000000000000000000000000000000000000000000000010 .{
b0000000010 2N
b0000000000000000000000000000000000000000000000000000000000000010 2Q
b0000000000000000000000000000000000000000000000000000000000000010 G
b0100 H
#35
0!
0#
b0000000000000000000000000000000000000000000000000000000000000010 .#
b0000000000000000000000000000000000000000000000000000000000000011 L
#40
1!
1#
b0000000000000000000000000000000000000000000000000000000000000010 .%
b0000000000000000000000000000000000000000000000000000000000000011 K
b0000000000000000000000000000000000000000000000000000000000000011 C
1R
b0000000011 'c
1U
0T
1$}
1X
1Z
0Y
1]
1^
b0000000000000000000000000000000000000000000000000000000000000011 Q
b0000000000000000000000000000000000000000000000000000000000000100 O
b0000000000000000000000000000000000000000000000000000000000000011 $y
b00000000001100001111001000110011 'd
b00000000001100001111001000110011 A
b00011 'f
b00001 'e
b0000000000000000000000000000000000000000000000000000000000000010 -y
b0000000000000000000000000000000000000000000000000000000000000010 'h
b0000000000000000000000000000000000000000000000000000000000000010 D
1/,
0/1
b00000000001100001111001000110011 %
b111 5
b00100 ?
b000000000011 >
06
b00100 'g
0'p
0's
1'v
0'x
1'u
1'r
b11011 'o
0($
0('
1(*
0(,
1()
0(&
b11010 (#
0(6
0(9
1(<
0(>
0(;
1(8
b11001 (5
0(H
0(K
1(N
0(P
0(M
0(J
b11000 (G
0(F
0(Z
0(]
1(`
1(b
1(_
1(\
b11111 (Y
1(X
0(l
0(o
1(r
1(t
1(q
0(n
b11110 (k
0(~
0)#
1)&
1)(
0)%
1)"
b11101 (}
0)2
0)5
1)8
1):
0)7
0)4
b11100 )1
0)D
0)G
1)J
0)L
1)I
1)F
b10011 )C
0)V
0)Y
1)\
0)^
1)[
0)X
b10010 )U
0)h
0)k
1)n
0)p
0)m
1)j
b10001 )g
0)z
0)}
1*"
0*$
0*!
0)|
b10000 )y
0*.
0*1
1*4
1*6
1*3
1*0
b10111 *-
0*@
0*C
1*F
1*H
1*E
0*B
b10110 *?
0*R
0*U
1*X
1*Z
0*W
1*T
b10101 *Q
0*d
0*g
1*j
1*l
0*i
0*f
b10100 *c
0*v
0*y
1*|
0*~
1*{
1*x
b01011 *u
0+*
0+-
1+0
0+2
1+/
0+,
b01010 +)
0+<
0+?
1+B
0+D
0+A
1+>
b01001 +;
0+N
0+Q
1+T
0+V
0+S
0+P
b01000 +M
0+`
0+c
1+f
1+h
1+e
1+b
b01111 +_
0+r
0+u
1+x
1+z
1+w
0+t
b01110 +q
0,&
0,)
1,,
1,.
0,+
1,(
b01101 ,%
0,8
0,;
1,>
1,@
0,=
0,:
b01100 ,7
0,J
0,M
1,P
0,R
1,O
1,L
b00011 ,I
0,\
0,_
1,b
0,d
1,a
0,^
b00010 ,[
0,n
0,q
1,t
0,v
0,s
1,p
b00001 ,m
0-"
0-%
1-(
0-*
0-'
0-$
b00000 -!
0-4
0-7
1-:
1-<
1-9
1-6
b00111 -3
0-F
0-I
1-L
1-N
1-K
0-H
b00110 -E
0-X
0-[
1-^
1-`
0-]
1-Z
b00101 -W
0-j
0-m
1-p
1-r
0-o
0-l
b00100 -i
1/0
0//
0/5
1/4
1/3
0/8
1/5
0/4
0/:
1/9
1/8
0/=
1/:
0/9
0/?
1/>
1/=
0/B
1/?
0/>
0/D
1/C
1/B
0/G
1/D
0/C
0/I
1/H
1/G
0/L
1/I
0/H
0/N
1/M
1/L
0/Q
1/N
0/M
0/S
1/R
1/Q
0/V
1/S
0/R
0/X
1/W
1/V
0/[
1/X
0/W
0/]
1/\
1/[
0/`
1/]
0/\
0/b
1/a
1/`
0/e
1/b
0/a
0/g
1/f
1/e
0/j
1/g
0/f
0/l
1/k
1/j
0/o
1/l
0/k
0/q
1/p
1/o
0/t
1/q
0/p
0/v
1/u
1/t
0/y
1/v
0/u
0/{
1/z
1/y
0/~
1/{
0/z
00"
10!
1/~
00%
10"
00!
00'
10&
10%
00*
10'
00&
00,
10+
10*
00/
10,
00+
001
100
10/
004
101
000
006
105
104
009
106
005
00;
10:
109
00>
10;
00:
00@
10?
10>
00C
10@
00?
00E
10D
10C
00H
10E
00D
00J
10I
10H
00M
10J
00I
00O
10N
10M
00R
10O
00N
00T
10S
10R
00W
10T
00S
00Y
10X
10W
00\
10Y
00X
00^
10]
10\
00a
10^
00]
00c
10b
10a
00f
10c
00b
00h
10g
10f
00k
10h
00g
00m
10l
10k
00p
10m
00l
00r
10q
10p
00u
10r
00q
00w
10v
10u
00z
10w
00v
00|
10{
10z
01!
10|
00{
01#
11"
11!
01&
11#
01"
01(
11'
11&
01+
11(
01'
01-
11,
11+
010
11-
01,
012
111
110
015
112
011
017
116
115
01:
117
016
01<
11;
11:
01?
11<
01;
01A
11@
11?
01D
11A
01@
01F
11E
11D
01I
11F
01E
01K
11J
11I
01N
11K
01J
01P
11O
11N
01S
11P
01O
01U
11T
11S
01X
11U
01T
01Z
11Y
11X
01]
11Z
01Y
01_
11^
11]
01b
11_
01^
01d
11c
11b
01g
11d
01c
01i
11h
11g
01l
11i
01h
01n
11m
11l
01q
11n
01m
01s
11r
11q
01v
11s
01r
01x
11w
11v
01{
11x
01w
01}
11|
11{
02"
11}
01|
02$
12#
12"
02'
12$
02#
02)
12(
12'
02,
12)
02(
02.
12-
12,
021
12.
02-
023
122
121
026
123
022
028
127
126
02;
128
027
02=
12<
12;
02@
12=
02<
02B
12A
12@
02E
12B
02A
02G
12F
12E
02J
12G
02F
02L
12K
12J
12L
02K
b00000000000000000000000000010000 'l
b1111111111111111111111111111111111111111111111111111111111111111 /'
b0000000000000000000000000000000000000000000000000000000000000000 /%
b10 7
b10 .
b10 &
0/$
b0000000000000000000000000000000000000000000000000000000000000010 /#
b0000000000000000000000000000000000000000000000000000000000000010 .}
0/)
1/-
0/2
0/7
0/<
0/A
0/F
0/K
0/P
0/U
0/Z
0/_
0/d
0/i
0/n
0/s
0/x
0/}
00$
00)
00.
003
008
00=
00B
00G
00L
00Q
00V
00[
00`
00e
00j
00o
00t
00y
00~
01%
01*
01/
014
019
01>
01C
01H
01M
01R
01W
01\
01a
01f
01k
01p
01u
01z
02!
02&
02+
020
025
02:
02?
02D
02I
0/"
b00000000000000000000000000010000 'j
b0000000000000000000000000001000z 'k
0.$
1.'
b0000000000000000000000000000000000000000000000000000000000000100 'b
b0000000000000000000000000000000000000000000000000000000000000100 B
0/+
1//
0/5
1/4
0/:
1/9
0/?
1/>
0/D
1/C
0/I
1/H
0/N
1/M
0/S
1/R
0/X
1/W
0/]
1/\
0/b
1/a
0/g
1/f
0/l
1/k
0/q
1/p
0/v
1/u
0/{
1/z
00"
10!
00'
10&
00,
10+
001
100
006
105
00;
10:
00@
10?
00E
10D
00J
10I
00O
10N
00T
10S
00Y
10X
00^
10]
00c
10b
00h
10g
00m
10l
00r
10q
00w
10v
00|
10{
01#
11"
01(
11'
01-
11,
012
111
017
116
01<
11;
01A
11@
01F
11E
01K
11J
01P
11O
01U
11T
01Z
11Y
01_
11^
01d
11c
01i
11h
01n
11m
01s
11r
01x
11w
01}
11|
02$
12#
02)
12(
02.
12-
023
122
028
127
02=
12<
02B
12A
02G
12F
02L
12K
0/.
0/8
0/=
0/B
0/G
0/L
0/Q
0/V
0/[
0/`
0/e
0/j
0/o
0/t
0/y
0/~
00%
00*
00/
004
009
00>
00C
00H
00M
00R
00W
00\
00a
00f
00k
00p
00u
00z
01!
01&
01+
010
015
01:
01?
01D
01I
01N
01S
01X
01]
01b
01g
01l
01q
01v
01{
02"
02'
02,
021
026
02;
02@
02E
02J
0//
0/9
0/>
0/C
0/H
0/M
0/R
0/W
0/\
0/a
0/f
0/k
0/p
0/u
0/z
00!
00&
00+
000
005
00:
00?
00D
00I
00N
00S
00X
00]
00b
00g
00l
00q
00v
00{
01"
01'
01,
011
016
01;
01@
01E
01J
01O
01T
01Y
01^
01c
01h
01m
01r
01w
01|
02#
02(
02-
022
027
02<
02A
02F
02K
b0000000000000000000000000000000000000000000000000000000000000010 /'
b0000000000000000000000000000000000000000000000000000000000000100 /%
0/&
0/!
b0000 .|
b0000 H
#45
0!
0#
b0000000000000000000000000000000000000000000000000000000000000010 .&
b0000000000000000000000000000000000000000000000000000000000000100 L
#50
1!
1#
b0000000000000000000000000000000000000000000000000000000000000010 .(
b0000000000000000000000000000000000000000000000000000000000000100 K
b0000000000000000000000000000000000000000000000000000000000000100 C
0R
0V
1[
b0000000100 'c
0U
1T
0$}
0Z
1Y
0%#
1_
0^
1%'
0X
0]
1b
0Y
0_
1^
1c
0b
0c
b0000000000000000000000000000000000000000000000000000000000000000 Q
b0000000000000000000000000000000000000000000000000000000000000101 O
b0000000000000000000000000000000000000000000000000000000000000100 $y
b00000000001000001110001010110011 'd
b00000000001000001110001010110011 A
b00010 'f
b0000000000000000000000000000000000000000000000000000000000000100 -z
b0000000000000000000000000000000000000000000000000000000000000100 'i
b0000000000000000000000000000000000000000000000000000000000000100 2O
b00000000001000001110001010110011 %
b110 5
b00101 ?
b000000000010 >
b00101 'g
1'p
0'r
b11010 'o
1($
1(&
b11011 (#
1(6
0(8
b11000 (5
1(H
1(J
b11001 (G
1(Z
0(\
b11110 (Y
0(X
1(l
1(n
b11111 (k
1(j
1(~
0)"
b11100 (}
1)2
1)4
b11101 )1
1)D
0)F
b10010 )C
1)V
1)X
b10011 )U
1)h
0)j
b10000 )g
1)z
1)|
b10001 )y
1*.
0*0
b10110 *-
1*@
1*B
b10111 *?
1*R
0*T
b10100 *Q
1*d
1*f
b10101 *c
1*v
0*x
b01010 *u
1+*
1+,
b01011 +)
1+<
0+>
b01000 +;
1+N
1+P
b01001 +M
1+`
0+b
b01110 +_
1+r
1+t
b01111 +q
1,&
0,(
b01100 ,%
1,8
1,:
b01101 ,7
1,J
0,L
b00010 ,I
1,\
1,^
b00011 ,[
1,n
0,p
b00000 ,m
1-"
1-$
b00001 -!
1-4
0-6
b00110 -3
1-F
1-H
b00111 -E
1-X
0-Z
b00100 -W
1-j
1-l
b00101 -i
b0000000000000000000000000000000000000000000000000000000000000100 .z
b0000000000000000000000000000000000000000000000000000000000000100 E
b0000000000000000000000000000000000000000000000000000000000000100 /#
b0000000000000000000000000000000000000000000000000000000000000100 .}
0/-
1/2
b11 7
b11 .
b11 &
1/$
b1111111111111111111111111111111111111111111111111111111111111011 /#
b1111111111111111111111111111111111111111111111111111111111111011 .}
1/)
1/-
0/2
1/7
1/<
1/A
1/F
1/K
1/P
1/U
1/Z
1/_
1/d
1/i
1/n
1/s
1/x
1/}
10$
10)
10.
103
108
10=
10B
10G
10L
10Q
10V
10[
10`
10e
10j
10o
10t
10y
10~
11%
11*
11/
114
119
11>
11C
11H
11M
11R
11W
11\
11a
11f
11k
11p
11u
11z
12!
12&
12+
120
125
12:
12?
12D
12I
1/"
b00000000000000000000000000100000 'j
b0000000000000000000000000010000z 'k
0.'
1.*
1/9
1/>
1/C
1/H
1/M
1/R
1/W
1/\
1/a
1/f
1/k
1/p
1/u
1/z
10!
10&
10+
100
105
10:
10?
10D
10I
10N
10S
10X
10]
10b
10g
10l
10q
10v
10{
11"
11'
11,
111
116
11;
11@
11E
11J
11O
11T
11Y
11^
11c
11h
11m
11r
11w
11|
12#
12(
12-
122
127
12<
12A
12F
12K
1/+
1/.
1//
b00000000000000000000000000100000 'l
b1111111111111111111111111111111111111111111111111111111111111110 /%
b0000000000000000000000000000000000000000000000000000000000000011 /'
b0000000000000000000000000000000000000000000000000000000000000101 'b
b0000000000000000000000000000000000000000000000000000000000000101 B
b0000000000000000000000000000000000000000000000000000000000000110 2M
b0000000000000000000000000000000000000000000000000000000000000110 .~
b0000000000000000000000000000000000000000000000000000000000000110 .{
b0000000110 2N
b0000000000000000000000000000000000000000000000000000000000000110 2Q
b0000000000000000000000000000000000000000000000000000000000000110 G
#55
0!
0#
b0000000000000000000000000000000000000000000000000000000000000110 .)
b0000000000000000000000000000000000000000000000000000000000000101 L
#60
1!
1#
b0000000000000000000000000000000000000000000000000000000000000110 .+
b0000000000000000000000000000000000000000000000000000000000000101 K
b0000000000000000000000000000000000000000000000000000000000000101 C
1R
b0000000101 'c
1U
0T
1$}
1X
1Y
b0000000000000000000000000000000000000000000000000000000000000001 Q
b0000000000000000000000000000000000000000000000000000000000000110 O
b0000000000000000000000000000000000000000000000000000000000000101 $y
b00000000000100011000010001100011 'd
b00000000000100011000010001100011 A
b00001 'f
b00011 'e
b0000000000000000000000000000000000000000000000000000000000000010 -z
b0000000000000000000000000000000000000000000000000000000000000010 'i
b0000000000000000000000000000000000000000000000000000000000000010 2O
b00000000000100011000010001100011 %
b000 5
b01000 ?
b11000 4
b000000000001 >
b11000 =
b01000 'g
0'p
0'v
1'y
0'{
1'x
1'r
b10111 'o
0($
0(*
1(-
0(/
1(,
0(&
b10110 (#
0(6
0(<
1(?
0(A
1(>
1(8
b10101 (5
0(H
0(N
1(Q
0(S
1(P
0(J
b10100 (G
0(Z
0(`
1(c
0(e
0(b
1(\
b10011 (Y
0(l
0(r
1(u
0(w
0(t
0(n
b10010 (k
0(j
0(~
0)&
1))
0)+
0)(
1)"
b10001 (}
0)2
0)8
1);
0)=
0):
0)4
b10000 )1
0)D
0)J
1)M
1)O
1)L
1)F
b11111 )C
1)B
0)V
0)\
1)_
1)a
1)^
0)X
b11110 )U
0)h
0)n
1)q
1)s
1)p
1)j
b11101 )g
0)z
0*"
1*%
1*'
1*$
0)|
b11100 )y
0*.
0*4
1*7
1*9
0*6
1*0
b11011 *-
0*@
0*F
1*I
1*K
0*H
0*B
b11010 *?
0*R
0*X
1*[
1*]
0*Z
1*T
b11001 *Q
0*d
0*j
1*m
1*o
0*l
0*f
b11000 *c
0*v
0*|
1+!
0+#
1*~
1*x
b00111 *u
0+*
0+0
1+3
0+5
1+2
0+,
b00110 +)
0+<
0+B
1+E
0+G
1+D
1+>
b00101 +;
0+N
0+T
1+W
0+Y
1+V
0+P
b00100 +M
0+`
0+f
1+i
0+k
0+h
1+b
b00011 +_
0+r
0+x
1+{
0+}
0+z
0+t
b00010 +q
0,&
0,,
1,/
0,1
0,.
1,(
b00001 ,%
0,8
0,>
1,A
0,C
0,@
0,:
b00000 ,7
0,J
0,P
1,S
1,U
1,R
1,L
b01111 ,I
0,\
0,b
1,e
1,g
1,d
0,^
b01110 ,[
0,n
0,t
1,w
1,y
1,v
1,p
b01101 ,m
0-"
0-(
1-+
1--
1-*
0-$
b01100 -!
0-4
0-:
1-=
1-?
0-<
1-6
b01011 -3
0-F
0-L
1-O
1-Q
0-N
0-H
b01010 -E
0-X
0-^
1-a
1-c
0-`
1-Z
b01001 -W
0-j
0-p
1-s
1-u
0-r
0-l
b01000 -i
b0000000000000000000000000000000000000000000000000000000000000010 .z
b0000000000000000000000000000000000000000000000000000000000000010 E
b1111111111111111111111111111111111111111111111111111111111111101 /#
b1111111111111111111111111111111111111111111111111111111111111101 .}
0/-
1/2
b0000000000000000000000000000000000000000000000000000000000000100 @
b0000000000000000000000000000000000000000000000000000000000000100 -
b0000000000000000000000000000000000000000000000000000000000000100 ,
b0000000000000000000000000000000000000000000000000000000000000010 $w
b0000000000000000000000000000000000000000000000000000000000000010 F
1%!
1:
11
1)
08
0/
0'
b0000000000000000000000000000000z 'k
0.*
b01 7
b01 .
b01 &
b1111111111111111111111111111111111111111111111111111111111111110 2M
b1111111111111111111111111111111111111111111111111111111111111110 .~
b1111111111111111111111111111111111111111111111111111111111111110 .{
b1111111110 2N
b00000000000000000000000100000000 'j
0//
1/5
0/4
1%#
1/8
1/:
0/9
1/=
1/?
0/>
1/B
1/D
0/C
1/G
1/I
0/H
1/L
1/N
0/M
1/Q
1/S
0/R
1/V
1/X
0/W
1/[
1/]
0/\
1/`
1/b
0/a
1/e
1/g
0/f
1/j
1/l
0/k
1/o
1/q
0/p
1/t
1/v
0/u
1/y
1/{
0/z
1/~
10"
00!
10%
10'
00&
10*
10,
00+
10/
101
000
104
106
005
109
10;
00:
10>
10@
00?
10C
10E
00D
10H
10J
00I
10M
10O
00N
10R
10T
00S
10W
10Y
00X
10\
10^
00]
10a
10c
00b
10f
10h
00g
10k
10m
00l
10p
10r
00q
10u
10w
00v
10z
10|
00{
11!
11#
01"
11&
11(
01'
11+
11-
01,
110
112
011
115
117
016
11:
11<
01;
11?
11A
01@
11D
11F
01E
11I
11K
01J
11N
11P
01O
11S
11U
01T
11X
11Z
01Y
11]
11_
01^
11b
11d
01c
11g
11i
01h
11l
11n
01m
11q
11s
01r
11v
11x
01w
11{
11}
01|
12"
12$
02#
12'
12)
02(
12,
12.
02-
121
123
022
126
128
027
12;
12=
02<
12@
12B
02A
12E
12G
02F
12J
12L
02K
b00000000000000000000000100000000 'l
b0000000000000000000000000000000000000000000000000000000000000000 /%
b1111111111111111111111111111111111111111111111111111111111111111 /'
b0000000000000000000000000000000000000000000000000000000000000111 $y
1/&
1/!
b0110 .|
b0000000000000000000000000000000000000000000000000000000000000110 'b
b0000000000000000000000000000000000000000000000000000000000000110 B
b1111111111111111111111111111111111111111111111111111111111111110 2Q
b1111111111111111111111111111111111111111111111111111111111111110 G
b0000000000000000000000000000000000000000000000000000000000000000 2M
b0000000000000000000000000000000000000000000000000000000000000000 .~
b0000000000000000000000000000000000000000000000000000000000000000 .{
b0000000000 2N
b0000000000000000000000000000000000000000000000000000000000000000 2Q
b0000000000000000000000000000000000000000000000000000000000000000 G
b0100 H
b0101 .|
b0101 H
1I
1'a
b0000000000000000000000000000000000000000000000000000000000000111 'b
b0000000000000000000000000000000000000000000000000000000000000111 B
#65
0!
0#
b0000000000000000000000000000000000000000000000000000000000000111 L
#70
1!
1#
b0000000000000000000000000000000000000000000000000000000000000111 K
b0000000000000000000000000000000000000000000000000000000000000111 C
1V
b0000000111 'c
1Z
0Y
1%$
0%#
1]
1%&
1_
0^
1%(
0%'
1b
1%*
1c
1%+
b0000000000000000000000000000000000000000000000000000000000000111 Q
b0000000000000000000000000000000000000000000000000000000000001000 O
b0000000000000000000000000000000000000000000000000000000000000110 ${
b0000000000000000000000000000000000000000000000000000000000001001 $y
b00000000001000000011000000100011 'd
b00000000001000000011000000100011 A
b00010 'f
b00000 'e
b0000000000000000000000000000000000000000000000000000000000000100 -z
b0000000000000000000000000000000000000000000000000000000000000100 'i
b0000000000000000000000000000000000000000000000000000000000000100 2O
b0000000000000000000000000000000000000000000000000000000000000000 -y
b0000000000000000000000000000000000000000000000000000000000000000 'h
b0000000000000000000000000000000000000000000000000000000000000000 D
0/,
b00000000001000000011000000100011 %
b011 5
b00000 ?
b01000 4
b000000000010 >
b01000 =
b00000 'g
0'y
1'{
b11111 'o
1'n
0(-
1(/
b11110 (#
0(?
1(A
b11101 (5
0(Q
1(S
b11100 (G
0(c
1(e
b11011 (Y
0(u
1(w
b11010 (k
0))
1)+
b11001 (}
0);
1)=
b11000 )1
0)M
0)O
b10111 )C
0)B
0)_
0)a
b10110 )U
0)q
0)s
b10101 )g
0*%
0*'
b10100 )y
0*7
0*9
b10011 *-
0*I
0*K
b10010 *?
0*[
0*]
b10001 *Q
0*m
0*o
b10000 *c
0+!
1+#
b01111 *u
0+3
1+5
b01110 +)
0+E
1+G
b01101 +;
0+W
1+Y
b01100 +M
0+i
1+k
b01011 +_
0+{
1+}
b01010 +q
0,/
1,1
b01001 ,%
0,A
1,C
b01000 ,7
0,S
0,U
b00111 ,I
0,e
0,g
b00110 ,[
0,w
0,y
b00101 ,m
0-+
0--
b00100 -!
0-=
0-?
b00011 -3
0-O
0-Q
b00010 -E
0-a
0-c
b00001 -W
0-s
0-u
b00000 -i
b0000000000000000000000000000000000000000000000000000000000000100 .z
b0000000000000000000000000000000000000000000000000000000000000100 E
b1111111111111111111111111111111111111111111111111111111111111011 /#
b1111111111111111111111111111111111111111111111111111111111111011 .}
1/-
0/2
0/5
1/4
0/8
0/:
1/9
0/=
0/?
1/>
0/B
0/D
1/C
0/G
0/I
1/H
0/L
0/N
1/M
0/Q
0/S
1/R
0/V
0/X
1/W
0/[
0/]
1/\
0/`
0/b
1/a
0/e
0/g
1/f
0/j
0/l
1/k
0/o
0/q
1/p
0/t
0/v
1/u
0/y
0/{
1/z
0/~
00"
10!
00%
00'
10&
00*
00,
10+
00/
001
100
004
006
105
009
00;
10:
00>
00@
10?
00C
00E
10D
00H
00J
10I
00M
00O
10N
00R
00T
10S
00W
00Y
10X
00\
00^
10]
00a
00c
10b
00f
00h
10g
00k
00m
10l
00p
00r
10q
00u
00w
10v
00z
00|
10{
01!
01#
11"
01&
01(
11'
01+
01-
11,
010
012
111
015
017
116
01:
01<
11;
01?
01A
11@
01D
01F
11E
01I
01K
11J
01N
01P
11O
01S
01U
11T
01X
01Z
11Y
01]
01_
11^
01b
01d
11c
01g
01i
11h
01l
01n
11m
01q
01s
11r
01v
01x
11w
01{
01}
11|
02"
02$
12#
02'
02)
12(
02,
02.
12-
021
023
122
026
028
127
02;
02=
12<
02@
02B
12A
02E
02G
12F
02J
02L
12K
b00000000000000000000000000000001 'l
b0000000000000000000000000000000000000000000000000000000000000011 /'
b1111111111111111111111111111111111111111111111111111111111111100 /%
0/&
0/!
b0001 .|
b0000000000000000000000000000000000000000000000000000000000000000 @
b0000000000000000000000000000000000000000000000000000000000000000 -
b0000000000000000000000000000000000000000000000000000000000000000 ,
b0000000000000000000000000000000000000000000000000000000000000000 $w
b0000000000000000000000000000000000000000000000000000000000000000 F
0%!
1<
13
1+
b0000000000000000000000000000000000000000000000000000000000000000 .z
b0000000000000000000000000000000000000000000000000000000000000000 E
0:
01
0)
0I
0'a
19
10
1(
b00 7
b00 .
b00 &
0/$
b0000000000000000000000000000000000000000000000000000000000000000 /#
b0000000000000000000000000000000000000000000000000000000000000000 .}
0/)
0/-
0/7
0/<
0/A
0/F
0/K
0/P
0/U
0/Z
0/_
0/d
0/i
0/n
0/s
0/x
0/}
00$
00)
00.
003
008
00=
00B
00G
00L
00Q
00V
00[
00`
00e
00j
00o
00t
00y
00~
01%
01*
01/
014
019
01>
01C
01H
01M
01R
01W
01\
01a
01f
01k
01p
01u
01z
02!
02&
02+
020
025
02:
02?
02D
02I
0/"
b1111111111111111111111111111111111111111111111111111111111111100 2M
b1111111111111111111111111111111111111111111111111111111111111100 .~
b1111111111111111111111111111111111111111111111111111111111111100 .{
b1111111100 2N
b00000000000000000000000000000001 'j
b0000000000000000000000000000000000000000000000000000000000001000 'b
b0000000000000000000000000000000000000000000000000000000000001000 B
b1111111111111111111111111111111111111111111111111111111111111100 2Q
b1111111111111111111111111111111111111111111111111111111111111100 G
b0011 H
0%$
1%#
0/+
0/0
1//
0/9
0/>
0/C
0/H
0/M
0/R
0/W
0/\
0/a
0/f
0/k
0/p
0/u
0/z
00!
00&
00+
000
005
00:
00?
00D
00I
00N
00S
00X
00]
00b
00g
00l
00q
00v
00{
01"
01'
01,
011
016
01;
01@
01E
01J
01O
01T
01Y
01^
01c
01h
01m
01r
01w
01|
02#
02(
02-
022
027
02<
02A
02F
02K
0%&
0/.
0/3
0%(
1%'
0//
0/4
0%*
0%+
b0000000000000000000000000000000000000000000000000000000000000000 ${
b0000000000000000000000000000000000000000000000000000000000000111 $y
b0000000000000000000000000000000000000000000000000000000000000000 /'
b0000000000000000000000000000000000000000000000000000000000000000 /%
b1010 .|
b0000000000000000000000000000000000000000000000000000000000000000 2M
b0000000000000000000000000000000000000000000000000000000000000000 .~
b0000000000000000000000000000000000000000000000000000000000000000 .{
b0000000000 2N
b0000000000000000000000000000000000000000000000000000000000000000 2Q
b0000000000000000000000000000000000000000000000000000000000000000 G
b1000 H
b0001 .|
b0001 H
#75
0!
0#
b0000000000000000000000000000000000000000000000000000000000001000 L
#80
1!
1#
b0000000000000000000000000000000000000000000000000000000000000100 2P
b0000000000000000000000000000000000000000000000000000000000001000 K
b0000000000000000000000000000000000000000000000000000000000001000 C
0R
0V
0[
1`
b0000001000 'c
0U
1T
0$}
0Z
1Y
0%#
0_
1^
0%'
1d
0c
1%+
0X
0]
0b
1g
0Y
0^
0d
1c
1h
0g
0h
b0000000000000000000000000000000000000000000000000000000000000000 Q
b0000000000000000000000000000000000000000000000000000000000001001 O
b0000000000000000000000000000000000000000000000000000000000001000 $y
b00000000000000000011001100000011 'd
b00000000000000000011001100000011 A
b00000 'f
b0000000000000000000000000000000000000000000000000000000000000000 -z
b0000000000000000000000000000000000000000000000000000000000000000 'i
b0000000000000000000000000000000000000000000000000000000000000000 2O
b00000000000000000011001100000011 %
b00110 ?
b00000 4
b000000000000 >
b00000 =
b00110 'g
1's
1'v
0'x
0'u
b11001 'o
0'n
1('
1(*
0(,
0()
b11000 (#
1(9
1(<
0(>
1(;
b11011 (5
1(K
1(N
0(P
1(M
b11010 (G
1(]
1(`
1(b
0(_
b11101 (Y
1(o
1(r
1(t
0(q
b11100 (k
1)#
1)&
1)(
1)%
b11111 (}
1(|
1)5
1)8
1):
1)7
b11110 )1
1)G
1)J
0)L
0)I
b10001 )C
1)Y
1)\
0)^
0)[
b10000 )U
1)k
1)n
0)p
1)m
b10011 )g
1)}
1*"
0*$
1*!
b10010 )y
1*1
1*4
1*6
0*3
b10101 *-
1*C
1*F
1*H
0*E
b10100 *?
1*U
1*X
1*Z
1*W
b10111 *Q
1*g
1*j
1*l
1*i
b10110 *c
1*y
1*|
0*~
0*{
b01001 *u
1+-
1+0
0+2
0+/
b01000 +)
1+?
1+B
0+D
1+A
b01011 +;
1+Q
1+T
0+V
1+S
b01010 +M
1+c
1+f
1+h
0+e
b01101 +_
1+u
1+x
1+z
0+w
b01100 +q
1,)
1,,
1,.
1,+
b01111 ,%
1,;
1,>
1,@
1,=
b01110 ,7
1,M
1,P
0,R
0,O
b00001 ,I
1,_
1,b
0,d
0,a
b00000 ,[
1,q
1,t
0,v
1,s
b00011 ,m
1-%
1-(
0-*
1-'
b00010 -!
1-7
1-:
1-<
0-9
b00101 -3
1-I
1-L
1-N
0-K
b00100 -E
1-[
1-^
1-`
1-]
b00111 -W
1-m
1-p
1-r
1-o
b00110 -i
1;
12
1*
b0000000000000000000000000000000000000000000000000000000000000100 2Q
b0000000000000000000000000000000000000000000000000000000000000100 G
09
00
0(
18
1/
1'
b00000000000000000000000001000000 'j
b0000000000000000000000000100000z 'k
1.-
b00000000000000000000000001000000 'l
b0000000000000000000000000000000000000000000000000000000000001001 'b
b0000000000000000000000000000000000000000000000000000000000001001 B
#85
0!
0#
b0000000000000000000000000000000000000000000000000000000000000100 .,
b0000000000000000000000000000000000000000000000000000000000001001 L
#90
1!
1#
b0000000000000000000000000000000000000000000000000000000000000100 ..
b0000000000000000000000000000000000000000000000000000000000001001 K
b0000000000000000000000000000000000000000000000000000000000001001 C
1R
b0000001001 'c
1U
0T
1$}
1X
1Y
b0000000000000000000000000000000000000000000000000000000000000001 Q
b0000000000000000000000000000000000000000000000000000000000001010 O
b0000000000000000000000000000000000000000000000000000000000001001 $y
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 'd
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx A
bxxxxx 'f
bxxxxx 'e
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx -z
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 'i
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 2O
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx -y
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 'h
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx D
x/(
x/,
x/1
x/6
x/;
x/@
x/E
x/J
x/O
x/T
x/Y
x/^
x/c
x/h
x/m
x/r
x/w
x/|
x0#
x0(
x0-
x02
x07
x0<
x0A
x0F
x0K
x0P
x0U
x0Z
x0_
x0d
x0i
x0n
x0s
x0x
x0}
x1$
x1)
x1.
x13
x18
x1=
x1B
x1G
x1L
x1Q
x1V
x1[
x1`
x1e
x1j
x1o
x1t
x1y
x1~
x2%
x2*
x2/
x24
x29
x2>
x2C
x2H
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx %
bxxx 5
bxxxxx ?
bxxxxx 4
bxxxxxxxxxxxx >
bxxxxx =
x6
bxxxxx 'g
x'p
x's
x'v
x'y
x'|
x'~
x'{
x'x
x'u
x'r
bxxxxx 'o
x'n
x($
x('
x(*
x(-
x(0
x(2
x(/
x(,
x()
x(&
bxxxxx (#
x("
x(6
x(9
x(<
x(?
x(B
x(D
x(A
x(>
x(;
x(8
bxxxxx (5
x(4
x(H
x(K
x(N
x(Q
x(T
x(V
x(S
x(P
x(M
x(J
bxxxxx (G
x(F
x(Z
x(]
x(`
x(c
x(f
x(h
x(e
x(b
x(_
x(\
bxxxxx (Y
x(X
x(l
x(o
x(r
x(u
x(x
x(z
x(w
x(t
x(q
x(n
bxxxxx (k
x(j
x(~
x)#
x)&
x))
x),
x).
x)+
x)(
x)%
x)"
bxxxxx (}
x(|
x)2
x)5
x)8
x);
x)>
x)@
x)=
x):
x)7
x)4
bxxxxx )1
x)0
x)D
x)G
x)J
x)M
x)P
x)R
x)O
x)L
x)I
x)F
bxxxxx )C
x)B
x)V
x)Y
x)\
x)_
x)b
x)d
x)a
x)^
x)[
x)X
bxxxxx )U
x)T
x)h
x)k
x)n
x)q
x)t
x)v
x)s
x)p
x)m
x)j
bxxxxx )g
x)f
x)z
x)}
x*"
x*%
x*(
x**
x*'
x*$
x*!
x)|
bxxxxx )y
x)x
x*.
x*1
x*4
x*7
x*:
x*<
x*9
x*6
x*3
x*0
bxxxxx *-
x*,
x*@
x*C
x*F
x*I
x*L
x*N
x*K
x*H
x*E
x*B
bxxxxx *?
x*>
x*R
x*U
x*X
x*[
x*^
x*`
x*]
x*Z
x*W
x*T
bxxxxx *Q
x*P
x*d
x*g
x*j
x*m
x*p
x*r
x*o
x*l
x*i
x*f
bxxxxx *c
x*b
x*v
x*y
x*|
x+!
x+$
x+&
x+#
x*~
x*{
x*x
bxxxxx *u
x*t
x+*
x+-
x+0
x+3
x+6
x+8
x+5
x+2
x+/
x+,
bxxxxx +)
x+(
x+<
x+?
x+B
x+E
x+H
x+J
x+G
x+D
x+A
x+>
bxxxxx +;
x+:
x+N
x+Q
x+T
x+W
x+Z
x+\
x+Y
x+V
x+S
x+P
bxxxxx +M
x+L
x+`
x+c
x+f
x+i
x+l
x+n
x+k
x+h
x+e
x+b
bxxxxx +_
x+^
x+r
x+u
x+x
x+{
x+~
x,"
x+}
x+z
x+w
x+t
bxxxxx +q
x+p
x,&
x,)
x,,
x,/
x,2
x,4
x,1
x,.
x,+
x,(
bxxxxx ,%
x,$
x,8
x,;
x,>
x,A
x,D
x,F
x,C
x,@
x,=
x,:
bxxxxx ,7
x,6
x,J
x,M
x,P
x,S
x,V
x,X
x,U
x,R
x,O
x,L
bxxxxx ,I
x,H
x,\
x,_
x,b
x,e
x,h
x,j
x,g
x,d
x,a
x,^
bxxxxx ,[
x,Z
x,n
x,q
x,t
x,w
x,z
x,|
x,y
x,v
x,s
x,p
bxxxxx ,m
x,l
x-"
x-%
x-(
x-+
x-.
x-0
x--
x-*
x-'
x-$
bxxxxx -!
x,~
x-4
x-7
x-:
x-=
x-@
x-B
x-?
x-<
x-9
x-6
bxxxxx -3
x-2
x-F
x-I
x-L
x-O
x-R
x-T
x-Q
x-N
x-K
x-H
bxxxxx -E
x-D
x-X
x-[
x-^
x-a
x-d
x-f
x-c
x-`
x-]
x-Z
bxxxxx -W
x-V
x-j
x-m
x-p
x-s
x-v
x-x
x-u
x-r
x-o
x-l
bxxxxx -i
x-h
x/*
x//
x/4
x/9
x/>
x/C
x/H
x/M
x/R
x/W
x/\
x/a
x/f
x/k
x/p
x/u
x/z
x0!
x0&
x0+
x00
x05
x0:
x0?
x0D
x0I
x0N
x0S
x0X
x0]
x0b
x0g
x0l
x0q
x0v
x0{
x1"
x1'
x1,
x11
x16
x1;
x1@
x1E
x1J
x1O
x1T
x1Y
x1^
x1c
x1h
x1m
x1r
x1w
x1|
x2#
x2(
x2-
x22
x27
x2<
x2A
x2F
x2K
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 'l
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /%
bx001 .|
0<
03
0+
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx .z
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx E
0;
02
0*
b0000000000000000000000000000000000000000000000000000000000000000 2Q
b0000000000000000000000000000000000000000000000000000000000000000 G
08
0/
0'
b0000000000000000000000000000000z 'k
0.-
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 'j
b0000000000000000000000000000000000000000000000000000000000001010 'b
b0000000000000000000000000000000000000000000000000000000000001010 B
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 2M
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx .~
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx .{
bxxxxxxxxxx 2N
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /#
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx .}
x/)
x/-
x/2
x/7
x/<
x/A
x/F
x/K
x/P
x/U
x/Z
x/_
x/d
x/i
x/n
x/s
x/x
x/}
x0$
x0)
x0.
x03
x08
x0=
x0B
x0G
x0L
x0Q
x0V
x0[
x0`
x0e
x0j
x0o
x0t
x0y
x0~
x1%
x1*
x1/
x14
x19
x1>
x1C
x1H
x1M
x1R
x1W
x1\
x1a
x1f
x1k
x1p
x1u
x1z
x2!
x2&
x2+
x20
x25
x2:
x2?
x2D
x2I
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 2Q
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx G
bx0x1 H
x/+
x/0
x/5
x/:
x/?
x/D
x/I
x/N
x/S
x/X
x/]
x/b
x/g
x/l
x/q
x/v
x/{
x0"
x0'
x0,
x01
x06
x0;
x0@
x0E
x0J
x0O
x0T
x0Y
x0^
x0c
x0h
x0m
x0r
x0w
x0|
x1#
x1(
x1-
x12
x17
x1<
x1A
x1F
x1K
x1P
x1U
x1Z
x1_
x1d
x1i
x1n
x1s
x1x
x1}
x2$
x2)
x2.
x23
x28
x2=
x2B
x2G
x2L
x/.
x/3
x/8
x/=
x/B
x/G
x/L
x/Q
x/V
x/[
x/`
x/e
x/j
x/o
x/t
x/y
x/~
x0%
x0*
x0/
x04
x09
x0>
x0C
x0H
x0M
x0R
x0W
x0\
x0a
x0f
x0k
x0p
x0u
x0z
x1!
x1&
x1+
x10
x15
x1:
x1?
x1D
x1I
x1N
x1S
x1X
x1]
x1b
x1g
x1l
x1q
x1v
x1{
x2"
x2'
x2,
x21
x26
x2;
x2@
x2E
x2J
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /'
x/&
x/!
bxxxx .|
bxxxx H
#95
0!
0#
b0000000000000000000000000000000000000000000000000000000000001010 L
#100
1!
1#
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 2P
b0000000000000000000000000000000000000000000000000000000000001010 K
b0000000000000000000000000000000000000000000000000000000000001010 C
0R
1V
b0000001010 'c
0U
1T
0$}
1Z
0Y
1%#
0X
1]
0Z
1Y
1^
0]
0^
b0000000000000000000000000000000000000000000000000000000000000000 Q
b0000000000000000000000000000000000000000000000000000000000001011 O
b0000000000000000000000000000000000000000000000000000000000001010 $y
b0000000000000000000000000000000000000000000000000000000000001011 'b
b0000000000000000000000000000000000000000000000000000000000001011 B
#105
0!
0#
b0000000000000000000000000000000000000000000000000000000000001011 L
#110
1!
1#
b0000000000000000000000000000000000000000000000000000000000001011 K
b0000000000000000000000000000000000000000000000000000000000001011 C
1R
b0000001011 'c
1U
0T
1$}
1X
1Z
0Y
1]
1^
b0000000000000000000000000000000000000000000000000000000000000011 Q
b0000000000000000000000000000000000000000000000000000000000001100 O
b0000000000000000000000000000000000000000000000000000000000001011 $y
b0000000000000000000000000000000000000000000000000000000000001100 'b
b0000000000000000000000000000000000000000000000000000000000001100 B
#115
0!
0#
b0000000000000000000000000000000000000000000000000000000000001100 L
#120
1!
1#
b0000000000000000000000000000000000000000000000000000000000001100 K
b0000000000000000000000000000000000000000000000000000000000001100 C
0R
0V
1[
b0000001100 'c
0U
1T
0$}
0Z
1Y
0%#
1_
0^
1%'
0X
0]
1b
0Y
0_
1^
1d
0c
0b
1g
0d
1c
1h
0g
0h
b0000000000000000000000000000000000000000000000000000000000000000 Q
b0000000000000000000000000000000000000000000000000000000000001101 O
b0000000000000000000000000000000000000000000000000000000000001100 $y
b0000000000000000000000000000000000000000000000000000000000001101 'b
b0000000000000000000000000000000000000000000000000000000000001101 B
#125
0!
0#
b0000000000000000000000000000000000000000000000000000000000001101 L
#130
1!
1#
b0000000000000000000000000000000000000000000000000000000000001101 K
b0000000000000000000000000000000000000000000000000000000000001101 C
1R
b0000001101 'c
1U
0T
1$}
1X
1Y
b0000000000000000000000000000000000000000000000000000000000000001 Q
b0000000000000000000000000000000000000000000000000000000000001110 O
b0000000000000000000000000000000000000000000000000000000000001101 $y
b0000000000000000000000000000000000000000000000000000000000001110 'b
b0000000000000000000000000000000000000000000000000000000000001110 B
#135
0!
0#
b0000000000000000000000000000000000000000000000000000000000001110 L
#140
1!
1#
b0000000000000000000000000000000000000000000000000000000000001110 K
b0000000000000000000000000000000000000000000000000000000000001110 C
0R
1V
b0000001110 'c
0U
1T
0$}
1Z
0Y
1%#
0X
1]
0Z
1Y
1_
0^
0]
1b
0_
1^
1d
0c
0b
1g
0d
1c
1h
0g
0h
b0000000000000000000000000000000000000000000000000000000000000000 Q
b0000000000000000000000000000000000000000000000000000000000001111 O
b0000000000000000000000000000000000000000000000000000000000001110 $y
b0000000000000000000000000000000000000000000000000000000000001111 'b
b0000000000000000000000000000000000000000000000000000000000001111 B
#145
0!
0#
b0000000000000000000000000000000000000000000000000000000000001111 L
#150
1!
1#
b0000000000000000000000000000000000000000000000000000000000001111 K
b0000000000000000000000000000000000000000000000000000000000001111 C
1R
b0000001111 'c
1U
0T
1$}
1X
1Z
0Y
1]
1_
0^
1b
1d
0c
1g
1h
b0000000000000000000000000000000000000000000000000000000000001111 Q
b0000000000000000000000000000000000000000000000000000000000010000 O
b0000000000000000000000000000000000000000000000000000000000001111 $y
b0000000000000000000000000000000000000000000000000000000000010000 'b
b0000000000000000000000000000000000000000000000000000000000010000 B
#155
0!
0#
b0000000000000000000000000000000000000000000000000000000000010000 L
#160
1!
1#
b0000000000000000000000000000000000000000000000000000000000010000 K
b0000000000000000000000000000000000000000000000000000000000010000 C
0R
0V
0[
0`
1e
b0000010000 'c
0U
1T
0$}
0Z
1Y
0%#
0_
1^
0%'
0d
1c
0%+
1i
0h
1%/
0X
0]
0b
0g
1l
0Y
0^
0c
0i
1h
1m
0l
0m
b0000000000000000000000000000000000000000000000000000000000000000 Q
b0000000000000000000000000000000000000000000000000000000000010001 O
b0000000000000000000000000000000000000000000000000000000000010000 $y
b0000000000000000000000000000000000000000000000000000000000010001 'b
b0000000000000000000000000000000000000000000000000000000000010001 B
#165
0!
0#
b0000000000000000000000000000000000000000000000000000000000010001 L
#170
1!
1#
b0000000000000000000000000000000000000000000000000000000000010001 K
b0000000000000000000000000000000000000000000000000000000000010001 C
1R
b0000010001 'c
1U
0T
1$}
1X
1Y
b0000000000000000000000000000000000000000000000000000000000000001 Q
b0000000000000000000000000000000000000000000000000000000000010010 O
b0000000000000000000000000000000000000000000000000000000000010001 $y
b0000000000000000000000000000000000000000000000000000000000010010 'b
b0000000000000000000000000000000000000000000000000000000000010010 B
#175
0!
0#
b0000000000000000000000000000000000000000000000000000000000010010 L
#180
1!
1#
b0000000000000000000000000000000000000000000000000000000000010010 K
b0000000000000000000000000000000000000000000000000000000000010010 C
0R
1V
b0000010010 'c
0U
1T
0$}
1Z
0Y
1%#
0X
1]
0Z
1Y
1^
0]
0^
b0000000000000000000000000000000000000000000000000000000000000000 Q
b0000000000000000000000000000000000000000000000000000000000010011 O
b0000000000000000000000000000000000000000000000000000000000010010 $y
b0000000000000000000000000000000000000000000000000000000000010011 'b
b0000000000000000000000000000000000000000000000000000000000010011 B
#185
0!
0#
b0000000000000000000000000000000000000000000000000000000000010011 L
#190
1!
1#
b0000000000000000000000000000000000000000000000000000000000010011 K
b0000000000000000000000000000000000000000000000000000000000010011 C
1R
b0000010011 'c
1U
0T
1$}
1X
1Z
0Y
1]
1^
b0000000000000000000000000000000000000000000000000000000000000011 Q
b0000000000000000000000000000000000000000000000000000000000010100 O
b0000000000000000000000000000000000000000000000000000000000010011 $y
b0000000000000000000000000000000000000000000000000000000000010100 'b
b0000000000000000000000000000000000000000000000000000000000010100 B
#195
0!
0#
b0000000000000000000000000000000000000000000000000000000000010100 L
#200
1!
1#
b0000000000000000000000000000000000000000000000000000000000010100 K
b0000000000000000000000000000000000000000000000000000000000010100 C
0R
0V
1[
b0000010100 'c
0U
1T
0$}
0Z
1Y
0%#
1_
0^
1%'
0X
0]
1b
0Y
0_
1^
1c
0b
0c
b0000000000000000000000000000000000000000000000000000000000000000 Q
b0000000000000000000000000000000000000000000000000000000000010101 O
b0000000000000000000000000000000000000000000000000000000000010100 $y
b0000000000000000000000000000000000000000000000000000000000010101 'b
b0000000000000000000000000000000000000000000000000000000000010101 B
#205
0!
0#
b0000000000000000000000000000000000000000000000000000000000010101 L
